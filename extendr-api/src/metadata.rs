
//! Module metadata
//! 
//! This data is returned by get_module_metadata()
//! which is generated by [extendr_module!].
use crate::*;

/// Metadata function argument.
pub struct Arg {
    pub doc: &'static str,
    pub name: &'static str,
    pub arg_type: &'static str,
}

/// Metadata function.
pub struct Func {
    pub doc: &'static str,
    pub name: &'static str,
    pub args: Vec<Arg>,
    pub return_type: &'static str,
    pub func_ptr: *const u8,
}

/// Metadata struct.
pub struct Struct {
    pub doc: &'static str,
    pub name: &'static str,
    pub methods: Vec<Func>,
}

/// Module metadata.
pub struct Metadata {
    pub doc: &'static str,
    pub functions: Vec<Func>,
    pub structs: Vec<Struct>,
}

impl From<Arg> for Robj {
    fn from(val: Arg) -> Self {
        List(
            &[r!(val.doc), r!(val.name), r!(val.arg_type)]
        ).into()
    }
}

impl From<Func> for Robj {
    fn from(val: Func) -> Self {
        List(
            &[r!(val.doc), r!(val.name), r!(List(val.args)), r!(val.return_type)]
        ).into()
    }
}

impl From<Struct> for Robj {
    fn from(val: Struct) -> Self {
        List(
            &[r!(val.doc), r!(val.name), r!(List(val.methods))]
        ).into()
    }
}

impl From<Metadata> for Robj {
    fn from(val: Metadata) -> Self {
        List(
            &[r!(val.doc), r!(List(val.functions)), r!(List(val.structs))]
        ).into()
    }
}
