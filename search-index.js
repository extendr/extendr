var searchIndex = JSON.parse('{\
"extendr_api":{"doc":"A safe and user friendly R extension interface.","t":"NNNNNNNNIINNNNNNQQNNNNRNNNNYYNNNNNNCRRRRRNNNNNNOENNCONNENNNNNNNNRQIYINNNNLLLLOCOKKALLAXOOLLLLAOACLLAAOAOFAAAAOAOOOAAOOFAACFOOCACKLLKLLLLOADDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGNLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFNNNNNNDNGDNNNENNEEENNNDNDDNNNNNDNEMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMALLMLMAALLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLMLLLLLLLMMMMMLLLLLLLMLMMLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMDLLLLLLALLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEDNRNNRNNNNNNRRRNNNNNNNRNNNNLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLMMLMLMLMLMLMLMMLLLLLLLLLLLLLLLLLLLLLSSENNINSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEINLLLLAALLLIDLLMLLLMLLLLLLDIDLLLLMLLLMLLMLLLLLLLLLLMIGDLLLLLLLLLMOLLLMLMLLLLLFLLLLMDDDDDMMLLLLLLLLLLMMMMLLLLLLLLLLLLLLMMMMLLLLLLLLLLFLMMMMMMMMMFLLLLLLLLLLLLLLLLLFFFFIDMLLLLLKKLLLAAOORRDDDMLLLLLLLMLLLLLMLLLMLMMFLLMLLLLLLLLLFLCCCCCCCCGGGGGGGGGGGDGGGGGGGGGGGGGGGGGGGICICDDSCNCNCGEIIIICDFQQQQQIIINCEQQCCCQQECCCSCIECCCCNNINICCYIICQQGFGFGFGFGFGFGFGFGDGCQNCICCCDCQICCCCSCIIIDNCCEQNQQQQQQQNNDDCQCCOCCCCNCGGIIIIDICNCCCNOCCCIDIIDDNIDECQCDQCCCIICNNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLCCLLLLLLLLLLLLLLLLCFFFFOLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLFFFFFLLMLLLLLOCCCLLLLLLLLLLLLLLLLLLLLLLLLCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCLLOMLLCLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFOLLCMOKLLLLLLLLLLLLLLLLLLLLLLLCLLLMMMCMCLLLLLLLLCLLLLLLCCCCCCLLLLLLLLCMLLLLLLLLLLLLLLLLLLLLLLLCCLLLLLXOLKLLLOLLLLLLLLLCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLOCCCLCLLLLLLLMKLLLLLLLLLKKLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLFMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLCCOLLLCMMLLLLLLKLLLMMLLCMALCOCLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLCCLLLLLLLLLLLLLLLKLLCCCCCCLKLLLLLLLLLLLLLLCLLCLLLLLMKLLLLLLLLLLLCOCLLLLMLLLACCCLLLMMMLLLCOLKLLLLLLLLLFFFLLLLLLLLLLLLLLLLKLLLLLLLLLMOOLLLLLLLLLLLLCLLOOOLLCLLKLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLCLCCLLLLLLLLLLLLLLCFOFOMLLMLLMLKLLLLMMMLLLLLLLLLLLLLLLLLLOLOCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLOOCLLLLLLLLLLLLLLLLLLLLLLLKLLLLCLLLLLLOLLLLLLLLLLLLLLLKLLLLLLLLLLLMMMDDDDDDDDDDDDDDDDDDDDLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMIQKFFFGGGGGGGGGDGGGGGGGGGGGGGGGGGGGIDGDFQIFGFGFGFGFGFGFGFGQSIDQGGIQQFFFOLLFFFFOMMKMLKKKMOKLLKMKIIIIIIIIIIDIIIILLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLKLLLLLMLAKLLLLLOLLLAALLLLLLLLFLLLALLLLLILLOOIIILLLLFOOOOOOKLLFLLLLLLLLLLLLILLLLLLLLLLLLLLLLLLILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOODDDDGAAAAAOOOOOOOODLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMHHHRFFFFCCCCCCCCCICCCCCCCCCCCCCCCCCCCCCCCCCCCCICALLLLLLLLLLAAAAAAAAAAAAOOFFAAAAAAAAAKAIIIIIIDILLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLOFLLLLLLLLMLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDILLLLLLLLLLLKMMLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDDLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLMLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLMLLLLLLLLDLLLLLLLLLLLLLLLLMLLMLLLLLLLDLLLLLLLLLLLLLLLLLLMLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDLLLLLLLLLLLLLLLLMLLLLLLLLDIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLKLMLLLLLMMLLLLLLLLLLLLLLLLLLLLKLDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLORIIDGGGLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLLLLLLNNELLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLLLLLLLLLLLLLDLLLLLLLLLLLLLLMLLLLLLLDLLLLLLLLLLLLLLLLLMLLLLLLLLLDLLLLLLLLLLLLLLLLMLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFLLLLLLLDLLLLLLLLLLLLLLLLMLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLDLLLFLLFFFFLLFFFFFFFFFFLLLLLLLLLLFFFFFFFFFFFMFFLFFFLFLLLLFLF","n":["Any","Any","Builtin","Builtin","Bytecode","Bytecode","Complexes","Complexes","Deref","DerefMut","Dot","Dot","Doubles","Doubles","Environment","Environment","Error","Error","Expressions","Expressions","ExternalPtr","ExternalPtr","FALSE","Function","Function","Integers","Integers","IntoDataFrameRow","IntoRobj","Language","Language","List","List","Logicals","Logicals","Metadata","NA_INTEGER","NA_LOGICAL","NA_REAL","NA_STRING","NULL","Null","Null","Pairlist","Pairlist","Promise","Promise","R","Rany","Raw","Raw","Robj","Rraw","Rstr","Rstr","Rtype","S4","S4","Special","Special","Strings","Strings","Symbol","Symbol","TRUE","Target","TryFrom","TryFromRobj","TryInto","Unknown","Unknown","WeakRef","WeakRef","borrow","borrow","borrow_mut","borrow_mut","call","catch_r_error","data_frame","deref","deref_mut","deserializer","eq","eq","error","extendr","extendr_module","factor","fmt","fmt","from","from","functions","global","graphics","handle_panic","into","into","io","iter","lang","lang_macros","list","make_method_def","metadata","na","optional","ownership","pairlist","prelude","r","reprint","reprintln","rmacros","robj","rprint","rprintln","rtype_to_sxp","scalar","serializer","single_threaded","sxp_to_rtype","sym","test","this_thread_id","thread_safety","throw_r_error","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","var","wrapper","DoublesVisitor","IntegersVisitor","ListGetter","LogicalsVisitor","NamedListGetter","RboolVisitor","RfloatVisitor","RintVisitor","RobjVisitor","RstrVisitor","SliceGetter","StringsVisitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_robj","into","into","into","into","into","into","into","into","into","into","into","into","keys","list","list","next_element_seed","next_element_seed","next_key_seed","next_value_seed","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","visit_bool","visit_bool","visit_bool","visit_bytes","visit_enum","visit_f64","visit_f64","visit_f64","visit_i32","visit_i64","visit_i64","visit_i64","visit_map","visit_newtype_struct","visit_none","visit_none","visit_none","visit_none","visit_none","visit_none","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_some","visit_some","visit_some","visit_some","visit_some","visit_some","visit_str","visit_str","visit_str","visit_u64","visit_u64","visit_u64","visit_unit","visit_unit","visit_unit","visit_unit","visit_unit","visit_unit","visit_unit","visit_unit","visit_unit","EitherError","Error","EvalError","ExpectedAltrep","ExpectedAny","ExpectedBuiltin","ExpectedBytecode","ExpectedComplex","ExpectedDataframe","ExpectedDot","ExpectedEnvironment","ExpectedExpression","ExpectedExternalPtr","ExpectedExternalPtrType","ExpectedFunction","ExpectedInteger","ExpectedLanguage","ExpectedList","ExpectedLogical","ExpectedMatrix","ExpectedMatrix3D","ExpectedNonZeroLength","ExpectedNull","ExpectedNumeric","ExpectedPairlist","ExpectedPrimitive","ExpectedPromise","ExpectedRaw","ExpectedReal","ExpectedRstr","ExpectedS4","ExpectedScalar","ExpectedSpecial","ExpectedString","ExpectedSymbol","ExpectedVector","ExpectedWeakRef","ExpectedWholeNumber","MustNotBeNA","NDArrayShapeError","NamesLengthMismatch","NamespaceNotFound","NoGraphicsDevices","NotFound","Other","OutOfLimits","OutOfRange","Panic","ParseError","Result","TypeMismatch","borrow","borrow_mut","custom","custom","eq","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","base_env","base_namespace","blank_scalar_string","blank_string","current_env","empty_env","eval_string","eval_string_with_params","find_namespace","find_namespaced_function","global_env","global_function","global_var","local_var","na_string","namespace_registry","new_env","nil_value","parse","srcref","Bevel","Blank","Bold","BoldItalic","Butt","CM","Context","Dashed","DevDesc","Device","Device","DotDash","Dotted","FontFace","Inches","Italic","LineEnd","LineJoin","LineType","LongDash","Mitre","Normalized","Pattern","Plain","R_GE_gcontext","Raster","Round","Round","Solid","Square","Symbol","TextMetric","TwoDash","Unit","ascent","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","cex","char_metric","circle","clip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","col","color","color","context","context","current","descent","device_descriptor","device_driver","device_number","eq","eq","eq","eq","eq","eq","eq","eq","eq","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_face","font_family","fontface","fontfamily","from","from","from","from","from","from","from","from","from","from","from","from_device","from_device_coords","from_device_wh","gamma","gamma","get_device","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into","its","lend","line","line_end","line_height","line_join","line_mitre","line_type","line_width","lineheight","ljoin","lmitre","lty","lwd","math_text","math_text_height","math_text_metric","math_text_width","mode_off","mode_on","new_page","offset","path","patternFill","pixels","point_size","polygon","polyline","ps","raster","rect","scalar","symbol","t","text","text_height","text_metric","text_width","tmetric","to_device_coords","to_device_wh","to_i32","to_i32","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u32","to_u32","transform","trel","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ts","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit_to_ge","width","width","xscale","yscale","Color","borrow","borrow_mut","from","hex","hex3","into","predefined","rgb","rgba","to_i32","try_from","try_into","type_id","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","CanHAdjOption","DevCapCapture","DevCapLocator","DevCapRaster","DevCapTransparency","DevCapTransparentBg","DeviceDescriptor","ExceptForMissingValues","FONTSIZE","FixedAdjustment","Fully","HEIGH_INCH","No","No","No","No","No","NotSupported","POINTSIZE","PT","PT_PER_INCH","Semi","Unset","Unset","Unset","Unset","Unset","VariableAdjustment","WIDTH_INCH","Yes","Yes","Yes","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","cra","cra","default","device_size","from","from","from","from","from","from","from","into","into","into","into","into","into","into","ipr","ipr","left","new","right","startcol","startcol","startfill","startfill","startfont","startfont","startlty","startlty","startps","startps","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCEPT_UTF8_TEXT","CLIPPING_STRATEGY","ClippingStrategy","Device","DeviceAndEngine","DeviceDriver","Engine","USE_CAPTURE","USE_LOCATOR","USE_PLOT_HISTORY","USE_RASTER","activate","borrow","borrow_mut","capture","char_metric","circle","clip","close","create_device","deactivate","eventHelper","from","holdflush","into","line","locator","mode","new_frame_confirm","new_page","on_exit","path","polygon","polyline","raster","rect","size","text","text_width","try_from","try_into","type_id","AnyFormat","AsciiFormat","AsciihexFormat","BinaryFormat","Load","PstreamFormat","Save","XdrFormat","borrow","borrow_mut","from","into","load","save","try_from","try_into","type_id","Load","ReadHook","borrow","borrow_mut","data","from","from_reader","from_reader","func","into","load","load","try_from","try_into","type_id","OutStream","Save","WriteHook","borrow","borrow","borrow_mut","borrow_mut","data","from","from","from_writer","func","into","into","r_state","save","save","to_writer","to_writer","try_from","try_from","try_into","try_into","type_id","type_id","writer","AsStrIter","NamedListIter","StrIter","as_str_iter","borrow","borrow_mut","clone","clone_into","default","fmt","from","from_robj","i","impl_iter_debug","into","into_iter","len","len","length","levels","na_iter","new","next","nth","size_hint","str_from_strsxp","to_owned","try_from","try_into","type_id","vector","Arg","Func","Impl","Metadata","RArg","arg_type","args","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","doc","doc","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","func_ptr","functions","hidden","impls","into","into","into","into","into","into_robj","into_robj","into_robj","into_robj","is_self","join_str","make_r_wrappers","methods","mod_name","name","name","name","name","r_name","return_type","rust_name","sanitize_identifier","to_actual_arg","to_formal_arg","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_doc","write_function_wrapper","write_impl_wrapper","write_method_wrapper","CanBeNA","EXTENDR_NA_STRING","__private_field","borrow","borrow_mut","deref","from","into","is_na","na","try_from","try_into","type_id","either","ndarray","make_array_view_1","make_array_view_2","EXTRA_PRESERVATION_SIZE","INITIAL_PRESERVATION_SIZE","OWNERSHIP","Object","Ownership","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_objects","cur_index","deref","from","from","from","garbage_collect","index","into","into","into","max_index","new","objects","preservation","protect","protect","ref_count","refcount","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unprotect","unprotect","AltComplexImpl","AltIntegerImpl","AltLogicalImpl","AltRawImpl","AltRealImpl","AltStringImpl","Altrep","AltrepImpl","ArcArray","ArcArray1","ArcArray2","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","AsStrIter","AssignElem","Attributes","Axis","AxisDescription","C","CanBeNA","ColumnMajor","Complexes","Continue","Conversions","CowArray","CowRepr","Data","DataMut","DataOwned","DataShared","Dataframe","Dim","Dim","Dim","Dim","Dim","Dim","Dim","DimAdd","DimMax","Dimension","Done","Doubles","Either","Elem","Elem","EnvIter","Environment","Error","Error","Error","ErrorKind","Eval","Expressions","ExternalPtr","F","FALSE","FixedInitializer","FoldWhile","FromList","FromRobj","Function","GetSexp","IncompatibleLayout","IncompatibleShape","Index","Index","IndexLonger","Integers","IntoDataFrameRow","IntoDataFrameRow","IntoDimension","IntoNdProducer","IntoRobj","Item","Item","Ix","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","IxDynImpl","Ixs","Language","Larger","Left","Length","LinalgScalar","List","ListIter","Logicals","MathCell","MatrixConversions","MaybeUninit","MultiSliceArg","NA_INTEGER","NA_LOGICAL","NA_REAL","NA_STRING","NDIM","NULL","NdFloat","NdIndex","NdProducer","NewAxis","NewAxis","Nullable","Operators","Order","OutDim","OutOfBounds","Output","Output","Output","Output","Output","Output","Output","Overflow","Owned","OwnedArcRepr","OwnedRepr","Pairlist","Pattern","Primitive","Promise","R","RArray","RColumn","RMatrix","RMatrix3D","RangeLimited","Raw","RawArrayView","RawArrayViewMut","RawData","RawDataClone","RawDataMut","RawDataSubst","RawViewRepr","RemoveAxis","Result","Right","Rinternals","Robj","RobjItertools","RowMajor","Rraw","Rstr","Rtype","S4","ScalarOperand","Shape","ShapeArg","ShapeBuilder","ShapeError","Slice","Slice","SliceArg","SliceInfo","SliceInfoElem","Slices","Smaller","StrIter","StrideShape","Strides","Strings","Symbol","TRUE","TryFrom","TryInto","Types","Unsupported","View","ViewRepr","Zip","accumulate_axis_inplace","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","and","and","and","and","and","and_broadcast","and_broadcast","and_broadcast","and_broadcast","and_broadcast","any","append","append","append_lang","append_with_name","apply","apply","apply","apply","apply","apply","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_collect","apply_collect","apply_collect","apply_collect","apply_collect","args","arr0","arr1","arr2","arr3","array","as_array_view","as_array_view_mut","as_init_slice","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_pin_mut","as_pin_ref","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice_memory_order","as_slice_memory_order_mut","as_slice_mut","as_standard_layout","assign","assign_elem","assign_elem","assign_to","assume_init","aview0","aview1","aview2","aview_mut1","aview_mut2","axes","axis","axis","axis_chunks_iter","axis_chunks_iter_mut","axis_iter","axis_iter_mut","axis_windows","azip","base_env","base_namespace","base_symbol","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","blank_scalar_string","blank_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brace_symbol","bracket_2_symbol","bracket_symbol","broadcast","build_uninit","call","capacity","cast","cast","catch_r_error","cause","cell_view","class_symbol","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","collapse_axis","collect","column","column_major","column_mut","columns","columns_mut","concatenate","concatenate","consume","count","current_env","data","data_frame","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","default","default","default","default","default","deref","deref","deref","deref","deref_into_view","deref_into_view","deref_into_view_mut","deref_mut","deref_mut","deref_mut","description","device_symbol","diag","diag_mut","dim","dim","dim","dim","dim_symbol","dimension","dimnames_symbol","div","div","div","div","div","div","div_assign","div_assign","dollar_symbol","dot","dot","dot","dot","dot","dot","dot_defined","dot_method","dot_package_name","dot_target","dots_symbol","double_colon_symbol","drop","either","either_into","either_with","elt","elt","elt","elt","empty_env","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_string","eval_string_with_params","exact_chunks","exact_chunks_mut","expect_left","expect_right","extend","extendr","extendr_module","eye","f","f","f","f","factor","factor_err","factor_first","factor_none","factor_ok","factor_second","fill","fill_buf","find","find_map","find_namespace","find_namespaced_function","first","first_mut","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold_axis","fold_while","fold_while","fold_while","fold_while","fold_while","fold_while","for_both","for_each","for_each","for_each","for_each","for_each","for_each","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_diag","from_diag_elem","from_elem","from_iter","from_iter","from_kind","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_shape","from_shape","from_shape_fn","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_simple_fn","from_shape_vec","from_shape_vec_unchecked","from_vec","ge","gencolumns","gencolumns_mut","genrows","genrows_mut","geomspace","get","get","get","get","get_mut","get_mut_ptr","get_ptr","get_region","get_region","get_region","get_region","global","global_env","global_function","global_var","gt","handle_panic","hash","hash","hash","hash","hash","hash","hash","in_dim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_axis","index_axis_inplace","index_axis_move","index_axis_mut","index_checked","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_unchecked","indexed","indexed_iter","indexed_iter_mut","indices","indices","indices_of","insert_axis","insert_axis_inplace","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cell_view","into_diag","into_dimension","into_dimension","into_dimension","into_dimensionality","into_dyn","into_dyn","into_dyn","into_future","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_owned","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_producer","into_producer","into_producer","into_producer","into_raw_vec","into_robj","into_scalar","into_scalar","into_scalar","into_shape","into_shape","into_shape","into_shape","into_shape","into_shape_and_order","into_shape_and_order","into_shape_and_order","into_shared","into_slice","into_slice_memory_order","invert_axis","is_column_major","is_done","is_empty","is_index","is_left","is_new_axis","is_owned","is_owned","is_right","is_row_major","is_slice","is_square","is_standard_layout","is_view","is_view","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","iter","iter","iter_mut","kind","lanes","lanes_mut","lang","lang","lang","last","last","last_mut","lastvalue_symbol","layout","layout_tendency","le","left","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len_of","length","levels_symbol","life","linalg","linspace","list","list","local_var","logspace","lt","make_lang","map","map","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_axis","map_axis_mut","map_collect","map_collect","map_collect","map_collect","map_collect","map_inplace","map_left","map_mut","map_right","mapv","mapv_inplace","mapv_into","mapv_into_any","max_stride_axis","maybe_uninit","mean","mean_axis","merge_axes","missing_arg","mode_symbol","move_into","move_into_uninit","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_slice_move","multi_slice_move","multi_slice_mut","na_rm_symbol","na_string","name_symbol","names_symbol","namespace_env_symbol","namespace_registry","ncols","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","neg","neg","new","new","new","new_env","next","next_back","nil_value","not","not","nrows","nth","ones","out_dim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","outer_iter","outer_iter_mut","package_symbol","pairlist","parse","partial_cmp","partial_cmp","partial_cmp","partition","parts","permuted_axes","poll","position","prelude","previous_symbol","print_r_error","print_r_output","product","provide","provide","ptr","ptr","ptr","push","push_column","push_row","quote_symbol","r","range","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_view","raw_view_mut","rcarr1","rcarr2","rcarr3","read","read_exact","read_line","read_to_end","read_to_string","read_until","reborrow","reborrow","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_index","repr","reprint","reprintln","reshape","reversed_axes","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","row","row_major","row_mut","row_names_symbol","rows","rows_mut","rprint","rprintln","s","scalar_sum","scaled_add","seeds_symbol","seek","select","set_f","set_f","set_f","set_f","shape","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","single_threaded","size","size","size","size","size","size","size","size_checked","size_checked","size_checked","size_hint","slice","slice_axis","slice_axis_inplace","slice_axis_mut","slice_collapse","slice_each_axis","slice_each_axis_inplace","slice_each_axis_mut","slice_move","slice_mut","sort_list_symbol","source","source_symbol","spec_symbol","split","split","split","split","split","split","split_at","split_at","split_at","split_at","split_complex","split_complex","split_complex","split_complex","srcref","stack","stack","stack_new_axis","stack_new_axis","start","std","std_axis","step","step_by","stride","stride","stride_of","strides","strides","strides","strides","strides","strides","strides","strides","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum_axis","swap","swap","swap_axes","sym","t","test","this_thread_id","throw_r_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_shape","to_shared","to_slice","to_slice_memory_order","to_string","to_string","to_string","to_string","to_vec","transpose","triple_colon_symbol","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned_nocopy","try_left","try_right","tsp_symbol","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uget","uget","uget","uget","uget_mut","unbound_value","uninit","uninitialized","unwrap_left","unwrap_right","uswap","var","var","var_axis","view","view_mut","visit","windows","write","write_all","write_fmt","zero","zero","zero","zero","zero","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zip_mut_with","end","start","step","Axes","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Indices","IndicesIter","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","all","all","any","any","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","chunk","chunk","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","count","count","dim","dim","dim","end","find","find","find_map","find_map","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","inner","inner","inner_len","inner_len","inner_len","inner_len","inner_stride","inner_stride","inner_stride","inner_stride","inner_strides","inner_strides","inner_strides","inner_strides","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","iter","iter","iter","iter","iter","iter","iter","iter","last","last","len","len","len","len","len","len","len","len","length","life","life","life","life","life","life","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth_back","nth_back","partial_chunk_dim","partial_chunk_dim","partial_chunk_index","partial_chunk_index","position","position","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","raw_dim","rfold","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_at","split_at","split_at","split_at","start","start","strides","strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","window","Dot","Output","dot","general_mat_mul","general_mat_vec_mul","kron","ArcArray","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","Axis","CowArray","Dim","Dim","Dim","Dimension","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","Larger","NDIM","NdFloat","NewAxis","Pattern","RawArrayView","RawArrayViewMut","ShapeBuilder","Smaller","Strides","arr0","arr1","arr2","array","as_array_view","as_array_view_mut","aview0","aview1","aview2","aview_mut1","azip","data","dim","f","index","into_dyn","into_pattern","into_shape","ndim","ptr","s","set_f","size","size_checked","strides","strides","zeros","AsTypedSlice","Attributes","Eval","FromRobj","GetSexp","IntoRobj","Length","Operators","Operators","Rinternals","Robj","RobjItertools","Slices","ToVectorValue","Types","add","as_any","as_bool","as_integer","as_integer_slice","as_integer_slice_mut","as_integer_vector","as_integers","as_logical","as_logical_iter","as_logical_slice","as_logical_vector","as_raw_slice","as_raw_slice_mut","as_real","as_real_iter","as_real_slice","as_real_slice_mut","as_real_vector","as_robj","as_robj","as_robj_mut","as_robj_mut","as_str","as_str_vector","as_string_vector","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_raw","as_typed_slice_raw_mut","borrow","borrow_mut","class","clone","clone_into","debug","default","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","dim","dimnames","div","drop","eq","eq","eq","eq","eval","eval_blind","eval_with_env","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_robj","from_robj","from_sexp","from_sexp_ref","get","get","get_attrib","has_attrib","has_names","inherits","inner","into","into_robj","into_robj","into_robj","is_empty","is_na","len","levels","make_typed_slice","mul","names","newtype_variant_seed","operators","rinternals","rtype","serialize","set_attrib","set_class","set_names","struct_variant","sub","to_owned","to_str","try_from","try_from","try_from","try_from_robj","try_into","tuple_variant","type_id","unit_variant","variant_seed","FromRobj","from_robj","from_robj","impl_iter_from_robj","impl_prim_from_robj","IntoRobj","RobjItertools","ToVectorValue","collect_rarray","collect_rarray","collect_robj","collect_robj","fixed_size_collect","impl_complex_tvv","impl_from_as_iterator","impl_from_into_iter","impl_integer_tvv","impl_real_tvv","impl_str_tvv","into_robj","sexptype","sexptype","str_to_character","to_complex","to_complex","to_integer","to_integer","to_logical","to_logical","to_raw","to_raw","to_real","to_real","to_sexp","to_sexp","Operators","call","call","call","dollar","dollar","dollar","double_colon","double_colon","double_colon","index","index","index","slice","slice","slice","tilde","tilde","tilde","Rinternals","alloc_matrix","alloc_matrix","alloc_vector","alloc_vector","as_character_factor","as_character_factor","as_character_vector","as_character_vector","coerce_vector","coerce_vector","conformable","conformable","deparse","deparse","duplicate","duplicate","eval_promise","eval_promise","find_function","find_function","find_var","find_var","get_current_srcref","get_current_srcref","get_src_filename","get_src_filename","is_altinteger","is_altinteger","is_altlogical","is_altlogical","is_altraw","is_altraw","is_altreal","is_altreal","is_altrep","is_altrep","is_altstring","is_altstring","is_array","is_array","is_char","is_char","is_complex","is_complex","is_environment","is_environment","is_expressions","is_expressions","is_external_pointer","is_external_pointer","is_factor","is_factor","is_frame","is_frame","is_function","is_function","is_integer","is_integer","is_language","is_language","is_list","is_list","is_logical","is_logical","is_matrix","is_matrix","is_missing_arg","is_missing_arg","is_namespace_env","is_namespace_env","is_null","is_null","is_number","is_number","is_object","is_object","is_package_env","is_package_env","is_pairlist","is_pairlist","is_primitive","is_primitive","is_promise","is_promise","is_raw","is_raw","is_real","is_real","is_s4","is_s4","is_string","is_string","is_symbol","is_symbol","is_ts","is_ts","is_unbound_value","is_unbound_value","is_user_binop","is_user_binop","is_valid_string","is_valid_string","is_valid_string_f","is_valid_string_f","is_vector","is_vector","is_vector_atomic","is_vector_atomic","is_vector_list","is_vector_list","is_vectorizable","is_vectorizable","namespace_env_spec","namespace_env_spec","ncols","ncols","nrows","nrows","package_env_name","package_env_name","pair_to_vector_list","pair_to_vector_list","vector_to_pair_list","vector_to_pair_list","xlengthgets","xlengthgets","impl_try_from_robj","impl_try_from_scalar_integer","impl_try_from_scalar_real","Rbool","Rcplx","Rfloat","Rint","c64","macros","rbool","rcplx_full","rfloat","rint","gen_binop","gen_binopassign","gen_from_primitive","gen_from_scalar","gen_impl","gen_sum_iter","gen_trait_impl","gen_unop","Rbool","borrow","borrow_mut","clone","clone_into","default","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","false_value","fmt","from","from","from","from","from","from","from","from_bool","inner","into","into_robj","is_false","is_na","is_true","na","na_value","not","serialize","sexptype","sexptype","to_bool","to_logical","to_logical","to_owned","true_value","try_from","try_from","try_from","try_into","type_id","Rcplx","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow_mut","c64","clone","clone_into","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","fmt","from","from","from","from","from","from","from","from","from","from","im","inner","into","into_robj","is_infinite","is_na","is_na","is_nan","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","na","na","neg","neg","new","re","sexptype","sexptype","sexptype","sexptype","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_complex","to_complex","to_complex","to_complex","to_owned","try_from","try_from","try_from","try_into","type_id","Rfloat","abs","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","default","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","fmt","from","from","from","from","from","inner","into","into_robj","is_infinite","is_na","is_nan","is_sign_negative","is_sign_positive","is_subnormal","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","na","neg","neg","serialize","sqrt","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","try_from","try_from","try_from","try_into","type_id","Rint","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","default","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","fmt","from","from","from","from","from","inner","into","into_robj","is_na","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","na","neg","neg","not","not","serialize","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","try_from","try_from","try_from","try_into","type_id","RobjSerializer","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","end","end","end","end","end","end","end","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","key","parent","parent","parent","parent","parent","parent","parent","robj","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_robj","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values","values","values","values","values","variant","variant","NEXT_THREAD_ID","OWNER_THREAD","R_ERROR_BUF","THREAD_ID","catch_r_error","single_threaded","this_thread_id","throw_r_error","AltComplexImpl","AltIntegerImpl","AltLogicalImpl","AltRawImpl","AltRealImpl","AltStringImpl","Altrep","AltrepImpl","Complexes","Conversions","Dataframe","Doubles","EnvIter","Environment","Expressions","ExternalPtr","FromList","Function","Integers","IntoDataFrameRow","Language","List","ListIter","Logicals","MatrixConversions","Nullable","Pairlist","PairlistIter","Primitive","Promise","RArray","RColumn","RMatrix","RMatrix3D","Raw","Rstr","S4","Strings","SymPair","Symbol","altrep","as_char","as_environment","as_expressions","as_function","as_language","as_list","as_pairlist","as_promise","as_raw","as_symbol","complexes","dataframe","doubles","environment","expr","externalptr","function","integers","lang","list","logicals","macros","make_conversions","make_getsexp","make_symbol","make_vector","matrix","nullable","pairlist","primitive","promise","raw","rstr","s4","strings","sym_pair","symbol","AltComplexImpl","AltIntegerImpl","AltLogicalImpl","AltRawImpl","AltRealImpl","AltStringImpl","Altrep","AltrepImpl","altrep_class","as_robj","as_robj_mut","borrow","borrow_mut","class","clone","clone_into","coerce","data","dataptr","dataptr_or_null","duplicate","duplicate_ex","elt","elt","elt","elt","elt","elt","eq","extract_subset","from","from_robj","from_state_and_class","get","get_region","get_region","get_region","get_region","get_region","get_state","get_state_mut","inspect","into","into_robj","is_manifest","is_sorted","is_sorted","is_sorted","is_sorted","length","make_altcomplex_class","make_altcomplex_from_iterator","make_altinteger_class","make_altinteger_from_iterator","make_altlogical_class","make_altlogical_from_iterator","make_altraw_class","make_altreal_class","make_altreal_from_iterator","make_altstring_class","make_from_iterator","manifest","max","max","min","min","no_na","no_na","no_na","no_na","robj","serialized_state","set_data","set_elt","sum","sum","sum","to_owned","tot_min_max_nas","tot_min_max_nas","tot_min_max_nas","try_from","try_from","try_from","try_into","type_id","unserialize","unserialize_ex","Complexes","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","elt","eq","fmt","from","from_iter","from_robj","from_values","from_values_altrep","get","get_region","into","into_robj","iter","iter_mut","new","robj","to_owned","try_from","try_from","try_from","try_into","type_id","Dataframe","IntoDataFrameRow","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","eq","fmt","from","get","into","into_dataframe","marker","robj","to_owned","try_from","try_from","try_from","try_from_values","try_into","type_id","Doubles","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","elt","eq","fmt","from","from_iter","from_robj","from_values","from_values_altrep","get","get_region","into","into_robj","is_sorted","iter","iter_mut","new","no_na","robj","serialize","set_elt","to_owned","try_from","try_from","try_from","try_into","type_id","EnvIter","Environment","as_robj","as_robj_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","envflags","eq","fmt","fmt","from","from","from_pairs","from_robj","get","hash_table","into","into","into_iter","into_robj","iter","local","names","new_with_capacity","new_with_parent","next","pairlist","parent","robj","serialize","set_envflags","set_local","set_parent","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Expressions","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_robj","from_values","get","into","into_robj","new","robj","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","values","ExternalPtr","addr","addr_mut","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","get","into","into_robj","marker","new","protected","robj","tag","to_owned","try_from","try_from","try_from","try_into","type_id","Function","as_robj","as_robj_mut","body","borrow","borrow_mut","call","clone","clone_into","environment","eq","fmt","formals","from","from_parts","from_robj","get","into","into_robj","robj","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","Integers","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","elt","eq","fmt","from","from_iter","from_robj","from_values","from_values_altrep","get","get_region","into","into_robj","is_sorted","iter","iter_mut","new","no_na","robj","serialize","set_elt","to_owned","try_from","try_from","try_from","try_into","type_id","Language","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_robj","from_values","get","into","into_robj","iter","names","robj","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","values","FromList","KeyValue","List","ListIter","as_robj","as_robj_mut","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","elt","eq","fmt","fmt","from","from","from","from_hashmap","from_iter","from_names_and_values","from_pairs","from_parts","from_robj","from_robj","from_values","get","i","into","into","into","into_hashmap","into_iter","into_iter","into_robj","into_robj","iter","key","len","len","length","new","new","next","nth","robj","robj","serialize","set_elt","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","Logicals","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","elt","eq","fmt","from","from_iter","from_robj","from_values","from_values_altrep","get","get_region","into","into_robj","iter","iter_mut","new","robj","serialize","set_elt","to_owned","try_from","try_from","try_from","try_into","type_id","gen_vector_wrapper_impl","BASE","MatrixConversions","Offset","RArray","RColumn","RMatrix","RMatrix3D","as_column","as_matrix","as_matrix3d","borrow","borrow_mut","data","data","deref","dim","dim","eq","fmt","from","from_parts","from_robj","from_robj","index","index_mut","into","into_robj","ncols","ncols","ncols","ncols","new_column","new_column","new_matrix","new_matrix","new_matrix3d","new_matrix3d","nrows","nrows","nrows","nrows","nrows","nrows","nsub","nsub","offset","offset","offset","offset","robj","try_from","try_from","try_from","try_from","try_into","type_id","NotNull","Null","Nullable","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","from_robj","into","into_option","into_robj","map","to_owned","try_from","try_from","try_from","try_into","type_id","Pairlist","PairlistIter","as_robj","as_robj_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","fmt","fmt","from","from","from","from_pairs","from_robj","get","into","into","into_iter","into_iter","into_robj","into_robj","iter","list_elem","names","new","new","next","robj","robj","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","values","Primitive","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_robj","from_string","get","into","into_robj","robj","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","Promise","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","code","environment","eq","eval","fmt","from","from_parts","from_robj","get","into","into_robj","robj","seen","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","value","Raw","as_robj","as_robj_mut","as_slice","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_bytes","from_robj","get","into","into_robj","new","robj","serialize","to_owned","try_from","try_from","try_from","try_into","type_id","Rstr","as_ref","as_robj","as_robj_mut","as_str","borrow","borrow_mut","clone","clone_into","deref","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","fmt","fmt","from","from","from","from_robj","from_string","get","into","into_robj","is_na","na","robj","serialize","sexp_to_str","to_owned","to_string","try_from","try_from","try_from","try_into","type_id","S4","as_robj","as_robj_mut","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_robj","get","get_slot","has_slot","into","into_robj","new","robj","serialize","set_class","set_slot","to_owned","try_from","try_from","try_from","try_into","type_id","Strings","as_robj","as_robj_mut","as_slice","borrow","borrow_mut","clone","clone_into","default","deref","deserialize","elt","eq","fmt","from","from","from_iter","from_robj","from_values","get","into","into_robj","is_sorted","iter","new","no_na","robj","set_elt","to_owned","try_from","try_from","try_from","try_into","type_id","Symbol","as_robj","as_robj_mut","as_str","base_symbol","borrow","borrow_mut","brace_symbol","bracket_2_symbol","bracket_symbol","class_symbol","clone","clone_into","device_symbol","dim_symbol","dimnames_symbol","dollar_symbol","dot_defined","dot_method","dot_package_name","dot_target","dots_symbol","double_colon_symbol","eq","fmt","from","from","from_robj","from_sexp","from_string","get","into","into_robj","lastvalue_symbol","levels_symbol","missing_arg","mode_symbol","na_rm_symbol","name_symbol","names_symbol","namespace_env_symbol","package_symbol","previous_symbol","quote_symbol","robj","row_names_symbol","seeds_symbol","serialize","sort_list_symbol","source_symbol","spec_symbol","to_owned","triple_colon_symbol","try_from","try_from","try_from","try_into","tsp_symbol","type_id","unbound_value"],"q":[[0,"extendr_api"],[138,"extendr_api::deserializer"],[307,"extendr_api::error"],[377,"extendr_api::functions"],[397,"extendr_api::graphics"],[641,"extendr_api::graphics::color"],[655,"extendr_api::graphics::color::predefined"],[802,"extendr_api::graphics::device_descriptor"],[905,"extendr_api::graphics::device_driver"],[947,"extendr_api::io"],[964,"extendr_api::io::load"],[979,"extendr_api::io::save"],[1005,"extendr_api::iter"],[1036,"extendr_api::metadata"],[1118,"extendr_api::na"],[1131,"extendr_api::optional"],[1133,"extendr_api::optional::ndarray"],[1135,"extendr_api::ownership"],[1177,"extendr_api::prelude"],[2631,"extendr_api::prelude::SliceInfoElem"],[2634,"extendr_api::prelude::iter"],[2994,"extendr_api::prelude::linalg"],[3000,"extendr_api::prelude::prelude"],[3089,"extendr_api::robj"],[3313,"extendr_api::robj::from_robj"],[3318,"extendr_api::robj::into_robj"],[3348,"extendr_api::robj::operators"],[3367,"extendr_api::robj::rinternals"],[3494,"extendr_api::robj::try_from_robj"],[3497,"extendr_api::scalar"],[3507,"extendr_api::scalar::macros"],[3515,"extendr_api::scalar::rbool"],[3588,"extendr_api::scalar::rcplx_full"],[3672,"extendr_api::scalar::rfloat"],[3770,"extendr_api::scalar::rint"],[3863,"extendr_api::serializer"],[3989,"extendr_api::thread_safety"],[3997,"extendr_api::wrapper"],[4075,"extendr_api::wrapper::altrep"],[4163,"extendr_api::wrapper::complexes"],[4195,"extendr_api::wrapper::dataframe"],[4218,"extendr_api::wrapper::doubles"],[4255,"extendr_api::wrapper::environment"],[4304,"extendr_api::wrapper::expr"],[4330,"extendr_api::wrapper::externalptr"],[4358,"extendr_api::wrapper::function"],[4385,"extendr_api::wrapper::integers"],[4422,"extendr_api::wrapper::lang"],[4448,"extendr_api::wrapper::list"],[4526,"extendr_api::wrapper::logicals"],[4561,"extendr_api::wrapper::macros"],[4562,"extendr_api::wrapper::matrix"],[4618,"extendr_api::wrapper::nullable"],[4640,"extendr_api::wrapper::pairlist"],[4690,"extendr_api::wrapper::primitive"],[4713,"extendr_api::wrapper::promise"],[4741,"extendr_api::wrapper::raw"],[4766,"extendr_api::wrapper::rstr"],[4832,"extendr_api::wrapper::s4"],[4859,"extendr_api::wrapper::strings"],[4893,"extendr_api::wrapper::symbol"]],"d":["","","","","","","","","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","","","","","","","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","","","","","FALSE value eg. <code>r!(FALSE)</code>","","","","","Enable the construction of dataframes from arrays of …","Derives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …","","","","","","","","NA value for integers eg. <code>r!(NA_INTEGER)</code>","NA value for logical. <code>r!(NA_LOGICAL)</code>","NA value for real values eg. <code>r!(NA_REAL)</code>","NA value for strings. <code>r!(NA_STRING)</code>","NULL value eg. <code>r!(NULL)</code>","","","","","","","Execute R code by parsing and evaluating tokens.","Enum use to unpack R objects into their specialist …","","","","Execute R code by parsing and evaluating tokens but …","","","Type of R objects used by Robj::rtype.","","","","","","","","","TRUE value eg. <code>r!(TRUE)</code>","The resulting type after dereferencing.","Simple and safe type conversions that may fail in a …","Derives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …","An attempted conversion that consumes <code>self</code>, which may or …","","","","","","","","","Call a function or primitive defined by a text expression …","","Create a dataframe.","Dereferences the value.","Mutably dereferences the value.","Convert R objects to a wide variety of types.","","","Error handling in Rust called from R.","","Define a module and export symbols to R Example:","Create a factor.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get a global variable.","Graphic Device Operations","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","A macro for constructing R langage objects.","Argument parsing and checking.","Create a List R object from a list of name-value pairs.","","Module metadata","","A set of optional features and third-party crate …","Maintain ownership of R objects.","Create a Pairlist R object from a list of name-value pairs.","Common exports for extendr-api.","Convert a rust expression to an R object.","Print via the R error stream.","Print with a newline via the R output stream.","rmacros - a set of macros to call actual R functions in a …","R object handling.","Print via the R output stream.","Print with a newline via the R output stream.","Convert extendr’s Rtype to R’s SEXPTYPE. Panics if the …","","See https://serde.rs/impl-serializer.html","","Convert R’s SEXPTYPE to extendr’s Rtype.","The sym! macro install symbols. You should cache your …","Macro for running tests.","","Provide limited protection for multithreaded access to the …","","Performs the conversion.","","","Performs the conversion.","","","","","Get a local variable from the calling function or a global …","Wrappers are lightweight proxies for references to R …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert any R object to a Deserialize object.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","The base environment; formerly R_NilValue","The namespace for base.","“” as a STRSXP","“” as a CHARSXP","The current interpreter environment.","An empty environment at the root of the environment tree","Parse a string into an R executable object and run it. …","Parse a string into an R executable object and run it using","Find a namespace by name.","Find a function or primitive that may be in a namespace.","The “global” environment","Get a global function from global_env() and ancestors.","Get a global variable from global_env() and ancestors. If …","Get a local variable from current_env() and ancestors.","NA_STRING as a CHARSXP","For registered namespaces.","Create a new environment","The nil object","Parse a string into an R executable object","Current srcref, for debuggers","","","","","","","","","——— New (in 1.4.0) device driver structure ——— …","","","","","","","","","","","","","","","","A structure containing graphical parameters","A row-major array of pixels. One pixel is 32-bit, whose …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Screen capture. Returns an integer matrix representing …","Character expansion (font size = fontsize*cex)","Get the metrics for a single unicode codepoint.","Draw a stroked/filled circle. gc.color() is the stroke …","Change the clip rectangle.","","","","","","","","","","","","","","","","","","","","","pen colour (lines, text, borders, …)","","Set the line or text color of a primitive.","","","Get the current device.","","","","Get the device number for this device.","","","","","","","","","","Set the fill color of a primitive.","fill colour (for polygons, circles, rects, …)","","","","","","","","","","","Set the font face.","","Font face (plain, italic, bold, …)","Font family","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert device coordinates into a specified unit. This is …","Convert device width/height coordinates into a specified …","Set the gamma of the device. <code>out_color = in_color ** gamma</code>","Gamma correction","Get a device by number.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Line end","Draw a stroked line. gc.color() is the stroke color.","Set the line end type.","Set the line height for text.","Set the line join type.","Set the line miter limit - the point where the line …","Set the type of the line.","Set the width of the line in chosen units.","Line height (multiply by font size)","line join","line mitre","Line type (solid, dashed, dotted, …)","Line width (roughly number of pixels)","Draw a mathematical expression.","Get the height of a mathematical expression.","Get the metrics for a mathematical expression.","Get the width of a mathematical expression.","Disable device rendering and flush.","Enable device rendering.","Start a new page. The page color can be set in advance.","","Draw a path with multiple segments. gc.color() is the …","Reference to a pattern fill","","","Draw a stroked/filled polygon. gc.color() is the stroke …","Draw a stroked/filled polyline. gc.color() is the stroke …","Font size in points","Draw a bitmap.","Draw a stroked/filled axis-aligned rectangle. gc.color() …","","Draw a special symbol centered on pos. See …","","Draw a text string starting at pos. TODO: do we need to …","Get the height of a unicode string.","Get the metrics for a unicode string.","Get the width of a unicode string.","","Convert a specified unit coordinates into device …","Convert a specified unit width/height coordinates into …","","","","","","","","","","","","","","","Set the transform as a 3x2 matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Generate a color from a CSS-like hex number. eg. …","Generate a color from a 3 digit CSS-like hex number. eg. …","Calls <code>U::from(self)</code>.","","Generate a color from rgb components (0-255).","Generate a color from rgba components (0-255).","Convert to an R color.","","","","https://www.w3.org/TR/2018/REC-css-color-3-20180619/","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A builder of libR_sys::DevDesc.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the font size (unit: point). <strong>Note that most of the </strong>…","","","Sets the device sizes (unit: point).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets inches per raster unit (i.e. point). <strong>Note that most </strong>…","","","","","Sets the initial value of colour.","","Sets the initial value of fill.","","Sets the initial value of font face.","","Sets the initial value of line type.","","Sets the initial value of pointsize.","","","","","","","","","","","","","","","","","","","","","","","","Set this to <code>false</code> if the implemented <code>strWidth()</code> and <code>text()</code> …","To what extent the device takes the responsibility of …","The underlying C structure <code>DevDesc</code> has two fields related …","","","A graphic device implementation.","","Whether the device accepts a capturing operation. By …","Whether the device has a locator capability, i.e., reading …","Whether the device maintains a plot history. This …","Whether the device accepts the drawing operation of a …","A callback function to setup the device when the device is …","","","A callback function that captures and returns the current …","A callback function that returns the TextMetric (ascent, …","A callback function to draw a circle.","A callback function to clip.","A callback function to free device-specific resources when …","Create a Device.","A callback function to clean up when the device is …","A callback function for X11_eventHelper.","Returns the argument unchanged.","A callback function to manage the “suspension level” …","Calls <code>U::from(self)</code>.","A callback function to draw a line.","A callback function that returns the coords of the event","A callback function called whenever the graphics engine …","A callback function to confirm a new frame. It seems this …","A callback function called whenever a new plot requires a …","A callback function called when the user aborts some …","A callback function to draw paths.","A callback function to draw a polygon.","A callback function to draw a polyline.","A callback function to draw a Raster.","A callback function to draw a rect.","A callback function that returns the current device size …","A callback function to draw a text.","A callback function that returns the width of the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Wrapper for R output streams.","","","","","","","","","Returns the argument unchanged.","Save an object in the R data format to a <code>Write</code> trait. …","Save an object in the R data format to a <code>Write</code> trait. …","","Calls <code>U::from(self)</code>.","Save an object in the R data format. <code>version</code> should …","Save an object in the R data format. <code>version</code> should …","","","","","","The hook will convert some objects into strings.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Save an object in the R data format. <code>version</code> should …","Save an object in the R data format. <code>version</code> should …","Save an object in the R data format to a <code>Write</code> trait. …","Save an object in the R data format to a <code>Write</code> trait. …","","","","","","","","","Iterator over name-value pairs in lists.","Iterator over strings or string factors.","Get an iterator over a string vector. Returns None if the …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Make an empty str iterator.","","","","","","","","","","Metadata function argument.","Metadata function.","Metadata Impl.","Module metadata.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Wraps invalid R identifiers, like <code>_function_name</code>, into …","","","","","","","","","","","","","","","","","","","Generate a wrapper for a non-method function.","Generate a wrapper for an implementation block.","Generate a wrapper for a method.","Return true if this primitive is <code>NA</code>.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Enables support for the <code>either</code> crate, to allow accepting …","Defines conversions between R objects and the <code>ndarray</code> …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An array where the data has shared ownership and is copy …","one-dimensional shared ownership array","two-dimensional shared ownership array","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","","A producer element that can be assigned to once","","An axis index.","Description of the axis, its length and its stride.","“C” is an alias for row major ordering","","Column major or “F” order","","Continue folding with this value","","An array with copy-on-write behavior.","CowArray’s representation.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","","Dimension description.","Create a new dimension value.","","","Dimension type of the producer","Dimension type","","Adds the two dimensions at compile time.","","Array shape and index trait.","Fold is complete and will return this value","","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","The array element type.","","","","","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Error code for an error related to array shape or layout.","","","","“F” (for Fortran) is an alias for column major ordering","","Fixed-size array used for array initialization","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","","","","","incompatible memory layout","incompatible shape","Used for indexing operations (<code>container[index]</code>) in …","A single index.","Extra indexing methods for array views","","","Enable the construction of dataframes from arrays of …","Argument conversion a dimension.","Argument conversion into a producer.","","The element produced per iteration.","The element produced per iteration.","Array index type","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Dynamic dimension or index type.","Array index type (signed)","","Next larger dimension","A value of type <code>L</code>.","","Elements that support linear algebra operations.","","","","A transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …","","Corresponding owned data with MaybeUninit elements","Slicing information describing multiple mutable, disjoint …","","","","","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","","Floating-point element types <code>f32</code> and <code>f64</code>.","Tuple or fixed size arrays that can be used to index an …","A producer of an n-dimensional set of elements; for …","Token to represent a new axis in a slice description.","A new axis of length 1.","","","Array order","Dimensionality of the output array.","out of bounds indexing","The resulting array storage of the same kind but …","The type of the slices created by <code>.multi_slice_move()</code>.","","The resulting dimension type after broadcasting.","The sum of the two dimensions.","The returned type after indexing.","The type of the reference to the element that is produced, …","overflow when computing offset, length, etc.","Owned data.","ArcArray’s representation.","Array’s representation.","","Pattern matching friendly form of the dimension value.","","","Execute R code by parsing and evaluating tokens.","","","","","the shape does not fit inside type limits","","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array pointer’s representation.","Array shape with a next smaller dimension.","","A value of type <code>R</code>.","","","","Row major or “C” order","Execute R code by parsing and evaluating tokens but …","","","","Elements that can be used as direct operands in arithmetic …","A contiguous array shape of n dimensions.","Array shape argument with optional order parameter","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","An error related to array shape or layout.","A slice (range with step size).","A range with step size. <code>end</code> is an exclusive index. …","A type that can slice an array of dimension <code>D</code>.","Represents all of the necessary information to perform a …","A slice (range with step), an index, or a new axis token.","","Next smaller dimension (if applicable)","","An array shape of n dimensions in c-order, f-order or …","","","","","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","","aliasing array elements","Borrowed data.","Array view’s representation.","Lock step function application across several arrays or …","Iterates over pairs of consecutive elements along the axis.","","","","","","","","","","","","","","","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","","","Append an array to the array along an axis.","","","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-write array view.","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","Return a mutable pointer to the first element in the array.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","Return a pointer to the first element in the array.","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice, if it is contiguous …","Return a standard-layout array containing the data, …","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Assign the value <code>input</code> to the element that self represents.","","Perform an elementwise assigment of values cloned from <code>self</code>…","<strong>Promise</strong> that the array’s elements are all fully …","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Return an iterator over the length and stride of each axis.","Return axis","Axis identifier (index)","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Returns a producer which traverses over all windows of a …","Array zip macro: lock step function application across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Act like a larger size and/or shape array by <em>broadcasting</em> …","Create an array with uninitialized elements, shape <code>shape</code>.","Call a function or primitive defined by a text expression …","","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","","","Return a shared view of the array with elements as if they …","","","","","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects <code>index</code> along the axis, collapsing the axis into …","","Return an array view of column <code>index</code>.","Return Order::ColumnMajor if the input is true, …","Return a mutable array view of column <code>index</code>.","Return a producer and iterable that traverses over the …","Return a producer and iterable that traverses over the …","Concatenate arrays along the given axis.","Concatenate arrays along the given axis.","","","","","Create a dataframe.","Unsafely translate the data representation from one element","","","","","","","","","Create an array with default values, shape <code>shape</code>","","","","","","","","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a mutable view of the array.","","","","","","Return a view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of the …","Return the shape of the array in its “pattern” form, …","","","","","","","","","","","","","","","","","Compute the dot product of one-dimensional arrays.","Perform dot product or matrix multiplication of arrays <code>self</code>…","Perform the matrix multiplication of the row vector <code>self</code> …","","Perform matrix multiplication of rectangular arrays <code>self</code> …","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","","","","end index; negative are counted from the back of the axis; …","","","","","","","","","","","","","","","","","","","","","","","","","","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Returns the left value","Returns the right value","","","Define a module and export symbols to R Example:","Create an identity matrix of size <code>n</code> (square 2D array).","","","","","Create a factor.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","","","","","","Returns a reference to the first element of the array, or …","Returns a mutable reference to the first element of the …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traverse the array elements and apply a fold, returning …","Apply a fold function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays, …","Fold along an axis.","Apply a fold function to the input arrays while the return …","Apply a fold function to the input arrays while the return …","Apply a fold function to the input arrays while the return …","Apply a fold function to the input arrays while the return …","Apply a fold function to the input arrays while the return …","Apply a fold function to the input arrays while the return …","Evaluate the provided expression for both <code>Either::Left</code> and …","","Call <code>f</code> for each element in the array.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Returns the argument unchanged.","","Create a one-dimensional read-write array view of the data …","Create a one-dimensional read-only array view of the data …","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Create a read-write array view of the array.","Returns the argument unchanged.","Create a read-only clone-on-write view of the array.","Create a one-dimensional clone-on-write view of the data …","Converts the <code>Vec</code> of arrays to an owned 3-D array.","","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional array from a boxed slice (no …","Create a read-only array view of the array.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a 2D matrix from its diagonal","Create a square 2D matrix of the specified size, with the …","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create a one-dimensional array from an iterable.","Create a one-dimensional array from an iterator or …","Create a new <code>ShapeError</code>","Convert an R object to a <code>ndarray</code> ArrayView1.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Create a read-write array view borrowing its data from a …","Create a read-only array view borrowing its data from a …","Create an array with values created by the function <code>f</code>.","Create an <code>RawArrayViewMut&lt;A, D&gt;</code> from shape information and …","Create an <code>ArrayView&lt;A, D&gt;</code> from shape information and a raw …","Create an <code>RawArrayView&lt;A, D&gt;</code> from shape information and a …","Create an <code>ArrayViewMut&lt;A, D&gt;</code> from shape information and a …","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create a one-dimensional array from a vector (no copying …","","Return a producer and iterable that traverses over the …","Return a producer and iterable that traverses over the …","","","Create a one-dimensional array with <code>n</code> geometrically spaced …","Get a reference of a element through the view.","Return a reference to the element at <code>index</code>, or return <code>None</code> …","","Convert a mutable array view to a mutable reference of a …","Return a mutable reference to the element at <code>index</code>, or …","Return a raw pointer to the element at <code>index</code>, or return …","Return a raw pointer to the element at <code>index</code>, or return …","","","","","Get a global variable.","","","","","","","","","","","","","","Returns the number of axes in the input array.","","","","","","","","Returns the number of dimensions of the input array for …","","Performs the indexing (<code>container[index]</code>) operation.","Get a reference of a element through the view.","Get a reference of a element through the view.","Convert a mutable array view to a mutable reference of a …","","Return the index of the axis.","","","","","","","","","","","Returns a view restricted to <code>index</code> along the axis, with …","Collapses the array to <code>index</code> along the axis and removes …","Collapses the array to <code>index</code> along the axis and removes …","Returns a mutable view restricted to <code>index</code> along the axis, …","","","","","","","","","","","","","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>.","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Create an iterable of the array shape <code>shape</code>.","","Return an iterable of the indices of the passed-in array.","Insert new array axis at <code>axis</code> and return the result.","Insert new array axis of length 1 at <code>axis</code>, modifying the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a shared view of the array with elements as if they …","Return the diagonal as a one-dimensional array.","","","","Convert an array or array view to another with the same …","Convert the dimensional into a dynamic dimensional (IxDyn).","Convert any array or array view to a dynamic dimensional …","","","Extract the value of an either over two equivalent types.","Return the inner value","Return the inner value","Convert the inner value to an iterator.","","","","","","","","","","Turn the array into a uniquely owned array, cloning the …","Convert the dimension into a pattern matching friendly …","","","","","","","","","Convert the value into an <code>NdProducer</code>.","","","","Return a vector of the elements in the array, in the way …","","Returns the single element in the array without cloning it.","Consume the mutable view and return a mutable reference to …","Consume the view and return a reference to the single …","","Transform the array into <code>shape</code>; any shape with the same …","","","","","","","Turn the array into a shared ownership (copy on write) …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous. …","Reverse the stride of <code>axis</code>.","Return true if input is Order::ColumnMajor, false otherwise","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return whether the array has any elements","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Return true if the value is the <code>Left</code> variant.","Returns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Return true if the value is the <code>Right</code> variant.","Return true if input is Order::RowMajor, false otherwise","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Return true if the array is square, false otherwise.","Return <code>true</code> if the array data is laid out in contiguous …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the data is the <code>View</code> variant.","","","","","","","","Producers, iterables and iterators.","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return the <code>ErrorKind</code> of this error.","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","","","A macro for constructing R langage objects.","","Returns a reference to the last element of the array, or …","Returns a mutable reference to the last element of the …","","","","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","","Return the total number of elements in the array.","Return length","","Length in count of elements of the current axis","Return the length of <code>axis</code>.","","","","Linear algebra.","Create a one-dimensional array with <code>n</code> evenly spaced …","","Create a List R object from a list of name-value pairs.","","Create a one-dimensional array with <code>n</code> logarithmically …","","","Map <code>f</code> over the contained value and return the result in the","Call <code>f</code> by reference on each element and create a new array …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Modify the array in place by calling <code>f</code> by mutable …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Call <code>f</code> on a mutable reference of each element and create a …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with the …","Consume the array, call <code>f</code> by <strong>v</strong>alue on each element, and …","Return the axis with the greatest stride (by absolute …","Create an array with uninitialized elements, shape <code>shape</code>.","Returns the arithmetic mean x̅ of all elements in the …","Return mean along <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","","","Move all elements from self into <code>new_array</code>, which must be …","Move all elements from self into <code>new_array</code>, which must be …","","","","","","","","","","","","","","Split the view into multiple disjoint slices.","Split the view into multiple disjoint slices.","Return multiple disjoint, sliced, mutable views of the …","","","","","","","Return the number of columns (length of <code>Axis(1)</code>) in the …","Returns the number of dimensions (number of axes).","Return the number of dimensions (axes) in the array","","","","","","","","","Perform an elementwise negation of reference <code>self</code> and …","Perform an elementwise negation of <code>self</code> and return the …","Create a new cell with the given value","Create a new <code>Slice</code> with the given extents.","Returns a new <code>SliceInfo</code> instance.","","","","","Perform an elementwise unary not of <code>self</code> and return the …","Perform an elementwise unary not of reference <code>self</code> and …","Return the number of rows (length of <code>Axis(0)</code>) in the …","","Create an array with ones, shape <code>shape</code>.","","Returns the number of axes in the output array.","","","","","","","","","Returns the number of dimensions after calling <code>.slice()</code> …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","","Create a Pairlist R object from a list of name-value pairs.","","","","","","","Permute the axes.","","","ndarray prelude.","","","","Return the product of all elements in the array.","","","","","","Append an array to the array along an axis.","Append a column to an array","Append a row to an array","","Convert a rust expression to an R object.","Create a one-dimensional array with elements from <code>start</code> to …","Return the shape of the producer.","Return the shape of the array as it’s stored in the …","","","","","Return a reference to the dimension","Return a reference to the dimension","Return a raw view of the array.","Return a raw mutable view of the array.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","","","","","","","Convert the view into an <code>ArrayView&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> is a …","Convert the view into an <code>ArrayViewMut&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> …","","","","","","","","","","Remove array axis <code>axis</code> and return the result.","","","","","","","","Remove the <code>index</code>th elements along <code>axis</code> and shift down …","","Print via the R error stream.","Print with a newline via the R output stream.","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for </em>…","Transpose the array by reversing axes.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Return an array view of row <code>index</code>.","Return Order::RowMajor if the input is true, …","Return a mutable array view of row <code>index</code>.","","Return a producer and iterable that traverses over the …","Return a producer and iterable that traverses over the …","Print via the R output stream.","Print with a newline via the R output stream.","Slice argument constructor.","Return the sum of all elements in the array.","Perform the operation <code>self += alpha * rhs</code> efficiently, …","","","Along <code>axis</code>, select arbitrary subviews corresponding to …","","","","","Return the shape of the array as a slice.","","","","","","","","","","","","","","","","","","Compute the size of the dimension (number of elements)","Return the size of the shape in number of elements","Return the size of the shape in number of elements","Return a the number of element tuples in the Zip","","","","Compute the size while checking for overflow.","","","","Return a sliced view of the array.","Return a view of the array, sliced along the specified …","Slice the array in place along the specified axis.","Return a mutable view of the array, sliced along the …","Slice the array in place without changing the number of …","Return a view of a slice of the array, with a closure …","Slice the array in place, with a closure specifying the …","Return a mutable view of a slice of the array, with a …","Slice the array, possibly changing the number of …","Return a sliced read-write view of the array.","","","","","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one view …","Splits the view into views of the real and imaginary …","Splits the view into views of the real and imaginary …","Splits the view into views of the real and imaginary …","Splits the view into views of the real and imaginary …","","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","start index; negative are counted from the back of the axis","Return standard deviation of elements in the array.","Return standard deviation along <code>axis</code>.","step size in elements; the default is 1, for every element.","Create a new <code>Slice</code> with the given step size (multiplied …","Return stride","Stride in count of elements of the current axis","Return the stride of <code>axis</code>.","","Return the strides of the array as a slice.","","","","","","","","","","","","","","","","","","","","Return the sum of all elements in the array.","Return sum along <code>axis</code>.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap value with another cell","Swap axes <code>ax</code> and <code>bx</code>.","The sym! macro install symbols. You should cache your …","Return a transposed view of the array.","Macro for running tests.","","","","Return an uniquely owned copy of the array.","","","","","","","","","","","","","","","","","","","","","","Transform the array into <code>new_shape</code>; any shape with the …","Return a shared ownership (copy on write) array, cloning …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous. …","","","","","Return an vector with the elements of the one-dimensional …","Return the transpose: row major becomes column major and …","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first type that matches the provided <code>Robj</code>, …","","Returns the first type that matches the provided <code>Robj</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","Converts the array into <code>Array&lt;A, D&gt;</code> if this is possible …","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference of a element through the view without …","Get a reference of a element through the view without …","Perform <em>unchecked</em> array indexing.","Convert a mutable array view to a mutable reference of a …","Perform <em>unchecked</em> array indexing.","","Create an array with uninitialized elements, shape <code>shape</code>.","Create an array with uninitialized elements, shape <code>shape</code>.","Returns the left value","Returns the right value","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Return variance of elements in the array.","Get a local variable from the calling function or a global …","Return variance along <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Visit each element in the array by calling <code>f</code> by reference …","Return a window producer and iterable.","","","","","","","","","","","Creates a dimension of all zeros with the specified ndim.","Create an array with zeros, shape <code>shape</code>.","","","Create a new dimension value with <code>n</code> axes, all zeros","","","","","","","Traverse two arrays in unspecified order, in lock step, …","end index; negative are counted from the back of the axis; …","start index; negative are counted from the back of the axis","step size in elements; the default is 1, for every element.","An iterator over the length and stride of each axis of an …","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix Multiplication","The result of the operation.","","General matrix-matrix multiplication.","General matrix-vector multiplication.","Kronecker product of 2D matrices.","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","An axis index.","An array with copy-on-write behavior.","Dimension description.","Create a new dimension value.","","Array shape and index trait.","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Next larger dimension","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Floating-point element types <code>f32</code> and <code>f64</code>.","Token to represent a new axis in a slice description.","Pattern matching friendly form of the dimension value.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","Next smaller dimension (if applicable)","","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-write array view.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Array zip macro: lock step function application across …","","","","","Convert the dimensional into a dynamic dimensional (IxDyn).","Convert the dimension into a pattern matching friendly …","","Returns the number of dimensions (number of axes).","","Slice argument constructor.","","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","","","Creates a dimension of all zeros with the specified ndim.","Generic access to typed slices in an Robj.","These are helper functions which give access to common …","","Trait used for incomming parameter conversion.","","","","The following impls add operators to Robj.","The following impls add operators to Robj.","The following impls wrap specific Rinternals.h functions.","Wrapper for an R S-expression pointer (SEXP).","Extensions to iterators for R objects including …","","<code>ToVectorValue</code> is a trait that allows many different types …","","Add two R objects, consuming the left hand side. panics on …","","Get a scalar rust boolean.","Get a scalar integer.","Get a read-only reference to the content of an integer …","Get a read-write reference to the content of an integer or …","Get a <code>Vec&lt;i32&gt;</code> copied from the object.","Convert an <code>Robj</code> into <code>Integers</code>.","Get a scalar boolean as a tri-boolean Rbool value.","Get an iterator over logical elements of this slice.","Get a read-only reference to the content of a logical …","Get a <code>Vec&lt;Rbool&gt;</code> copied from the object using the …","Get a read-only reference to the content of an integer or …","Get a read-write reference to the content of a raw vector.","Get a scalar real.","Get an iterator over real elements of this slice.","Get a read-only reference to the content of a double …","Get a read-write reference to the content of a double …","Get a <code>Vec&lt;f64&gt;</code> copied from the object.","Get a reference to a Robj for this type.","","Get a mutable reference to a Robj for this type.","","Get a read-only reference to a scalar string type.","Get a vector of string references. String references …","Get a vector of owned strings. Owned strings have long …","","","","","","","","","","","","","","","","","","","","","","","","","Get an immutable slice to this object’s data.","Get a mutable slice to this object’s data.","","","Get the class attribute as a string iterator if one exists.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the dim attribute as an integer iterator if one exists.","Get the dimnames attribute as a list iterator if one …","Divide two R objects, consuming the left hand side. panics …","","","","","","Evaluate the expression in R and return an error or an R …","Evaluate the expression and return NULL or an R object.","Evaluate the expression in R and return an error or an R …","","Convert a rust object to NULL or another type.","Convert a vector of Rstr into strings.","","","","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","Make an robj from a wrapper.","","Convert a vector of Robj into a list.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","","Make an robj from a wrapper.","Convert a vector of Rfloat into doubles.","Make an robj from a wrapper.","","Make an robj from a wrapper.","","Make an robj from a wrapper.","Make an robj from a wrapper.","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Convert a column, matrix or matrix3d to an Robj.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","Returns the argument unchanged.","Make an robj from a wrapper.","Make an robj from a wrapper.","","Make an robj from a wrapper.","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","You can return a PairlistIter from a function.","Convert a vector of Rint into integers.","Make an robj from a wrapper.","","Make an robj from a wrapper.","You can return a ListIter from a function.","Make an robj from a wrapper.","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","Make an robj from a wrapper.","","","","A ref of an robj can be constructed from a ref to a SEXP …","Get a copy of the underlying SEXP.","","Get a specific attribute as a borrowed robj if it exists.","Return true if an attribute exists.","Return true if this object has names.","Return true if this class inherits this class.","","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if the <code>Robj</code> contains no elements.","Is this object is an <code>NA</code> scalar? Works for character, …","Get the extended length of the object.","Get the levels attribute as a string iterator if one …","","Multiply two R objects, consuming the left hand side. …","Get the names attribute as a string iterator if one exists.","","","","Get the type of an R object.","","Set a specific attribute and return the object.","Set the class attribute from a string iterator, returning …","Set the names attribute from a string iterator.","","Subtract two R objects, consuming the left hand side. …","","","","Converts an ndarray Array into an equivalent R array. The …","Converts a reference to an ndarray Array into an …","Conversions to Robj","","","","","","Trait used for incomming parameter conversion.","","","","","","Extensions to iterators for R objects including …","<code>ToVectorValue</code> is a trait that allows many different types …","Collects an iterable into an <code>RArray</code>. The iterable must …","Collects an iterable into an <code>RArray</code>. The iterable must …","Convert a wide range of iterators to Robj.","Convert a wide range of iterators to Robj.","","","","","","","","","","","","","","","","","","","","","","","","The following impls add operators to Robj.","Do the equivalent of x(a, b, c)","Do the equivalent of x(a, b, c)","Do the equivalent of x(a, b, c)","Do the equivalent of x$y","Do the equivalent of x$y","Do the equivalent of x$y","Do the equivalent of x :: y","Do the equivalent of x :: y","Do the equivalent of x :: y","Do the equivalent of <code>x[[y]]</code>","Do the equivalent of <code>x[[y]]</code>","Do the equivalent of <code>x[[y]]</code>","Do the equivalent of <code>x[y]</code>","Do the equivalent of <code>x[y]</code>","Do the equivalent of <code>x[y]</code>","Do the equivalent of x ~ y","Do the equivalent of x ~ y","Do the equivalent of x ~ y","The following impls wrap specific Rinternals.h functions.","Allocate a matrix object.","Allocate a matrix object.","Allocated an owned object of a certain type.","Allocated an owned object of a certain type.","Convert a factor to a string vector.","Convert a factor to a string vector.","Convert to a string vector.","Convert to a string vector.","Convert to vectors of many kinds.","Convert to vectors of many kinds.","Return true if two arrays have identical dims.","Return true if two arrays have identical dims.","Generate a text representation of this object.","Generate a text representation of this object.","Do a deep copy of this object. Note that clone() only adds …","Do a deep copy of this object. Note that clone() only adds …","If this object is a promise, evaluate it, otherwise return …","If this object is a promise, evaluate it, otherwise return …","Find a function in an environment ignoring other variables.","Find a function in an environment ignoring other variables.","Find a variable in an environment.","Find a variable in an environment.","Get the source ref.","Get the source ref.","Get the source filename.","Get the source filename.","Returns <code>true</code> if this is an integer ALTREP object.","Returns <code>true</code> if this is an integer ALTREP object.","Returns <code>true</code> if this is an logical ALTREP object.","Returns <code>true</code> if this is an logical ALTREP object.","Returns <code>true</code> if this is a raw ALTREP object.","Returns <code>true</code> if this is a raw ALTREP object.","Returns <code>true</code> if this is an real ALTREP object.","Returns <code>true</code> if this is an real ALTREP object.","Returns <code>true</code> if this is an ALTREP object.","Returns <code>true</code> if this is an ALTREP object.","Returns <code>true</code> if this is an integer ALTREP object.","Returns <code>true</code> if this is an integer ALTREP object.","Return true if this is an array.","Return true if this is an array.","Return true if this is CHARSXP.","Return true if this is CHARSXP.","Return true if this is a complex vector.","Return true if this is a complex vector.","Return true if this is an environment.","Return true if this is an environment.","Return true if this is an expression.","Return true if this is an expression.","Return true if this is an expression.","Return true if this is an expression.","Return true if this is factor.","Return true if this is factor.","Return true if this is a data frame.","Return true if this is a data frame.","Return true if this is a function or a primitive (CLOSXP, …","Return true if this is a function or a primitive (CLOSXP, …","Return true if this is an integer vector (INTSXP) but not …","Return true if this is an integer vector (INTSXP) but not …","Return true if this is a language object (LANGSXP).","Return true if this is a language object (LANGSXP).","Return true if this is NILSXP or VECSXP.","Return true if this is NILSXP or VECSXP.","Return true if this is a boolean (logical) vector","Return true if this is a boolean (logical) vector","Return true if this is a matrix.","Return true if this is a matrix.","","","","","Return true if this is the null object.","Return true if this is the null object.","Return true if this is INTSXP, LGLSXP or REALSXP but not a …","Return true if this is INTSXP, LGLSXP or REALSXP but not a …","Return true if this is an object (ie. has a class …","Return true if this is an object (ie. has a class …","","","Return true if this is NILSXP or LISTSXP.","Return true if this is NILSXP or LISTSXP.","Return true if this is a primitive function BUILTINSXP, …","Return true if this is a primitive function BUILTINSXP, …","Return true if this is an environment.","Return true if this is an environment.","Return true if this is RAWSXP.","Return true if this is RAWSXP.","Return true if this is a real (f64) vector.","Return true if this is a real (f64) vector.","Return true if this is a S4 object.","Return true if this is a S4 object.","Return true if this is a string.","Return true if this is a string.","Return true if this is a symbol.","Return true if this is a symbol.","Return true if this is a time series vector (see tsp).","Return true if this is a time series vector (see tsp).","","","Return true if this is a user defined binop.","Return true if this is a user defined binop.","Return true if this is a valid string.","Return true if this is a valid string.","Return true if this is a valid string.","Return true if this is a valid string.","Return true if this is a vector.","Return true if this is a vector.","Return true if this is an atomic vector.","Return true if this is an atomic vector.","Return true if this is a vector list.","Return true if this is a vector list.","Return true if this is can be made into a vector.","Return true if this is can be made into a vector.","","","Number of columns of a matrix","Number of columns of a matrix","Number of rows of a matrix","Number of rows of a matrix","","","Convert a pairlist (LISTSXP) to a vector list (VECSXP).","Convert a pairlist (LISTSXP) to a vector list (VECSXP).","Convert a vector list (VECSXP) to a pair list (LISTSXP)","Convert a vector list (VECSXP) to a pair list (LISTSXP)","Copy a vector and resize it. See. …","Copy a vector and resize it. See. …","","","","<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …","Rcplx is a wrapper for f64 in the context of an R’s …","<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …","<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …","","","","","","","Generates an implementation of a binary operator Trait for …","Generates an implementation of a binary operate-assign …","Generates an implementation of type conversion Traits from …","Generates an implementation of type conversion Traits from …","Generates an implementation of the instance <code>inner()</code> method …","Generates an implementation of <code>std::iter::Sum</code> for a scalar …","Generates an implementation of a number of Traits for the …","Generates an implementation of a unary operator Trait for …","<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NA always fails.","","NA always fails.","Return a <code>false</code> <code>Rbool</code>.","","","Returns the argument unchanged.","","","","","","Convert this construct a <code>Rbool</code> from a rust boolean.","Get underlying value.","Calls <code>U::from(self)</code>.","","Return <code>true</code> if this triboolean is <code>false</code> but not <code>NA</code>.","Return true is the is a NA value.","Return <code>true</code> if this triboolean is <code>true</code> but not <code>NA</code>.","Construct a NA.","Return a <code>NA</code> <code>Rbool</code>.","","","","","Convert this <code>Rbool</code> to a bool. Note <code>NA</code> will be true.","","","","Return a <code>true</code> <code>Rbool</code>.","","Convert an <code>LGLSXP</code> object into a <code>Rbool</code> (tri-state boolean). …","","","","Rcplx is a wrapper for f64 in the context of an R’s …","Add two Rcplx values or an option of c64.","Add two Rcplx values or an option of c64.","Add two Rcplx values or an option of c64.","Add two Rcplx values or an option of c64.","Add two Rcplx values or an option of c64, modifying the …","Add two Rcplx values or an option of c64, modifying the …","Add two Rcplx values or an option of c64, modifying the …","Add two Rcplx values or an option of c64, modifying the …","","","","","","","Divide two Rcplx values or an option of c64.","Divide two Rcplx values or an option of c64.","Divide two Rcplx values or an option of c64.","Divide two Rcplx values or an option of c64.","Divide two Rcplx values or an option of c64, modifying the …","Divide two Rcplx values or an option of c64, modifying the …","Divide two Rcplx values or an option of c64, modifying the …","Divide two Rcplx values or an option of c64, modifying the …","NA always fails.","","NA always fails.","","","","","","Returns the argument unchanged.","","","","","","","","Get underlying value.","Calls <code>U::from(self)</code>.","","","","Return true is the is a NA value.","","Multiply two Rcplx values or an option of c64.","Multiply two Rcplx values or an option of c64.","Multiply two Rcplx values or an option of c64.","Multiply two Rcplx values or an option of c64.","Multiply two Rcplx values or an option of c64, modifying …","Multiply two Rcplx values or an option of c64, modifying …","Multiply two Rcplx values or an option of c64, modifying …","Multiply two Rcplx values or an option of c64, modifying …","","Construct a NA.","Negate a Rcplx value.","Negate a Rcplx value.","","","","","","","Subtract two Rcplx values or an option of c64.","Subtract two Rcplx values or an option of c64.","Subtract two Rcplx values or an option of c64.","Subtract two Rcplx values or an option of c64.","Subtract two Rcplx values or an option of c64, modifying …","Subtract two Rcplx values or an option of c64, modifying …","Subtract two Rcplx values or an option of c64, modifying …","Subtract two Rcplx values or an option of c64, modifying …","Yields NA on overflow if NAs present.","Yields NA on overflow if NAs present.","","","","","","","","","","","<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …","","Add two Rfloat values or an option of f64.","Add two Rfloat values or an option of f64.","Add two Rfloat values or an option of f64.","Add two Rfloat values or an option of f64, modifying the …","Add two Rfloat values or an option of f64, modifying the …","Add two Rfloat values or an option of f64, modifying the …","Add two Rfloat values or an option of f64, modifying the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide two Rfloat values or an option of f64.","Divide two Rfloat values or an option of f64.","Divide two Rfloat values or an option of f64.","Divide two Rfloat values or an option of f64, modifying …","Divide two Rfloat values or an option of f64, modifying …","Divide two Rfloat values or an option of f64, modifying …","Divide two Rfloat values or an option of f64, modifying …","NA always fails.","","NA always fails.","Debug format.","","","","Returns the argument unchanged.","","Get underlying value.","Calls <code>U::from(self)</code>.","","","Return true is the is a NA value.","","","","","Multiply two Rfloat values or an option of f64.","Multiply two Rfloat values or an option of f64.","Multiply two Rfloat values or an option of f64.","Multiply two Rfloat values or an option of f64, modifying …","Multiply two Rfloat values or an option of f64, modifying …","Multiply two Rfloat values or an option of f64, modifying …","Multiply two Rfloat values or an option of f64, modifying …","Construct a NA.","Negate a Rfloat value.","Negate a Rfloat value.","","","Subtract two Rfloat values or an option of f64.","Subtract two Rfloat values or an option of f64.","Subtract two Rfloat values or an option of f64.","Subtract two Rfloat values or an option of f64, modifying …","Subtract two Rfloat values or an option of f64, modifying …","Subtract two Rfloat values or an option of f64, modifying …","Subtract two Rfloat values or an option of f64, modifying …","Yields NA on overflow if NAs present.","Yields NA on overflow if NAs present.","","","","","","","<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …","Add two Rint values or an option of i32, overflows to NA.","Add two Rint values or an option of i32, overflows to NA.","Add two Rint values or an option of i32, overflows to NA.","Add two Rint values or an option of i32, modifying the …","Add two Rint values or an option of i32, modifying the …","Add two Rint values or an option of i32, modifying the …","Add two Rint values or an option of i32, modifying the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide two Rint values or an option of i32, overflows to …","Divide two Rint values or an option of i32, overflows to …","Divide two Rint values or an option of i32, overflows to …","Divide two Rint values or an option of i32, modifying the …","Divide two Rint values or an option of i32, modifying the …","Divide two Rint values or an option of i32, modifying the …","Divide two Rint values or an option of i32, modifying the …","","NA always fails.","NA always fails.","Debug format.","","","Returns the argument unchanged.","","","Get underlying value.","Calls <code>U::from(self)</code>.","","Return true is the is a NA value.","Multiply two Rint values or an option of i32, overflows to …","Multiply two Rint values or an option of i32, overflows to …","Multiply two Rint values or an option of i32, overflows to …","Multiply two Rint values or an option of i32, modifying …","Multiply two Rint values or an option of i32, modifying …","Multiply two Rint values or an option of i32, modifying …","Multiply two Rint values or an option of i32, modifying …","Construct a NA.","Negate a Rint value, overflows to NA.","Negate a Rint value, overflows to NA.","Logical not a Rint value, overflows to NA.","Logical not a Rint value, overflows to NA.","","Subtract two Rint values or an option of i32, overflows to …","Subtract two Rint values or an option of i32, overflows to …","Subtract two Rint values or an option of i32, overflows to …","Subtract two Rint values or an option of i32, modifying …","Subtract two Rint values or an option of i32, modifying …","Subtract two Rint values or an option of i32, modifying …","Subtract two Rint values or an option of i32, modifying …","Yields NA on overflow if NAs present.","Yields NA on overflow if NAs present.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Map a bool to a Robj.","Raw objects.","Map a char to a Robj string.","","","Map a f32 to a Robj.","Map a f64 to a Robj.","","","","","Map a i16 to a Robj.","Map a i32 to a Robj.","Map a i64 to a Robj.","Map a i8 to a Robj.","","Start of a map. We require that keys must be strings.","Wrapper struct: Wrap(T)","Wrapper struct in enum: Enum::Wrap(T)","None of an option is NULL.","Start of a vector or other sequence.","Some of an option is that value.","Map a string slice to a Robj string.","Start of a struct. Collect just the values in a list.","eg. <code>Enum::Point { x: i32, y: i32 }</code>","Start of a tuple.","Start of a tuple struct eg. <code>Point(i32, i32)</code>.","Start of a struct variant eg. <code>Enum::Point{ x: i32, y: i32}</code>.","Map a u16 to a Robj.","Map a u32 to a Robj.","Map a u64 to a Robj.","Map a u8 to a Robj.","","","Unit variant: Enum::Name","","Convert a serializable object to a Robj.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap an R function such as Rf_findFunction and convert …","Run a function single threaded. Note: This will fail badly …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a CHARSXP object to a Rstr wrapper.","Convert an environment object (ENVSXP) to a Env wrapper.","Convert an expression object (EXPRSXP) to a Expr wrapper.","Convert a function object (CLOSXP) to a Function wrapper.","Convert a language object to a Language wrapper.","Convert a list object (VECSXP) to a List wrapper.","Convert a pair list object (LISTSXP) to a Pairlist wrapper.","Get a wrapper for a promise.","Convert a raw object to a Rstr wrapper.","Convert a symbol object to a Symbol wrapper.","","","","","","","","","","","","","","","","","Wrappers for matrices with deferred arithmetic.","","A pairlist is a linked list of values with optional symbol …","","","","","S4 class support.","","","","","","","","","","","Rust trait for implementing ALTREP. Implement one or more …","","","","","","Safely implement ALTREP_CLASS.","","","Coerce this object into some other type, if possible.","Safely implement R_altrep_data1, R_altrep_data2. When …","Get the data pointer for this vector, possibly expanding …","Get the data pointer for this vector, returning NULL if …","Duplicate this object. Called by Rf_duplicate. Currently …","Duplicate this object, possibly duplicating attributes. …","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","","Implement subsetting (eg. <code>x[10:19]</code>) for this Altrep vector.","Returns the argument unchanged.","","","","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","","","Print the text for .Internal(inspect(obj))","Calls <code>U::from(self)</code>.","","Return true if the ALTREP object has been manifested …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Get the virtual length of the vector. For example for a …","Make a complex ALTREP class that can be used to make …","","Make an integer ALTREP class that can be used to make …","","Make a logical ALTREP class that can be used to make …","","Make a raw ALTREP class that can be used to make vectors.","Make a real ALTREP class that can be used to make vectors.","","Make a complex ALTREP class that can be used to make …","","","Return the maximum of the elements in this vector. If …","Return the maximum of the elements in this vector. If …","Return the minimum of the elements in this vector. If …","Return the minimum of the elements in this vector. If …","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","","Fetch the state of this object when writing to a file.","Safely (relatively!) implement R_set_altrep_data1, …","Set a single element in this vector.","Return the sum of the elements in this vector. If …","Return the sum of the elements in this vector. If …","Return the sum of the elements in this vector. If …","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","Simplified constructor that is called when loading an …","Constructor that is called when loading an Altrep object …","An obscure <code>NA</code>-aware wrapper for R’s complex vectors. Can …","","","","","","","","Treat Complexes as if it is a slice, like <code>Vec&lt;Rcplx&gt;</code>","Treat Complexes as if it is a mutable slice, like …","Get a single element from the vector. Note that this is …","","","Returns the argument unchanged.","A more generalised iterator collector for small vectors. …","","Wrapper for creating non-ALTREP complex (CPLXSXP) vectors …","Wrapper for creating ALTREP complex (CPLXSXP) vectors from …","","Get a region of elements from the vector.","Calls <code>U::from(self)</code>.","","Return an iterator for a complex object. Forces ALTREP …","Return a writable iterator for a complex object. Forces …","Create a new vector of complexes.","","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Use <code>#[derive(IntoDataFrameRow)]</code> to use this.","","","An obscure <code>NA</code>-aware wrapper for R’s double vectors. Can …","","","","","","","","Treat Doubles as if it is a slice, like <code>Vec&lt;Rfloat&gt;</code>","Treat Doubles as if it is a mutable slice, like <code>Vec&lt;Rfloat&gt;</code>","","Get a single element from the vector. Note that this is …","","","Returns the argument unchanged.","A more generalised iterator collector for small vectors. …","","Wrapper for creating non-ALTREP double (REALSXP) vectors …","Wrapper for creating ALTREP double (REALSXP) vectors from …","","Get a region of elements from the vector.","Calls <code>U::from(self)</code>.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Return an iterator for a double object. Forces ALTREP …","Return a writable iterator for a double object. Forces …","Create a new vector of doubles.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","Iterator over the names and values of an environment","","","","","","","","","","","","Get the environment flags.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Make an R environment object.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iterate over an environment.","Get a variable from an environment, but not its ancestors.","Get the names in an environment.","Create a new, empty environment with a reserved size.","Create a new, empty environment.","","","Get the enclosing (parent) environment.","","","Set the environment flags.","Set or define a variable in an environment.","Set the enclosing (parent) environment.","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Wrapper for creating Expressions (EXPRSXP) objects.","","Calls <code>U::from(self)</code>.","","Wrapper for creating Expressions (EXPRSXP) objects.","","","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","Return an iterator over the values of this expression list.","Wrapper for creating R objects containing any Rust object.","Get the “address” field of an external pointer. …","Get the “address” field of an external pointer as a …","Get a reference to a Robj for this type.","Get a mutable reference to a Robj for this type.","","","","","This allows us to treat the Robj as if it is the type T.","This allows us to treat the Robj as if it is the mutable …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","This is a zero-length object that holds the type of the …","Construct an external pointer object from any type T. In …","Get the “protected” field of an external pointer. This …","This is the contained Robj.","Get the “tag” of an external pointer. This is the type …","","","","","","","Wrapper for creating functions (CLOSSXP).","","","Get the body of the function or None if it is a primitive.","","","Do the equivalent of x(a, b, c)","","","Get the environment of the function or None if it is a …","","","Get the formal arguments of the function or None if it is …","Returns the argument unchanged.","Make a function from parts.","","","Calls <code>U::from(self)</code>.","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","An obscure <code>NA</code>-aware wrapper for R’s integer vectors. Can …","","","","","","","","Treat Integers as if it is a slice, like <code>Vec&lt;Rint&gt;</code>","Treat Integers as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>","","Get a single element from the vector. Note that this is …","","","Returns the argument unchanged.","A more generalised iterator collector for small vectors. …","","Wrapper for creating non-ALTREP integer (INTSXP) vectors …","Wrapper for creating ALTREP integer (INTSXP) vectors from …","","Get a region of elements from the vector.","Calls <code>U::from(self)</code>.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Return an iterator for a integer object. Forces ALTREP …","Return a writable iterator for a integer object. Forces …","Create a new vector of integers.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","Wrapper for creating language objects.","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","You can use the FromList wrapper to coerce a Robj into a …","","","Iterator over the objects in a VECSXP, EXPRSXP or …","","","Get the list a slice of <code>Robj</code>s.","","","","","","","","","","","","","Lists behave like slices of Robj.","Get a reference to an element in the list.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wrapper for creating a list (VECSXP) object from an …","Convert an iterator to a List object.","Build a list using separate names and values iterators. …","","","","","Wrapper for creating a list (VECSXP) object.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a List into a HashMap, consuming the list.","Convert a List into an interator, consuming the list.","","","","Return an iterator over the names and values of this list.","","Length of a list iterator.","","","Create a new list.","","","","","","","Set an element in the list.","","","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","Convert a general R object into a List iterator if …","","Convert a general R object into a List iterator if …","","","","","","","","Return an iterator over the values of this list.","An obscure <code>NA</code>-aware wrapper for R’s logical vectors. Can …","","","","","","","","Treat Logicals as if it is a slice, like <code>Vec&lt;Rint&gt;</code>","Treat Logicals as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>","","Get a single element from the vector. Note that this is …","","","Returns the argument unchanged.","A more generalised iterator collector for small vectors. …","","Wrapper for creating non-ALTREP logical (LGLSXP) vectors …","Wrapper for creating ALTREP logical (LGLSXP) vectors from …","","Get a region of elements from the vector.","Calls <code>U::from(self)</code>.","","Return an iterator for a logical object. Forces ALTREP …","Return a writable iterator for a logical object. Forces …","Create a new vector of logicals.","","","","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","Generates <code>impl</code> block and required traits for a vector type.","","","","Wrapper for creating and using matrices and arrays.","","","","","","","","","Get the underlying data fro this array.","Slice of the data references the Robj.","","Get the dimensions for this array.","Dimensions of the array.","","","Returns the argument unchanged.","","","","Zero-based indexing in row, column order.","Zero-based mutable indexing in row, column order.","Calls <code>U::from(self)</code>.","","Get the number of columns.","Get the number of columns.","Get the number of columns.","Get the number of columns.","Make a new column type.","Make a new column type.","Create a new matrix wrapper.","Create a new matrix wrapper.","","","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of submatrices.","Get the number of submatrices.","Get the offset into the array for a given index.","Get the offset into the array for a given index.","Get the offset into the array for a given index.","Get the offset into the array for a given index.","Owning Robj (probably should be a Pin).","","","","","","","","","Wrapper for handling potentially NULL values.","","","","","","","Convert an Option into Nullable type","Returns the argument unchanged.","Convert an object that may be null to a rust type.","Calls <code>U::from(self)</code>.","Convert Nullable R object into <code>Option</code>","","Map <code>Nullable&lt;T&gt;</code> into <code>Nullable&lt;U&gt;</code>","","Convert an object that may be null to a rust type.","Convert an object that may be null to a rust type.","","","","","Generate paits of names and values.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a NULL pairlist (which is a NULL).","Returns the argument unchanged.","Convert an iterator of names and values to a pairlist …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a PairList into an interator, consuming the …","","","","Generate paits of names and values.","","","","Make an empty pairlist iterator.","","","","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","You can pass a PairlistIter to a function.","","","","","","","Wrapper for creating primitive objects.","","","","","","","","","Returns the argument unchanged.","","Make a Primitive object from a string.","","Calls <code>U::from(self)</code>.","","","","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","Wrapper for creating promises (PROMSXP).","","","","","","","Get the code to be executed from the promise.","Get the environment for the execution from the promise.","","If this promise has not been evaluated, evaluate it, …","","Returns the argument unchanged.","Make a Promise from parts.","","","Calls <code>U::from(self)</code>.","","","Get the seen flag (avoids recursion).","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","Get the value of the promise, once executed.","Wrapper for creating raw (byte) objects.","","","Get a slice of bytes from the Raw object.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Create a new Raw object of length <code>len</code>.","","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","","Wrapper for creating CHARSXP objects. These are used only …","Treat a Rstr as a string slice.","","","Get the string from a character object. If the string is …","","","","","Treat Rstr like &amp;str.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare a <code>Rstr</code> with a <code>Rstr</code>.","Compare a <code>Rstr</code> with a string slice.","","","Convert a string slice to a Rstr.","Convert a String to a Rstr.","Returns the argument unchanged.","","Make a character object from a string.","","Calls <code>U::from(self)</code>.","","","","","","","","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","","","","","","","","","","Returns the argument unchanged.","","","Get a named slot from a S4 object.","Check if a named slot exists.","Calls <code>U::from(self)</code>.","","Create a S4 object.","","","Create a S4 class.","Set a named slot in a S4 object.","","Make a wrapper from a robj if it matches.","","Make a wrapper from a robj if it matches.","","","","","","This is a relatively expensive operation, so use a …","","","","","","","","Get an element in a string vector.","","","Returns the argument unchanged.","convert string-like objects into a Strings object.","Convert an iterator to a Strings object.","","Wrapper for creating string vector (STRSXP) objects.","","Calls <code>U::from(self)</code>.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Get an iterator for this string vector.","Create a new, empty list.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","","Set a single element of this string vector.","","","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","Wrapper for creating symbol objects.","","","Get the string from a symbol object.","“base”","","","“{”","“[[”","“[”","“class”","","","“.Device”","“dim”","“dimnames”","“$”","“.defined”","“.Method”","“packageName”","“.target”","“…”","“::”","","","Returns the argument unchanged.","Convert a string to a symbol.","","","Make a symbol object from a string.","","Calls <code>U::from(self)</code>.","","“.Last.value”","“levels”","Missing argument marker","“mode”","“na.rm”","“name”","“names”","<em>NAMESPACE</em>_.“","“package”","“previous”","“quote”","","“row.names”","“.Random.seed”","","“sort.list”","“source”","“spec”","","“:::”","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","","“tsp”","","Unbound marker"],"i":[1,3,1,3,1,3,1,3,0,0,1,3,1,3,1,3,251,219,1,3,1,3,0,1,3,1,3,0,0,1,3,1,3,1,3,0,0,0,0,0,0,1,3,1,3,1,3,0,0,1,3,0,0,1,3,0,1,3,1,3,1,3,1,3,0,162,0,0,0,1,3,1,3,1,3,1,3,0,0,0,162,163,0,1,3,0,0,0,0,1,3,1,3,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,1,3,251,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,33,32,14,15,16,17,18,19,20,21,22,27,33,32,14,15,16,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,27,33,32,14,15,16,17,18,19,20,21,22,0,27,33,32,14,15,16,17,18,19,20,21,22,33,27,32,27,32,33,33,27,33,32,14,15,16,17,18,19,20,21,22,27,33,32,14,15,16,17,18,19,20,21,22,27,33,32,14,15,16,17,18,19,20,21,22,33,16,17,20,17,17,15,17,19,14,17,18,19,17,17,17,18,19,20,21,22,17,18,19,20,21,17,18,19,20,21,22,17,21,22,17,18,19,14,15,16,17,18,19,20,21,22,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,68,68,64,67,0,66,0,0,67,66,66,0,67,68,0,0,0,66,65,67,0,68,0,0,64,65,66,64,68,0,66,0,57,56,58,54,59,57,63,64,65,66,67,68,56,58,54,59,57,63,64,65,66,67,68,54,58,54,54,54,58,54,59,57,63,64,65,66,67,68,58,54,59,57,63,64,65,66,67,68,58,0,56,56,56,54,57,0,0,54,54,59,57,63,64,65,66,67,68,56,58,58,54,59,57,63,64,65,66,67,68,56,56,58,58,56,58,54,59,57,63,64,65,66,67,68,56,54,54,56,58,54,54,54,59,56,58,54,59,57,63,64,65,66,67,68,56,58,54,56,56,56,56,56,56,58,58,58,58,58,54,54,54,54,54,54,54,56,54,58,63,56,54,54,58,54,54,56,54,56,54,54,54,54,56,54,54,66,68,58,54,59,57,63,64,65,66,67,68,64,65,56,56,56,58,54,59,57,63,64,65,66,67,68,56,58,54,59,57,63,64,65,66,67,68,56,56,58,54,59,57,63,64,65,66,67,68,0,57,63,56,56,0,69,69,69,69,69,69,0,69,69,69,69,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,278,279,0,280,279,277,281,282,278,0,0,0,279,280,279,277,281,282,278,0,280,277,281,282,278,280,279,277,281,282,76,278,280,279,277,281,282,76,76,76,76,76,76,278,280,279,277,281,282,76,278,280,279,277,281,282,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,278,280,279,277,281,282,76,278,280,279,277,281,282,76,278,280,279,277,281,282,76,283,283,0,284,284,0,284,283,283,283,283,283,284,284,283,283,283,283,283,283,283,283,284,283,284,283,283,283,283,283,283,283,283,283,283,283,283,283,283,284,284,284,80,80,80,80,0,0,0,80,80,80,80,80,0,0,80,80,80,0,0,81,81,81,81,285,285,81,81,285,285,81,81,81,0,0,0,84,85,84,85,84,84,85,85,84,84,85,85,286,286,286,286,84,85,84,85,84,85,85,0,0,0,287,86,86,86,86,86,86,86,86,86,0,86,86,86,86,86,86,86,86,86,86,86,0,86,86,86,86,86,0,0,0,0,0,90,9,93,90,9,91,92,93,90,9,91,92,93,90,9,91,90,9,91,92,90,9,91,92,93,93,90,9,91,92,9,92,9,92,93,90,9,91,92,90,9,91,92,93,0,92,91,9,93,90,91,92,9,9,9,0,93,93,93,90,9,91,92,93,90,9,91,92,93,90,9,91,92,0,0,0,0,0,0,96,96,96,96,96,96,288,288,96,96,96,0,0,0,0,0,0,0,0,0,98,289,97,98,289,97,98,97,97,98,289,97,98,97,289,289,97,98,97,97,97,97,0,97,97,289,289,97,98,289,97,98,289,97,98,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,147,0,152,0,0,0,0,0,0,0,0,0,0,142,218,116,290,100,0,0,0,152,0,0,104,121,0,0,0,251,219,0,0,0,0,147,0,0,0,0,0,0,0,146,146,0,127,0,0,0,0,0,0,0,116,290,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,0,0,0,0,0,0,0,110,0,0,0,0,0,105,0,0,0,0,0,127,0,0,0,215,146,131,202,116,111,291,292,293,146,129,0,0,0,105,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,114,0,0,0,147,0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,105,0,0,142,0,0,0,0,0,0,146,129,0,0,106,106,106,106,106,106,106,101,101,106,106,101,101,101,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,114,0,106,0,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,0,0,0,0,105,105,121,114,114,114,114,114,114,114,106,114,114,106,114,114,114,114,114,114,114,128,106,106,106,106,106,106,294,130,106,106,0,0,0,0,0,106,133,133,106,106,106,106,106,0,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,114,106,129,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,114,106,129,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,0,0,0,106,106,0,117,106,106,0,114,106,0,114,106,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,114,106,117,114,106,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,114,130,107,106,114,106,147,106,106,106,0,0,114,114,0,106,0,131,129,117,154,144,144,119,119,106,106,130,101,102,114,130,128,102,106,106,106,114,130,102,114,0,106,106,106,106,148,149,0,115,0,106,106,106,106,106,106,106,106,0,106,106,106,106,106,106,0,0,0,0,0,0,117,114,114,114,114,114,114,114,0,150,114,106,106,106,120,146,130,147,150,127,107,101,101,102,114,106,130,147,150,127,107,101,102,0,0,106,106,114,114,114,0,0,106,142,148,101,102,0,114,114,114,114,114,106,114,114,114,0,0,106,106,114,114,114,114,106,106,106,106,106,106,117,120,120,146,130,147,148,149,150,151,127,127,128,115,152,133,107,101,102,154,114,106,115,115,115,115,115,115,106,115,115,115,115,115,115,0,114,106,115,115,115,115,115,115,114,114,106,106,106,106,106,106,106,106,106,106,106,106,106,106,129,117,120,146,130,147,148,148,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,115,115,152,133,107,101,102,102,102,154,144,119,106,106,106,106,106,120,182,183,183,183,183,183,183,183,183,183,106,106,106,106,106,106,106,106,106,106,106,130,106,106,106,106,106,293,106,106,106,106,106,106,114,114,114,114,0,0,0,0,130,0,114,106,150,127,107,101,102,128,215,128,128,128,128,128,128,128,128,128,292,293,106,106,106,107,101,101,101,101,101,101,101,101,102,101,106,106,106,106,101,106,101,101,101,101,101,101,101,101,102,101,115,106,106,0,128,0,106,106,114,114,106,129,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,106,106,100,101,102,106,105,106,101,114,114,130,152,114,114,106,106,106,106,106,106,106,102,106,105,101,101,101,101,101,101,101,101,116,106,106,106,106,114,106,106,106,142,106,148,101,102,218,101,102,106,106,106,106,147,152,106,127,114,127,106,129,114,147,127,106,106,106,129,101,101,101,101,101,101,101,0,106,106,120,106,106,0,0,0,114,106,106,0,115,115,130,114,114,114,114,114,121,114,106,133,117,133,106,114,0,119,0,106,0,0,0,106,130,0,114,106,115,115,115,115,115,106,106,115,115,115,115,115,106,114,106,114,106,106,106,106,106,106,106,106,106,0,0,106,106,106,106,106,106,106,106,101,101,106,106,101,101,101,202,106,106,0,0,0,0,0,0,106,105,106,101,101,101,101,101,101,101,101,106,106,130,150,128,0,114,114,0,106,106,106,114,106,128,215,128,128,128,128,128,128,128,128,128,106,106,0,0,0,114,130,107,114,115,106,114,114,0,0,0,0,106,114,120,106,117,144,106,106,106,0,0,106,290,106,106,106,106,106,148,149,106,106,0,0,0,114,114,114,114,114,114,106,106,106,106,106,106,106,106,106,106,118,106,101,101,101,101,101,101,101,106,120,0,0,106,106,114,114,114,114,114,114,114,106,147,106,0,106,106,0,0,0,106,106,0,114,106,142,148,101,102,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,105,148,149,115,101,101,101,105,101,101,114,106,106,106,106,106,106,106,106,106,106,0,114,0,0,115,115,115,115,115,115,106,106,106,106,106,106,106,106,0,0,0,0,0,150,106,106,150,150,133,133,106,142,106,148,101,102,106,148,149,106,106,106,106,106,106,101,101,106,106,101,101,101,106,106,106,130,106,0,106,0,0,0,114,106,106,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,106,106,106,106,114,106,120,127,106,147,0,219,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,114,114,114,106,129,117,120,146,130,147,148,149,150,151,127,128,128,128,128,128,128,128,128,128,128,128,128,115,152,133,107,101,102,154,144,119,251,114,106,129,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,106,0,0,0,114,106,129,117,120,146,130,147,148,149,150,151,127,128,115,152,133,107,101,102,154,144,119,293,106,106,106,106,0,106,106,114,114,106,106,0,106,106,106,106,106,114,114,114,101,101,101,101,101,101,101,105,106,101,101,101,101,101,101,101,101,101,106,295,295,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,195,194,195,170,171,158,159,138,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,221,171,225,170,221,158,138,194,222,134,223,193,191,136,132,170,221,158,138,194,222,134,223,193,191,136,132,194,195,194,195,223,193,132,132,194,195,194,195,193,136,132,194,195,223,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,223,194,195,158,159,222,224,158,159,222,224,170,221,171,225,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,171,158,159,138,137,193,136,221,225,222,224,137,134,135,136,194,195,194,195,192,222,224,137,191,136,136,222,224,137,134,135,136,221,225,194,195,192,222,224,137,134,135,223,191,136,132,194,195,137,134,135,136,132,194,195,194,195,134,135,134,135,194,195,170,171,158,159,138,137,193,136,194,195,221,225,194,195,192,222,224,137,134,135,223,191,136,132,137,134,135,136,193,132,138,132,170,221,158,138,194,222,134,223,193,191,136,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,170,221,171,225,158,159,138,194,195,192,222,224,137,134,135,223,193,191,136,132,138,0,296,296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,105,0,0,105,0,0,0,105,142,0,0,0,0,105,105,0,0,0,0,0,106,106,142,101,105,105,142,105,106,0,142,105,105,142,106,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,297,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,298,24,298,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,299,24,24,24,24,24,24,24,24,24,24,24,299,300,300,24,24,301,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,301,301,24,24,24,24,24,24,302,302,302,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,298,24,301,301,301,301,24,24,0,303,24,304,24,304,301,0,24,301,24,0,0,297,24,301,301,301,24,24,24,0,24,24,24,0,24,24,24,24,24,0,276,276,0,0,0,0,0,305,305,305,305,0,0,0,0,0,0,0,303,235,235,0,235,235,235,235,235,235,235,235,235,235,235,235,0,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,0,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,184,167,167,167,167,167,167,167,167,167,0,167,167,167,184,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,184,167,167,184,167,167,167,167,167,167,167,184,167,167,167,167,167,184,184,167,167,184,167,167,167,167,167,167,167,167,167,184,184,167,167,167,167,167,167,167,167,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,0,0,0,0,0,259,252,253,254,255,256,257,258,259,252,253,254,255,256,257,258,252,253,254,255,256,257,258,259,252,253,254,255,256,257,258,259,252,253,254,255,256,257,258,256,252,253,254,255,256,257,258,259,259,259,259,252,253,259,259,254,255,257,258,259,259,259,259,256,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,256,0,259,252,253,254,255,256,257,258,259,252,253,254,255,256,257,258,259,252,253,254,255,256,257,258,252,253,254,255,256,257,258,255,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,308,308,308,308,308,308,308,308,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,309,0,0,0,0,0,0,0,0,0,231,231,231,231,231,231,231,231,310,231,310,310,310,310,311,312,313,314,315,316,231,310,231,231,231,231,311,312,313,314,315,231,231,310,231,231,231,311,312,313,316,310,231,231,231,231,231,231,231,231,231,231,0,0,311,312,311,312,311,312,313,316,231,310,231,316,311,312,313,231,311,312,313,231,231,231,231,231,310,310,0,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,0,0,267,267,267,267,267,267,267,267,267,267,267,268,267,267,267,267,267,267,267,267,267,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,0,50,50,50,269,50,269,50,269,50,269,50,50,50,269,50,269,50,50,50,269,50,269,269,50,50,50,50,50,50,269,269,50,50,50,50,50,50,50,269,50,50,50,269,50,269,50,269,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,0,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,0,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,237,237,237,272,237,229,272,237,229,237,229,237,229,237,229,237,237,237,237,229,272,237,229,237,237,237,237,229,237,229,237,237,229,272,237,229,237,237,229,237,229,237,317,229,229,229,237,229,229,229,237,229,237,237,229,237,229,272,272,272,237,237,237,229,229,229,272,237,229,272,237,229,317,237,0,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,0,0,0,0,0,0,0,0,318,318,318,243,243,243,243,243,243,243,243,243,243,243,275,243,243,243,243,243,274,275,243,243,273,243,274,243,275,243,273,274,275,243,243,243,275,243,319,243,243,243,243,273,274,275,243,243,243,230,230,0,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,0,0,239,239,239,244,239,244,239,244,239,244,239,244,239,239,244,239,239,244,239,239,239,239,244,239,244,239,244,239,244,239,239,244,244,239,244,239,239,244,239,239,239,244,244,239,244,239,244,239,0,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,0,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,0,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,185,185,185,185,185,185,185,0,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,0,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,0,232,232,232,0,232,232,0,0,0,0,232,232,0,0,0,0,0,0,0,0,0,0,232,232,232,232,232,232,232,232,232,232,0,0,0,0,0,0,0,0,0,0,0,232,0,0,232,0,0,0,232,0,232,232,232,232,0,232,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],0,[[1,1],2],[[3,3],2],0,0,0,0,[[1,4],5],[[3,4],5],[[]],[[]],0,0,0,0,[[]],[[]],0,0,0,0,0,[[[7,[6]],[7,[8]],9,10]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1,11],0,0,0,[11,1],0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,4],5],[[15,4],5],[[16,4],5],[[17,4],5],[[18,4],5],[[19,4],5],[[20,4],5],[[21,4],5],[[22,4],5],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[4,[[12,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,[[26,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[27,28],[[26,[29]]]],[[[32,[[0,[30,31]]]],28],[[26,[29]]]],[[33,28],[[26,[29]]]],[[33,28],26],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[16,2],[[12,[34]]]],[[17,2],[[12,[34]]]],[[20,2],[[12,[34]]]],[[17,[36,[35]]],[[12,[34]]]],[[17,37],12],[[15,38],[[12,[34]]]],[[17,38],[[12,[34]]]],[[19,38],[[12,[34]]]],[[14,11],[[12,[34]]]],[[17,39],[[12,[34]]]],[[18,39],[[12,[34]]]],[[19,39],[[12,[34]]]],[[17,40],12],[[17,31],12],[17,[[12,[34]]]],[18,[[12,[34]]]],[19,[[12,[34]]]],[20,[[12,[34]]]],[21,[[12,[34]]]],[22,[[12,[34]]]],[[17,41],12],[[18,41],12],[[19,41],12],[[20,41],12],[[21,41],12],[[17,31],12],[[18,31],12],[[19,31],12],[[20,31],12],[[21,31],12],[[22,31],12],[[17,10],[[12,[34]]]],[[21,10],[[12,[34]]]],[[22,10],[[12,[34]]]],[[17,42],[[12,[34]]]],[[18,42],[[12,[34]]]],[[19,42],[[12,[34]]]],[14,[[12,[34]]]],[15,[[12,[34]]]],[16,[[12,[34]]]],[17,[[12,[34]]]],[18,[[12,[34]]]],[19,[[12,[34]]]],[20,[[12,[34]]]],[21,[[12,[34]]]],[22,[[12,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[43,44],[43,44],[[44,44],2],[[44,4],5],[[44,4],5],[45,44],[10,44],[[]],[46,44],[[[48,[47]]],44],[[]],[49],[44,[[29,[47]]]],[[],45],[[],12],[[],12],[[],13],[[],50],[[],50],[[],24],[[],24],[[],50],[[],50],[10,[[26,[24]]]],[[10,[36,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[50]]]],[10,[[26,[52]]]],[[],50],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[],24],[[],50],[[50,2,11],50],[[],24],[10,[[26,[53]]]],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,24],0,[[54,55,56],57],[[54,38,56]],[[54,56]],[58,58],[54,54],[59,59],[57,57],[[[63,[[0,[60,[62,[[36,[61]]]]]]]]],[[63,[[0,[60,[62,[[36,[61]]]]]]]]]],[64,64],[65,65],[66,66],[67,67],[68,68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[56,69],56],[56,70],0,[[],[[26,[54]]]],0,0,0,[54,11],[[54,54],2],[[59,59],2],[[57,57],2],[[[63,[[0,[71,[62,[[36,[61]]]]]]]],[63,[[0,[71,[62,[[36,[61]]]]]]]]],2],[[64,64],2],[[65,65],2],[[66,66],2],[[67,67],2],[[68,68],2],[[56,69],56],0,[[58,4],[[12,[23]]]],[[54,4],5],[[59,4],5],[[57,4],5],[[[63,[[0,[72,[62,[[36,[61]]]]]]]],4],5],[[64,4],5],[[65,4],5],[[66,4],5],[[67,4],5],[[68,4],5],[[56,68],56],[[56,10],56],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,67],56],[[54,67]],[[54,67]],[[56,38],56],0,[11,[[26,[54]]]],[54,73],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,38],38],0,[[54,56]],[[56,64],56],[[56,38],56],[[56,65],56],[[56,38],56],[[56,66],56],[[56,38],56],0,0,0,0,0,[[54,24,38,56]],[[54,24,56],38],[[54,24,56],57],[[54,24,56],38],[54,26],[54,26],[[54,56]],0,[[54,74,2,56]],0,0,[[56,38],56],[[54,74,56]],[[54,74,56]],0,[[54,[63,[[62,[[36,[61]]]]]],38,2,56]],[[54,56]],0,[[54,11,38,56]],[56],[[54,[62,[10]],38,56]],[[54,[62,[10]],56],38],[[54,[62,[10]],56],57],[[54,[62,[10]],56],38],[[56,57],57],[[54,67]],[[54,67]],[66,11],[68,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,61],[65,61],[56,56],[56],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[56,38],38],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[67,75],0,0,0,0,0,[[]],[[]],[[]],[61,69],[61,69],[[]],0,[[35,35,35],69],[[35,35,35,35],69],[69,11],[[],12],[[],12],[[],13],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[76,[77,[38]]],76],0,[[],76],[[76,38,38,38,38],76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,[77,[38]]],76],0,0,[[],76],0,[[76,69],76],0,[[76,69],76],0,[[76,68],76],0,[[76,66],76],0,[[76,38],76],0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,[78],[[]],[[]],[78,24],[[55,58,78],57],[[38,58,78]],[78],[78],[[76,10],54],[78],[[78,11]],[[]],[[78,11],11],[[]],[[58,78]],[[38,38,78],2],[[11,78]],[78,2],[[58,78]],[78],[[74,2,58,78]],[[74,58,78]],[[74,58,78]],[[[63,[[62,[[36,[61]]]]]],38,2,58,78]],[[58,78]],[78],[[10,38,38,58,78]],[[10,58,78],38],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[],12],[[],12],[[],13],0,0,[[]],[[]],0,[[]],[[79,80,[29,[81]]],[[26,[24]]]],[[79,80,[29,[81]]],[[26,[24]]]],0,[[]],[[[62,[82]],80,[29,[81]]],[[26,[24]]]],[[[62,[82]],80,[29,[81]]],[[26,[24]]]],[[],12],[[],12],[[],13],0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[83,80,11,[29,[84]]],[[48,[[85,[83]]]]]],0,[[]],[[]],0,[[[62,[82]],80,11,[29,[84]]],26],[[[62,[82]],80,11,[29,[84]]],26],[[83,80,11,[29,[84]]],26],[[83,80,11,[29,[84]]],26],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,[[],[[29,[86]]]],[[]],[[]],[86,86],[[]],[[],86],[[86,4],5],[[]],[24,[[12,[86,10]]]],0,0,[[]],[[]],[86,87],0,[[],87],0,[87,86],[87,86],[86,29],[[86,87],29],[86],[[88,89],10],[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[90,90],2],[[9,9],2],[[91,91],2],[[92,92],2],[[90,4],5],[[9,4],5],[[91,4],5],[[92,4],5],[90,93],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[93,2],[[94,10],45],[[92,2,10],[[95,[45]]]],0,0,0,0,0,0,0,0,0,[10,45],[93,45],[93,45],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[[7,[35]],10],95],[[[7,[35]],9,10,2],95],[[[7,[35]],91,10,2],95],[[[7,[35]],9,10,2,10],95],0,0,0,[[]],[[]],[96,10],[[]],[[]],[[],2],[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[97],0,[98,[[99,[97]]]],[[]],[[]],[[]],[97],0,[[]],[[]],[[]],0,[[],97],0,0,[88],[[97,88]],[[97,88],87],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[88],[[97,88]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[100],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[101,[[77,[87]]]]]],0,[87,[[101,[[77,[87]]]]]],0,[[87,87],[[101,[[77,[87]]]]]],0,[[87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87,87,87],[[101,[[77,[87]]]]]],0,[[[36,[87]]],[[101,[102]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[106,[103,104,105]],107,108]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[101,101],101],[[[101,[[77,[87]]]],87],[[101,[[77,[87]]]]]],[[[106,[103,105]],[0,[112,[113,[[0,[112,[113,[[0,[112,[113,[[0,[112,[113,[[0,[112,113]]]]]]]]]]]]]]]]]]]],[[[106,[103,105]],[106,[109,105]]]],[[[101,[[77,[87]]]],87]],[[101,101]],[[101,101]],[[[114,[94,94]],108],2],[[[115,[105]],108],2],[[[115,[105]],108],2],[[[115,[105]],108],2],[[[115,[105]],108],2],[[[115,[105]],108],2],[[[115,[105]],108],2],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[115,[105]],116],[[115,[105]]]],[[[114,[94,94]],108],2],0,[[[106,[[117,[60]],118,105]],107,[106,[[119,[60]],118,105]]],[[12,[120]]]],0,0,[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],0,[[],[[106,[117,[101,[[77,[87]]]]]]]],[[[36,[60]]],[[106,[[117,[60]],[101,[[77,[87]]]]]]]],[[[36,[[0,[121,60]]]]],[[106,[[117,[60]],[101,[[77,[87]]]]]]]],[[[36,[[0,[121,60]]]]],[[106,[[117,[60]],[101,[[77,[87]]]]]]]],0,[[],[[106,[[119,[87]],[101,[[77,[87]]]]]]]],[[],[[106,[[119,[87]],[101,[[77,[87]]]]]]]],[[],36],[[[114,[[123,[122]],[123,[122]]]]],122],[[[114,[[123,[82]],[123,[82]]]]],82],[[[114,[[123,[36]],[123,[36]]]]],36],[[[114,[[123,[124]],[123,[124]]]]],124],[[[114,[[123,[10]],[123,[10]]]]],10],[114,114],[[[114,[123,123]]]],[[[106,[125,104,105]]]],[[[126,[114]]],[[114,[126,126]]]],[[[126,[114]]],[[114,[126,126]]]],[[[106,[104,105]]]],[114,114],[[[114,[[62,[10]],[62,[10]]]]],10],[[[114,[62,62]]]],[[[114,[[62,[36]],[62,[36]]]]],36],[[[114,[[62,[122]],[62,[122]]]]],122],[[[114,[[62,[124]],[62,[124]]]]],124],[[[114,[[62,[82]],[62,[82]]]]],82],[[[128,[[62,[[36,[127]]]],105,105]]],[[36,[127]]]],[[[106,[109,104,105]]],[[29,[36]]]],[[[106,[109,104,105]]],[[29,[36]]]],[[[106,[103,104,105]]],[[29,[36]]]],[[[106,[103,104,105]]],[[29,[36]]]],[[[106,[109,104,105]]],[[106,[[129,[60]],105]]]],[[[106,[103,104,105]],[106,[109,105]]]],[[]],[130],[[[106,[109,104,105]],116]],[[[106,[131,105]]],[[106,[105]]]],[[],[[106,[119,[101,[[77,[87]]]]]]]],[36,[[106,[119,[101,[[77,[87]]]]]]]],[[[36,[121]]],[[106,[119,[101,[[77,[87]]]]]]]],[36,[[106,[119,[101,[[77,[87]]]]]]]],[[[36,[121]]],[[106,[119,[101,[[77,[87]]]]]]]],[[[106,[104,105]]],[[132,[105]]]],[133,107],0,[[[106,[109,104,105]],107,87],[[134,[105]]]],[[[106,[103,104,105]],107,87],[[135,[105]]]],[[[106,[109,104,118,105]],107],136],[[[106,[103,104,118,105]],107],137],[[[106,[109,104,105]],107,87],[[138,[105]]]],0,0,0,0,[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[139,[[0,[112,[139,[[0,[112,[139,[[0,[112,[139,[[0,[112,139]]]]]]]]]]]]]]]]]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[140,[[0,[112,[140,[[0,[112,[140,[[0,[112,[140,[[0,[112,140]]]]]]]]]]]]]]]]]]]],[[[106,[109,105]],112]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[103,105]],[0,[112,[141,[[0,[112,[141,[[0,[112,[141,[[0,[112,[141,[[0,[112,141]]]]]]]]]]]]]]]]]]]],[[[106,[103,105]],[106,[109,105]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[106,[109,104,105]],100],[[29,[[106,[119]]]]]],[[142,143],[[106,[105]]]],0,0,[[[106,[144,105]]],[[106,[144,105]]]],[[[106,[144,105]]],[[106,[144,105]]]],0,[[[114,[47,47]]],[[29,[47]]]],[[[106,[103,104,105]]],[[106,[[119,[130]],105]]]],0,[[[114,[60,60]]],[[114,[60,60]]]],[[[106,[145,60]]],[[106,[145,60]]]],[[[117,[60]]],[[117,[60]]]],[120,120],[146,146],[[[130,[30]]],[[130,[30]]]],[147,147],[[[148,[60]]],[[148,[60]]]],[[[149,[60]]],[[149,[60]]]],[150,150],[151,151],[127,127],[[[128,[60,105,105]]],[[128,[60,105,105]]]],[[[115,[60,60]]],[[115,[60,60]]]],[[[152,[60]]],[[152,[60]]]],[133,133],[107,107],[[[101,[[0,[60,153]]]]],[[101,[[0,[60,153]]]]]],[102,102],[154,154],[[[144,[60]]],[[144,[60]]]],[[[119,[60]]],[[119,[60]]]],[[[114,[60,60]],[114,[60,60]]]],[[[106,[145,60]],[106,[145,60]]]],[[[117,[60]],[117,[60]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[114,[155,155]],[114,[155,155]]],156],[[[130,[[0,[30,155]]]],[130,[[0,[30,155]]]]],156],[[107,107],156],[[[106,[104,105]],107,87]],[[[114,[94,94]]],157],[[[106,[109,104,[101,[[77,[87]]]]]],87],[[106,[119,[101,[[77,[87]]]]]]]],[2,147],[[[106,[103,104,[101,[[77,[87]]]]]],87],[[106,[119,[101,[[77,[87]]]]]]]],[[[106,[109,104,105]]],158],[[[106,[103,104,105]]],159],[[107,[36,[[106,[[119,[60]],118]]]]],[[12,[[106,[[117,[60]],118]],120]]]],0,[[[114,[160,160]],87]],[[[114,[94,94]]],87],0,0,0,[[]],[129],[117],[154],[144],[144],[119],[119],[[],[[106,[110,105]]]],[142,[[106,[110,105]]]],[[],[[130,[161]]]],[[],[[101,[[0,[161,153]]]]]],[[],102],[[[114,[162,162]]]],[130],[[[128,[105,105]]]],[102,[[36,[87]]]],[[[106,[144,105]]],[[106,[119,105]]]],[[[106,[144,105]]],[[106,[119,105]]]],[[[106,[144,105]]],[[106,[119,105]]]],[[[114,[163,163]]]],[130],[102,[[36,[87]]]],[[[114,[47,47]]],10],0,[[[106,[109,104,105]]],[[106,[119,[101,[[77,[87]]]]]]]],[[[106,[103,104,105]]],[[106,[119,[101,[[77,[87]]]]]]]],[[[106,[104,105]]]],0,0,0,0,0,0,[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[164,[[0,[112,[164,[[0,[112,[164,[[0,[112,[164,[[0,[112,164]]]]]]]]]]]]]]]]]]]],0,[[[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]]],[[106,[[117,[165]],[101,[[77,[87]]]]]]]],[[[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]]],165],[[[106,[109,[101,[[77,[87]]]]]]]],[[[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]]],[[106,[[117,[165]],[101,[[77,[87]]]]]]]],[[[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]]],[[106,[[117,[165]],[101,[[77,[87]]]]]]]],[[[106,[109,[101,[[77,[87]]]]]]]],0,0,0,0,0,0,[117],[[114,143,143]],[[[114,[51,51]]]],[[114,143,143]],[87,166],[87,167],[87,168],[87,169],0,0,[[[114,[[71,[[71,[[71,[71]]]]]],[71,[[71,[[71,[71]]]]]]]],[114,[[71,[[71,[[71,[71]]]]]],[71,[[71,[[71,[71]]]]]]]]],2],[[[106,[109,105]],[106,[109,105]]],2],[[[106,[109,105]],[106,[109,105]]],2],[[[106,[109,105]],[106,[109,105]]],2],[[120,120],2],[[146,146],2],[[[130,[[0,[30,[71,[[0,[30,[71,[[0,[30,[71,[[0,[30,71]]]]]]]]]]]]]]]],[130,[[0,[30,[71,[[0,[30,[71,[[0,[30,[71,[[0,[30,71]]]]]]]]]]]]]]]]],2],[[147,147],2],[[150,150],2],[[127,127],2],[[107,107],2],[[[101,[[0,[[71,[[0,[[71,[[0,[[71,[[0,[71,153]]]],153]]]],153]]]],153]]]],[0,[[71,[[0,[[71,[[0,[[71,[[0,[[71,[[0,[71,153]]]],153]]]],153]]]],153]]]],153]]],2],[[[101,[[0,[[71,[[0,[[71,[[0,[[71,[[0,[71,153]]]],153]]]],153]]]],153]]]],[101,[[0,[[71,[[0,[[71,[[0,[[71,[[0,[71,153]]]],153]]]],153]]]],153]]]]],2],[[102,102],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,[[[106,[109,104,105]],100],[[170,[105]]]],[[[106,[103,104,105]],100],[[171,[105]]]],[[[114,[72]],10]],[[[114,[72]],10]],[[[114,[172,172]],74]],0,0,[87,[[106,[103,110,[101,[[77,[87]]]]]]]],[[],148],[[[148,[105]]],[[148,[105]]]],[[],148],[[],148],0,[[[114,[12,12]]],[[12,[114]]]],[114],[[[114,[29,29]]],[[29,[114]]]],[[[114,[12,12]]],[[12,[114]]]],[114],[[[106,[103,104,105]],60]],[[[114,[160,160]]],[[12,[[36,[35]],173]]]],[[[114,[94,94]],108],29],[[[114,[94,94]],108],29],0,0,[[[106,[109,104,105]]],29],[[[106,[103,104,105]]],29],[114,114],[[[114,[83,83]]],[[12,[173]]]],[[[114,[43,43]],4],[[12,[23]]]],[[[114,[72,72]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[106,[109,105]],4],[[12,[23]]]],[[[117,[72]],4],[[12,[23]]]],[[120,4],[[12,[23]]]],[[120,4],[[12,[23]]]],[[146,4],[[12,[23]]]],[[[130,[[0,[30,72]]]],4],[[12,[23]]]],[[147,4],[[12,[23]]]],[[[148,[72]],4],[[12,[23]]]],[[[149,[72]],4],[[12,[23]]]],[[150,4],[[12,[23]]]],[[151,4],[[12,[23]]]],[[127,4],[[12,[23]]]],[[127,4],[[12,[23]]]],[[[128,[72,[0,[72,105]],[0,[72,105]]]],4],[[12,[23]]]],[[[115,[72,72]],4],[[12,[23]]]],[[[152,[72]],4],[[12,[23]]]],[[133,4],[[12,[23]]]],[[107,4],[[12,[23]]]],[[[101,[72]],4],[[12,[23]]]],[[102,4],[[12,[23]]]],[[[154,[72]],4],[[12,[23]]]],[[[114,[94,94]],108]],[[[106,[109,104,105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[106,[109,104,118,105]],107,60,108],[[106,[[117,[60]]]]]],[[[115,[105]],108],152],[[[115,[105]],108],152],[[[115,[105]],108],152],[[[115,[105]],108],152],[[[115,[105]],108],152],[[[115,[105]],108],152],0,[[[114,[94,94]],108]],[[[106,[109,104,105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[[115,[105]],108]],[[]],[12,114],[[[0,[[123,[36]],153]]],[[106,[119,[101,[[77,[87]]]]]]]],[[[0,[[62,[36]],153]]],[[106,[119,[101,[[77,[87]]]]]]]],[[[7,[121,174]]],[[106,[117,[101,[[77,[87]]]]]]]],[[[106,[103,105]]],[[106,[119,105]]]],[[]],[[[106,[109,105]]],[[106,[129,105]]]],[[[0,[[62,[36]],153]]],[[106,[129,[101,[[77,[87]]]]]]]],[[[7,[121,174]]],[[106,[117,[101,[[77,[87]]]]]]]],[[[106,[119,105]]],[[106,[129,105]]]],[[[7,[174]]],[[106,[110,[101,[[77,[87]]]]]]]],[[[48,[36,174]]],[[106,[110,[101,[[77,[87]]]]]]]],[[[106,[109,105]]],[[106,[119,105]]]],[[[106,[117,105]]],[[106,[154,105]]]],[[[106,[117,105]]],[[106,[129,105]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[105,[[148,[105]]]],[142,[[149,[105]]]],[[]],[[[175,[89]]],150],[[[176,[87]]],150],[177,150],[[]],[[[178,[89]]],150],[[[176,[11]]],150],[[[179,[89]]],150],[[[179,[11]]],150],[[[180,[89]]],150],[[[176,[89]]],150],[[[175,[11]]],150],[[[179,[87]]],150],[[[178,[11]]],150],[[[175,[87]]],150],[[[180,[11]]],150],[[[180,[87]]],150],[[[178,[87]]],150],[[]],[[[175,[89]]],127],[[[179,[87]]],127],[151,127],[[[180,[87]]],127],[[[176,[11]]],127],[[[179,[89]]],127],[[[178,[87]]],127],[[[178,[11]]],127],[[[175,[11]]],127],[[[178,[89]]],127],[150,127],[177,127],[[[180,[89]]],127],[87,127],[[[176,[89]]],127],[[[180,[11]]],127],[89,127],[[[176,[87]]],127],[[]],[[[179,[11]]],127],[[[175,[87]]],127],[11,127],[[]],[[[128,[[62,[[36,[127]]]],105,105]]],[[128,[[36,[127]],105,105]]]],[116,[[115,[105]]]],[[]],[[]],[[]],[[]],[[]],[[[7,[87,174]]],102],[[[36,[87]]],102],[[]],[[]],[[]],[[]],[[[106,[109,[101,[[77,[87]]]]]]],[[106,[103,110,[101,[[77,[87]]]]]]]],[[87,[0,[60,181]]],[[106,[103,110,[101,[[77,[87]]]]]]]],[[142,60],[[106,[110,105]]]],[74,[[106,[110,[101,[[77,[87]]]]]]]],[74,[[106,[110,[101,[[77,[87]]]]]]]],[146,120],[24,[[12,[182,10]]]],[24,[[12,[[183,[38]],10]]]],[24,[[12,[[183,[184]],10]]]],[24,[[12,[[183,[185]],10]]]],[24,[[12,[[183,[167]],10]]]],[24,[[12,[[183,[11]],10]]]],[24,[[12,[[183,[168]],10]]]],[24,[[12,[[183,[169]],10]]]],[24,[[12,[[183,[61]],10]]]],[24,[[12,[[183,[166]],10]]]],[[[51,[[149,[105]]]],36],[[12,[[106,[119,105]],120]]]],[[[51,[[149,[105]]]],36],[[12,[[106,[119,105]],120]]]],[[142,108],[[106,[110,105]]]],[[[51,[[149,[105]]]]],[[106,[144,105]]]],[[[51,[[149,[105]]]]],[[106,[119,105]]]],[[[51,[[149,[105]]]]],[[106,[144,105]]]],[[[51,[[149,[105]]]]],[[106,[119,105]]]],[[142,108],[[106,[110,105]]]],[[[51,[[149,[105]]]],[7,[174]]],[[12,[[106,[110,105]],120]]]],[[[51,[[149,[105]]]],[7,[174]]],[[106,[110,105]]]],[[[7,[174]]],[[106,[110,[101,[[77,[87]]]]]]]],[[[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]],[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]]],2],[[[106,[109,104,105]]],158],[[[106,[103,104,105]]],159],[[[106,[109,104,105]]],158],[[[106,[103,104,105]]],159],[[187,187,87],[[29,[[106,[110,[101,[[77,[87]]]]]]]]]],[[],29],[[[106,[109,104,105]],[188,[105]]],29],[[[106,[119,105]],[188,[105]]],29],[[[106,[119,105]],[188,[105]]],29],[[[106,[103,104,105]],[188,[105]]],29],[[[106,[125,104,105]],[188,[105]]],29],[[[106,[104,105]],[188,[105]]],29],[[87,[36,[167]]],87],[[87,[36,[169]]],87],[[87,[36,[168]]],87],[[87,[36,[166]]],87],0,0,0,0,[[[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]],[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]]],2],0,[[[114,[189,189]],190]],[[[106,[109,105]],190]],[[150,190]],[[127,190]],[[107,190]],[[[101,[[0,[189,153]]]],190]],[[102,190]],0,[[],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],105,105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],105,105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[]],[[]],[[[106,[119,105]],[188,[105]]]],[[[106,[119,105]],[188,[105]]]],[[[106,[109,105]],[188,[105]]]],[107,87],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[102]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[102],0,[[[106,[109,104,118,105]],107,87],[[106,[119]]]],[[[106,[109,[101,[102]]]],107,87]],[[[106,[104,118,105]],107,87],[[106,[104]]]],[[[106,[103,104,118,105]],107,87],[[106,[119]]]],[[],[[29,[89]]]],[[[106,[103,105]],[188,[105]]]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[102]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[[[101,[[77,[87]]]],87]],[102],[[],89],[116,[[115,[[0,[105,30]]]]]],[[[106,[109,104,105]]],[[191,[105]]]],[[[106,[103,104,105]]],[[192,[105]]]],[100,193],0,[[[106,[109,105]]],[[193,[105]]]],[[[106,[104,105]],107],[[106,[104]]]],[[[106,[109,[101,[102]]]],107]],[114,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[106,[119,105]]],[[106,[[119,[130]],105]]]],[[[106,[104,105]]],[[106,[104,[101,[[77,[87]]]]]]]],[[]],[[]],[102],[[[106,[104,105]]],[[12,[[106,[104,105]],120]]]],[[],[[101,[102]]]],[[[106,[104,105]]],[[106,[104,[101,[102]]]]]],[[[101,[102]]],[[101,[102]]]],[[]],[114],[130],[152],[[[114,[74,74]]],114],[[]],[[[106,[117,105]]]],[[[106,[119,105]]]],[[[106,[109,105]]]],[[[106,[119,105]]]],[[[106,[103,105]]]],[[[106,[[154,[60]],105]]]],[[[106,[[129,[60]],105]]]],[102],[[[106,[109,104,105]]],[[106,[[117,[60]],105]]]],[[]],[[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]]]],[[[101,[102]]]],[[[101,[[77,[87]]]]]],[[]],[[[106,[103,105]]]],[[[106,[109,105]]]],[[]],[[[106,[117,105]]],[[7,[174]]]],[[],24],[[[106,[117,[101,[[77,[87]]]]]]]],[[[106,[119,[101,[[77,[87]]]]]]]],[[[106,[119,[101,[[77,[87]]]]]]]],[[],148],[[[106,[104,105]],100],[[12,[[106,[104]],120]]]],[[[148,[105]]],[[148,[105]]]],[[],148],[[],148],[[]],[[]],[[]],[[[106,[110,104,105]]],[[106,[154,105]]]],[[[106,[119,105]]],[[29,[36]]]],[[[106,[119,105]]],[[29,[36]]]],[[[106,[104,105]],107]],[147,2],[152,2],[[[106,[104,105]]],2],[127,2],[114,2],[127,2],[[[106,[129,105]]],2],[129,2],[114,2],[147,2],[127,2],[[[106,[104,[101,[[77,[87]]]]]]],2],[[[106,[104,105]]],2],[[[106,[129,105]]],2],[129,2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],[[[101,[[77,[87]]]]],2],0,[[[106,[109,104,105]]],[[194,[105]]]],[[[106,[103,104,105]]],[[195,[105]]]],[120,146],[[[106,[109,104,105]],107],158],[[[106,[103,104,105]],107],159],0,0,0,[[[114,[94,94]]],29],[[[106,[109,104,105]]],29],[[[106,[103,104,105]]],29],0,0,0,[[[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]],[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]]],2],[114,29],[[114,143],114],[114],[[[114,[161]]],161],[[114,143]],[[],87],[[[114,[196,196]]],87],[[[106,[104,105]]],87],[133,87],0,0,[[[106,[104,105]],107],87],[[],87],0,0,0,[[187,187,87],[[106,[110,[101,[[77,[87]]]]]]]],0,0,0,[[187,187,187,87],[[106,[110,[101,[[77,[87]]]]]]]],[[[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]],[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]]],2],0,[[114,143],114],[[[106,[109,104,105]],108],[[106,[117,105]]]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[115,[105]],116,108]],[[[106,[109,104,118,105]],107,108],[[106,[117]]]],[[[106,[103,104,118,105]],107,108],[[106,[117]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[115,[105]],108],[[106,[117,105]]]],[[[106,[103,104,105]],108]],[[114,143],114],[[[106,[103,104,105]],108],[[106,[117,105]]]],[[114,143],114],[[[106,[109,104,105]],108],[[106,[117,105]]]],[[[106,[103,104,105]],108]],[[[106,[103,104,105]],108],[[106,[103,104,105]]]],[[[106,[103,104,105]],108],[[106,[117,105]]]],[[[106,[104,105]]],107],[142,[[106,[110,105]]]],[[[106,[109,105]]],[[29,[[0,[60,197,[198,[[0,[60,197,[198,[[0,[60,197,[198,[[0,[60,197,198,199,181]]]],[199,[[0,[60,197,198,199,181]]]],181]]]],[199,[[0,[60,197,[198,[[0,[60,197,198,199,181]]]],[199,[[0,[60,197,198,199,181]]]],181]]]],181]]]],[199,[[0,[60,197,[198,[[0,[60,197,[198,[[0,[60,197,198,199,181]]]],[199,[[0,[60,197,198,199,181]]]],181]]]],[199,[[0,[60,197,[198,[[0,[60,197,198,199,181]]]],[199,[[0,[60,197,198,199,181]]]],181]]]],181]]]],181]]]]]],[[[106,[109,118,105]],107],[[29,[[106,[[117,[[0,[60,181,197,[198,[[0,[60,181,197,[198,[[0,[60,181,197,198,199]]]],[199,[[0,[60,181,197,198,199]]]]]]]],[199,[[0,[60,181,197,[198,[[0,[60,181,197,198,199]]]],[199,[[0,[60,181,197,198,199]]]]]]]]]]]]]]]]]],[[[106,[104,105]],107,107],2],0,0,[[[106,[117,105]],[51,[[106,[119,105]]]]]],[[[106,[117,105]],[51,[[106,[[119,[200]],105]]]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[101,101],101],[[101,87],101],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[201,[[0,[112,[201,[[0,[112,[201,[[0,[112,[201,[[0,[112,201]]]]]]]]]]]]]]]]]]]],[[101,101]],[[101,101]],[[101,87]],[[[106,[119]]]],[[[106,[119,105]],[202,[105]]]],[[[106,[103,104,105]],[202,[105]]]],0,0,0,0,0,0,[[[106,[104,[101,[[77,[87]]]]]]],87],[[],87],[[[106,[104,105]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[102]]],87],[[[106,[109,105]]],[[106,[117,105]]]],[[[106,[[0,[110,103]],105]]],[[106,[[0,[110,103]],105]]]],[[],130],[[89,[29,[89]],89],150],[[[62,[[36,[127]]]]],[[12,[[128,[[62,[[36,[127]]]],105,105]],120]]]],0,[[[114,[94,94]]],29],[[[114,[203,203]]],29],0,[[[106,[[0,[110,103]],105]]],[[106,[[0,[110,103]],105]]]],[[[106,[109,105]]],[[106,[117,105]]]],[[[106,[104,[101,[[77,[87]]]]]]],87],[[[114,[94,94]],87],29],[142,[[106,[110,105]]]],0,[[],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],105,105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],[101,[[77,[87]]]],105]]],87],[[[128,[[62,[[36,[127]]]],105,105]]],87],[[[106,[109,104,118,105]]],136],[[[106,[103,104,118,105]]],137],0,0,0,[[[114,[[186,[[186,[[186,[186]]]]]],[186,[[186,[[186,[186]]]]]]]],[114,[[186,[[186,[[186,[186]]]]]],[186,[[186,[[186,[186]]]]]]]]],[[29,[156]]]],[[[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]],[130,[[0,[30,[186,[[0,[30,[186,[[0,[30,[186,[[0,[30,186]]]]]]]]]]]]]]]]],[[29,[156]]]],[[107,107],[[29,[156]]]],[[[114,[94,94]],108]],0,[[[106,[104,105]],100],[[106,[104,105]]]],[[[126,[[114,[204,204]]]],205],206],[[[114,[94,94]],108],[[29,[87]]]],0,0,0,0,[[[106,[109,105]]],[[0,[60,[207,[[0,[60,[207,[[0,[60,[207,[[0,[60,[207,[[0,[60,207,208]]]],208]]]],208]]]],208]]]],208]]]],[49],[49],0,0,0,[[[106,[[117,[60]],118,105]],107,[106,[[119,[60]]]]],[[12,[120]]]],[[[106,[[117,[60]],[101,[[77,[87]]]]]],[106,[[119,[60]],[101,[[77,[87]]]]]]],[[12,[120]]]],[[[106,[[117,[60]],[101,[[77,[87]]]]]],[106,[[119,[60]],[101,[[77,[87]]]]]]],[[12,[120]]]],0,0,[[187,187,187],[[106,[110,[101,[[77,[87]]]]]]]],[[]],[[[106,[104,105]]],105],[[[106,[144,105]]]],[[[106,[119,105]]]],[[[106,[144,105]]]],[[[106,[119,105]]]],[[[148,[105]]],105],[[[149,[105]]],105],[[[106,[104,105]]],[[106,[144,105]]]],[[[106,[125,104,105]]],[[106,[144,105]]]],[[[36,[60]]],[[106,[[154,[60]],[101,[[77,[87]]]]]]]],[[[36,[[0,[60,121]]]]],[[106,[[154,[60]],[101,[[77,[87]]]]]]]],[[[36,[[0,[121,60]]]]],[[106,[[154,[60]],[101,[[77,[87]]]]]]]],[[[114,[79,79]],[36,[35]]],[[12,[87,173]]]],[[[114,[79,79]],[36,[35]]],[[12,[173]]]],[[[114,[160,160]],45],[[12,[87,173]]]],[[[114,[79,79]],[7,[35,174]]],[[12,[87,173]]]],[[[114,[79,79]],45],[[12,[87,173]]]],[[[114,[160,160]],35,[7,[35,174]]],[[12,[87,173]]]],[[[106,[119,105]]],[[106,[119,105]]]],[[[106,[119,105]]],[[106,[119,105]]]],[[[106,[109,105]],112]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[209,[[0,[112,[209,[[0,[112,[209,[[0,[112,[209,[[0,[112,209]]]]]]]]]]]]]]]]]]]],[107],[[[106,[104,118,105]],107],[[106,[104]]]],[[[101,[[77,[87]]]],107],[[101,[[77,[87]]]]]],[[[101,[[77,[87]]]],107]],[[[101,[[77,[87]]]],107]],[[[101,[[77,[87]]]],107]],[[[101,[102]],107],[[101,[102]]]],[[[101,[[77,[87]]]],107]],[[[101,[[77,[87]]]],107],[[101,[[77,[87]]]]]],[[[106,[[0,[110,103]],104,105]],107,87]],0,0,0,[[[106,[[0,[210,110]],104,105]],100],[[106,[[0,[210,110]],104]]]],[[[106,[104,105]]],[[106,[104,105]]]],[[[114,[203,203]],108],29],[[[114,[203,203]],108]],[114,29],[[114,143],114],[114],[[[114,[161]]],161],[[114,143]],[[[106,[109,104,[101,[[77,[87]]]]]],87],[[106,[119,[101,[[77,[87]]]]]]]],[2,147],[[[106,[103,104,[101,[[77,[87]]]]]],87],[[106,[119,[101,[[77,[87]]]]]]]],0,[[[106,[109,104,105]]],158],[[[106,[103,104,105]]],159],0,0,0,[[[106,[109,105]]],[[0,[60,[198,[[0,[60,[198,[[0,[60,[198,[[0,[60,[198,[[0,[60,198,181]]]],181]]]],181]]]],181]]]],181]]]],[[[106,[103,109,105]],165,[106,[109,105]]]],0,[[[114,[211,211]],212],[[12,[42,173]]]],[[[106,[109,104,118,105]],107,[36,[87]]],[[106,[[117,[60]],118,105]]]],[2,148],[[[148,[105]],2],[[148,[105]]]],[2,148],[2,148],[[[106,[104,105]]],[[36,[87]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[109,105]],112]],[[[106,[103,105]],[0,[112,[213,[[0,[112,[213,[[0,[112,[213,[[0,[112,[213,[[0,[112,213]]]]]]]]]]]]]]]]]]]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[103,105]],[106,[109,105]]]],[[[106,[103,105]],[0,[112,[214,[[0,[112,[214,[[0,[112,[214,[[0,[112,[214,[[0,[112,214]]]]]]]]]]]]]]]]]]]],0,[[],87],[[[148,[105]]],87],[[[149,[105]]],87],[[[115,[105]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[[101,[[77,[87]]]]],87],[[],[[29,[87]]]],[[[101,[[77,[87]]]]],[[29,[87]]]],[[[101,[[77,[87]]]]],[[29,[87]]]],[[[114,[94,94]]]],[[[106,[109,104,105]],[215,[105]]],[[106,[119]]]],[[[106,[109,104,105]],107,150],[[106,[119,105]]]],[[[106,[104,105]],107,150]],[[[106,[103,104,105]],107,150],[[106,[119,105]]]],[[[106,[104,105]],[215,[105]]]],[[[106,[109,104,105]],108],[[106,[119,105]]]],[[[106,[104,105]],108]],[[[106,[103,104,105]],108],[[106,[119,105]]]],[[[106,[104,105]],[215,[105]]],[[106,[104]]]],[[[106,[103,104,105]],[215,[105]]],[[106,[119]]]],0,[[[114,[47,47]]],[[29,[47]]]],0,0,[[[115,[105]]]],[[[115,[105]]]],[[[115,[105]]]],[[[115,[105]]]],[[[115,[105]]]],[[[115,[105]]]],[[[106,[144,105]],107,87]],[[[106,[144,105]],107,87]],[[[106,[119,105]],107,87]],[[[106,[119,105]],107,87]],[[[106,[[144,[216]],105]]],[[216,[[106,[144,105]]]]]],[[[106,[[144,[216]],105]]],[[216,[[106,[144,105]]]]]],[[[106,[[119,[216]],105]]],[[216,[[106,[119,105]]]]]],[[[106,[[119,[216]],105]]],[[216,[[106,[119,105]]]]]],0,[[107,[36,[[106,[[119,[60]],105]]]]],[[12,[[106,[[117,[60]]]],120]]]],0,[[107,[36,[[106,[[119,[60]],105]]]]],[[12,[[106,[[117,[60]]]],120]]]],0,0,[[[106,[109,105]],[0,[187,197]]],[[0,[187,197]]]],[[[106,[109,118,105]],107,[0,[187,197]]],[[106,[[117,[[0,[187,197]]]]]]]],0,[[150,89],150],[133,89],0,[[[106,[104,105]],107],89],[[],149],[[[106,[104,105]]],[[36,[89]]]],[[[148,[105]],105],[[149,[105]]]],[[],149],[[],149],0,0,0,[[[106,[109,105]],[106,[[0,[110,103]],[0,[105,[111,[105]]]]]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[[0,[110,103]],105]],112],[[106,[[0,[110,103]],105]]]],[[[106,[[0,[110,103]],[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[[106,[109,105]],112]],[[[106,[109,[0,[105,[111,[105]]]]]],[106,[109,105]]]],[[101,101],101],[[[101,[[77,[87]]]],87],[[101,[[77,[87]]]]]],[[[106,[103,105]],[0,[112,[217,[[0,[112,[217,[[0,[112,[217,[[0,[112,[217,[[0,[112,217]]]]]]]]]]]]]]]]]]]],[[[106,[103,105]],[106,[109,105]]]],[[101,101]],[[101,101]],[[[101,[[77,[87]]]],87]],[[[106,[109,105]]],[[0,[60,[198,[[0,[60,[198,[[0,[60,[198,[[0,[60,[198,[[0,[60,198,181]]]],181]]]],181]]]],181]]]],181]]]],[[[106,[109,118,105]],107],[[106,[[117,[[0,[60,181,[198,[[0,[60,181,[198,[[0,[60,181,[198,[[0,[60,181,198]]]]]]]]]]]]]]]]]]]],[[[106,[103,104,105]],[188,[105]],[188,[105]]]],[[130,130]],[[[106,[104,105]],87,87]],0,[[[106,[109,104,105]]],[[106,[119,105]]]],0,0,0,[[]],[[[106,[109,104,105]]],[[106,[[117,[60]],105]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[106,[109,104,105]],218],[[12,[[106,[[129,[60]]]],120]]]],[[[106,[109,104,105]]],[[106,[[154,[60]],105]]]],[[[106,[119,105]]],[[29,[36]]]],[[[106,[119,105]]],[[29,[36]]]],[[],45],[[],45],[[],45],[[],45],[[[106,[109,104,[101,[[77,[87]]]]]]],[[7,[60,174]]]],[147,147],0,[[],12],[24,[[26,[[182,[167]]]]]],[24,[[26,[[182,[168]]]]]],[24,[[26,[[182,[166]]]]]],[24,[[26,[[182,[11]]]]]],[24,[[26,[[182,[61]]]]]],[24,[[26,[[182,[169]]]]]],[24,[[26,[[182,[169]]]]]],[24,[[26,[[182,[184]]]]]],[24,[[26,[[182,[168]]]]]],[24,[[26,[[182,[38]]]]]],[24,[[26,[[182,[166]]]]]],[24,[[26,[[182,[61]]]]]],[24,[[26,[[182,[184]]]]]],[24,[[26,[[182,[185]]]]]],[24,[[26,[[182,[11]]]]]],[24,[[26,[[182,[167]]]]]],[24,[[26,[[182,[38]]]]]],[24,[[26,[[182,[185]]]]]],[24,[[26,[[183,[38]]]]]],[24,[[26,[[183,[167]]]]]],[24,[[26,[[183,[185]]]]]],[24,[[26,[[183,[11]]]]]],[24,[[26,[[183,[184]]]]]],[24,[[26,[[183,[168]]]]]],[24,[[26,[[183,[167]]]]]],[24,[[26,[[183,[38]]]]]],[24,[[26,[[183,[61]]]]]],[24,[[26,[[183,[169]]]]]],[24,[[26,[[183,[166]]]]]],[24,[[26,[[183,[166]]]]]],[24,[[26,[[183,[11]]]]]],[24,[[26,[[183,[184]]]]]],[24,[[26,[[183,[61]]]]]],[24,[[26,[[183,[168]]]]]],[24,[[26,[[183,[169]]]]]],[24,[[26,[[183,[185]]]]]],[24,[[26,[[114,[[219,[24]],[219,[24]]]]]]]],[[],12],[24,[[26,[114]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[36,[127]]],[[12,[[128,[[36,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[7,[127,174]]],[[12,[[128,[[7,[127,174]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[[77,[127]]],[[12,[[128,[[77,[127]],105,105]],120]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[106,[109,104,105]]],[[12,[[106,[117,105]],[106,[109,104,105]]]]]],0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[[106,[119,105]],[188,[105]]]],[[[106,[109,104,105]],[188,[105]]]],[[[106,[119,105]],[188,[105]]]],[[[106,[103,104,105]],[188,[105]]]],0,[142,[[106,[105]]]],[142,[[106,[110,105]]]],[[[114,[72]]]],[[[114,[72]]]],[[[106,[103,104,105]],[188,[105]],[188,[105]]]],[[[106,[109,105]],[0,[187,197]]],[[0,[187,197]]]],0,[[[106,[109,118,105]],107,[0,[187,197]]],[[106,[[117,[[0,[187,197]]]]]]]],[[[106,[109,104,105]]],[[106,[119,105]]]],[[[106,[103,104,105]]],[[106,[119,105]]]],[[[106,[109,104,105]],108]],[[[106,[109,104,105]],100],[[138,[105]]]],[[[114,[83,83]],[36,[35]]],[[12,[87,173]]]],[[[114,[83,83]],[36,[35]]],[[12,[173]]]],[[[114,[83,83]],220],[[12,[173]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[[],[[101,[[77,[87]]]]]],[87],[142,[[106,[110,105]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[102]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[102]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[[77,[87]]]]]],[87,[[101,[[77,[87]]]]]],[[[106,[103,104,105]],[106,[109,105]],108]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[194,[105]],108],2],[[[195,[105]],108],2],[[[194,[105]],108],2],[[[195,[105]],108],2],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[170,[60]]],[[170,[60]]]],[[[221,[60]]],[[221,[60]]]],[[[158,[60]]],[[158,[60]]]],[[[138,[60]]],[[138,[60]]]],[[[194,[60]]],[[194,[60]]]],[[[222,[60]]],[[222,[60]]]],[[[134,[60]]],[[134,[60]]]],[[[223,[60]]],[[223,[60]]]],[[[193,[[0,[60,105]]]]],[[193,[[0,[60,105]]]]]],[[[191,[60,60]]],[[191,[60,60]]]],[[[136,[60]]],[[136,[60]]]],[132,132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[194,[105]]],157],[[[195,[105]]],157],[[[194,[105]]],87],[[[195,[105]]],87],0,0,0,0,[[[194,[105]],108],29],[[[195,[105]],108],29],[[[194,[105]],108],29],[[[195,[105]],108],29],[[[193,[[0,[72,105]]]],4],[[12,[23]]]],[[[136,[72,72]],4],[[12,[23]]]],[[[132,[72]],4],[[12,[23]]]],[[[194,[105]],108]],[[[195,[105]],108]],[[[223,[105]],108]],[[[132,[105]],108]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[170,[105]]]],[[]],[[[171,[105]]]],[[]],[[[158,[105]]]],[[[159,[105]]]],[[[138,[105]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[193,[105]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[[194,[105]]],29],[[[195,[105]]],29],[[[194,[105]]],87],[[[195,[105]]],87],[[[192,[105]]],87],[[[222,[105]]],87],[[[224,[105]]],87],[[[137,[105]]],87],[[[191,[105]]],87],[[[136,[105]]],87],[[],87],0,0,0,0,0,0,[[[221,[105]]],29],[[[225,[105]]],29],[[[194,[105]]],29],[[[195,[105]]],29],[[[192,[105]]],29],[[[222,[105]]],29],[[[224,[105]]],29],[[[137,[105]]],29],[[[134,[105]]],29],[[[135,[105]]],29],[[[223,[105]]],29],[[[191,[105]]],29],[[[136,[105]]],29],[[[132,[105]]],29],[[[194,[[101,[[77,[87]]]]]]],29],[[[195,[[101,[[77,[87]]]]]]],29],[[[137,[105]]],29],[[[134,[105]]],29],[[[135,[105]]],29],[[[136,[105]]],29],[[[132,[105]]],29],[[[194,[105]],87],29],[[[195,[105]],87],29],[[[194,[[101,[[77,[87]]]]]],87],29],[[[195,[[101,[[77,[87]]]]]],87],29],0,0,0,0,[[[194,[105]],108],[[29,[87]]]],[[[195,[105]],108],[[29,[87]]]],[[[170,[105]]],105],[[[171,[105]]],105],[[[158,[105]]],105],[[[159,[105]]],105],[[[138,[105]]],105],[[[137,[105]]]],[[[193,[[0,[105,30]]]]]],[[[136,[105]]]],[[[194,[[101,[[77,[87]]]]]],108]],[[[195,[[101,[[77,[87]]]]]],108]],[[[221,[105]]]],[[[225,[105]]]],[[[194,[105]]]],[[[195,[105]]]],[[[192,[105]]]],[[[222,[105]]]],[[[224,[105]]]],[[[137,[105]]]],[[[134,[105]]]],[[[135,[105]]]],[[[223,[105]]]],[[[191,[105]]]],[[[136,[105]]]],[[[132,[105]]]],[[[137,[105]],87]],[[[134,[105]],87]],[[[135,[105]],87]],[[[136,[105]],87]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[]],[[165,[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]],165,[106,[103,[101,[[77,[87]]]]]]]],[[165,[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]],165,[106,[103,[101,[[77,[87]]]]]]]],[[[106,[109,[101,[[77,[87]]]]]],[106,[109,[101,[[77,[87]]]]]]],[[106,[[117,[165]],[101,[[77,[87]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[100],0,0,[[],[[101,[[77,[87]]]]]],0,[87,[[101,[[77,[87]]]]]],0,[[87,87],[[101,[[77,[87]]]]]],0,[[87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87,87],[[101,[[77,[87]]]]]],0,[[87,87,87,87,87,87],[[101,[[77,[87]]]]]],0,[[[36,[87]]],[[101,[102]]]],0,0,0,0,0,0,0,0,0,0,0,[[],[[106,[117,[101,[[77,[87]]]]]]]],[[[36,[60]]],[[106,[[117,[60]],[101,[[77,[87]]]]]]]],[[[36,[[0,[121,60]]]]],[[106,[[117,[60]],[101,[[77,[87]]]]]]]],0,[[],[[106,[[119,[87]],[101,[[77,[87]]]]]]]],[[],[[106,[[119,[87]],[101,[[77,[87]]]]]]]],[[],[[106,[119,[101,[[77,[87]]]]]]]],[36,[[106,[119,[101,[[77,[87]]]]]]]],[[[36,[121]]],[[106,[119,[101,[[77,[87]]]]]]]],[36,[[106,[119,[101,[[77,[87]]]]]]]],0,0,0,[[],148],0,[[],[[101,[102]]]],[[]],[[],148],[[],87],0,0,[2,148],[[],87],[[],[[29,[87]]]],[[],149],0,[87],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,[51,[24]]]],[[],3],[24,[[29,[2]]]],[24,[[29,[11]]]],[24,[[29,[[36,[11]]]]]],[24,[[29,[[36,[11]]]]]],[24,[[29,[[7,[11]]]]]],[24,[[29,[226]]]],[24,[[29,[168]]]],[24,[[29,[94]]]],[24,[[29,[[36,[168]]]]]],[24,[[29,[[7,[168]]]]]],[24,[[29,[[36,[35]]]]]],[24,[[29,[[36,[35]]]]]],[24,[[29,[38]]]],[24,[[29,[94]]]],[24,[[29,[[36,[38]]]]]],[24,[[29,[[36,[38]]]]]],[24,[[29,[[7,[38]]]]]],[[],24],[24,24],[[],24],[24,24],[24,[[29,[10]]]],[24,[[29,[[7,[10]]]]]],[24,[[29,[[7,[45]]]]]],[24,[[29,[[36,[184]]]]]],[24,[[29,[[36,[227]]]]]],[24,[[29,[[36,[35]]]]]],[24,[[29,[[36,[166]]]]]],[24,[[29,[[36,[167]]]]]],[24,[[29,[[36,[11]]]]]],[24,[[29,[[36,[169]]]]]],[24,[[29,[[36,[61]]]]]],[24,[[29,[[36,[185]]]]]],[24,[[29,[[36,[38]]]]]],[24,[[29,[[36,[168]]]]]],[[],[[29,[36]]]],[24,[[29,[[36,[35]]]]]],[24,[[29,[[36,[169]]]]]],[24,[[29,[[36,[11]]]]]],[24,[[29,[[36,[227]]]]]],[24,[[29,[[36,[38]]]]]],[24,[[29,[[36,[184]]]]]],[24,[[29,[[36,[166]]]]]],[24,[[29,[[36,[61]]]]]],[24,[[29,[[36,[185]]]]]],[24,[[29,[[36,[167]]]]]],[24,[[29,[[36,[168]]]]]],[[],[[29,[36]]]],[[],36],[[],36],[[]],[[]],[[],[[29,[86]]]],[24,24],[[]],0,[[],24],[31,[[12,[24]]]],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,10,[36,[10]],228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,10,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,10,[36,[10]],228],26],[[24,87,228],26],[[24,10,87,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,228],26],[[24,10,228],26],[[],[[29,[226]]]],[[],[[29,[229]]]],[[24,[51,[24]]]],[24],[[24,[36,[38]]],2],[[24,[36,[11]]],2],[[24,10],2],[[24,24],2],[[],[[26,[24]]]],[[],24],[50,[[26,[24]]]],[[24,4],5],[[[230,[[51,[24]]]]],24],[[[7,[185]]],24],[92,24],[[[26,[[51,[24]]]]],24],[169,24],[36,24],[231,24],[232,24],[233,24],[114,24],[234,24],[[[7,[235]]],24],[[[7,[24]]],24],[236,24],[237,24],[238,24],[239,24],[166,24],[24,24],[240,24],[[[7,[166]]],24],[185,24],[[[77,[235]]],24],[53,24],[9,24],[241,24],[242,24],[[[180,[235]]],24],[53,24],[241,24],[233,24],[243,24],[231,24],[232,24],[236,24],[7,24],[[]],[52,24],[226,24],[90,24],[185,24],[91,24],[52,24],[234,24],[238,24],[242,24],[[[179,[235]]],24],[244,24],[[[7,[169]]],24],[226,24],[[],24],[50,24],[229,24],[245,24],[[[247,[[0,[246,72]]]]],24],[50,24],[245,24],[248,24],[239,24],[240,24],[248,24],[235,24],[237,24],0,[24,[[12,[24,10]]]],[88,24],[88,24],[[],88],[24,88],[[],[[29,[24]]]],[[],2],[[],2],[10,2],0,[[]],0,[[],24],[[],24],[[],2],[24,2],[[],87],[[],[[29,[86]]]],0,[[24,[51,[24]]]],[[],[[29,[86]]]],[[24,28],26],0,0,[[],1],[[24,249],12],[[[51,[24]],[51,[24]]],[[26,[24]]]],[74,[[26,[24]]]],[74,[[26,[24]]]],[[24,[36,[10]],228],26],[[24,[51,[24]]]],[[]],[35,10],[[],12],[[[106,[109,105]]],[[26,[24]]]],[[[106,[109,105]]],[[26,[24]]]],0,[[],12],[[24,87,228],26],[[],13],[24,26],[[24,28],26],0,[24,[[12,[10]]]],[24,[[12,[10]]]],0,0,0,0,0,[[[0,[94,153]],[77,[87]]],[[26,[[243,[[77,[87]]]]]]]],[[[0,[94,153]],[77,[87]]],[[26,[[243,[[77,[87]]]]]]]],[[[0,[94,153]]],24],[[[0,[94,153]]],24],[[[0,[94,153]],87],24],0,0,0,0,0,0,[[],24],[[],250],[[],250],[10,88],[153,227],[153,227],[153,11],[153,11],[153,11],[153,11],[153,35],[153,35],[153,38],[153,38],[153,88],[153,88],0,[239,[[26,[24]]]],[239,[[26,[24]]]],[239,[[26,[24]]]],[[[62,[10]]],[[26,[24]]]],[[[62,[10]]],[[26,[24]]]],[[[62,[10]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],[[[51,[24]]],[[26,[24]]]],0,[[250,11,11],24],[[250,11,11],24],[[61,87],24],[[61,87],24],[[],24],[[],24],[[],24],[[],24],[61,24],[61,24],[[24,24],2],[[24,24],2],[[],[[26,[45]]]],[[],[[26,[45]]]],[[],24],[[],24],[[],[[26,[24]]]],[[],[[26,[24]]]],[[[251,[232]]],[[26,[24]]]],[[[251,[232]]],[[26,[24]]]],[[[251,[232]]],[[26,[24]]]],[[[251,[232]]],[[26,[24]]]],[11,24],[11,24],[[],24],[[],24],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],24],[[],24],[[],87],[[],87],[[],87],[[],87],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[87,[[26,[24]]]],[87,[[26,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[168,168],[[]],[[],168],[31,[[12,[168]]]],[[168,228],26],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,10,[36,[10]],228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,10,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,10,[36,[10]],228],12],[[168,87,228],12],[[168,10,87,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,228],12],[[168,10,228],12],[[168,2],2],[[168,168],2],[[168,2],2],[[],168],[[168,4],5],[2,168],[[]],[11,168],[[[29,[11]]],168],[11,168],[[[29,[2]]],168],[[[29,[11]]],168],[2,168],[168,11],[[]],[[],24],[168,2],[168,2],[168,2],[[],168],[[],168],[168],[[168,249],12],[[],250],[[],250],[168,2],[168,11],[168,11],[[]],[[],168],[[],12],[24,[[26,[168]]]],[24,[[26,[168]]]],[[],12],[[],13],0,[[184,167]],[[167,184]],[[167,167]],[[167,167]],[[167,167]],[[167,184]],[[167,167]],[[167,184]],[[]],[[]],0,[167,167],[[]],[[],167],[[184,167]],[[167,167]],[[167,167]],[[167,184]],[[167,167]],[[167,167]],[[167,184]],[[167,184]],[[167,184],2],[[167,38],2],[[167,184],2],[[167,167],2],[[167,4],5],[184,167],[[[29,[184]]],167],[184,167],[[]],[[],167],[[[29,[184]]],167],[[],167],[227,167],[166,167],[38,167],[167,166],[167,184],[[]],[[],24],[167,2],[184,2],[167,2],[167,2],[[184,167]],[[167,167]],[[167,184]],[[167,167]],[[167,184]],[[167,184]],[[167,167]],[[167,167]],[[],184],[[],167],[167],[167],[[38,38],167],[167,166],[[],250],[[],250],[[],250],[[],250],[[184,167]],[[167,184]],[[167,167]],[[167,167]],[[167,184]],[[167,167]],[[167,184]],[[167,167]],[94,167],[94,167],[184,227],[184,227],[167,227],[167,227],[[]],[24,[[26,[167]]]],[24,[[26,[167]]]],[[],12],[[],12],[[],13],0,[166,166],[[166,38]],[[166,166]],[[166,166]],[[166,166]],[[166,166]],[[166,38]],[[166,38]],[[]],[[]],[166,166],[[]],[[],166],[31,[[12,[166]]]],[[166,228],26],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,10,[36,[10]],228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,10,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,10,[36,[10]],228],12],[[166,87,228],12],[[166,10,87,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,228],12],[[166,10,228],12],[[166,166]],[[166,166]],[[166,38]],[[166,166]],[[166,166]],[[166,38]],[[166,38]],[[166,38],2],[[166,166],2],[[166,38],2],[[166,4],5],[[[29,[38]]],166],[[[29,[38]]],166],[38,166],[[]],[38,166],[166,38],[[]],[[],24],[166,2],[166,2],[166,2],[166,2],[166,2],[166,2],[[166,166]],[[166,166]],[[166,38]],[[166,38]],[[166,38]],[[166,166]],[[166,166]],[[],166],[166],[166],[[166,249],12],[166,166],[[166,166]],[[166,38]],[[166,166]],[[166,166]],[[166,166]],[[166,38]],[[166,38]],[94,166],[94,166],[[]],[24,[[26,[166]]]],[[],12],[24,[[26,[166]]]],[[],12],[[],13],0,[[169,11]],[[169,169]],[[169,169]],[[169,11]],[[169,169]],[[169,169]],[[169,11]],[[]],[[]],[169,169],[[]],[[],169],[31,[[12,[169]]]],[[169,228],26],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,10,[36,[10]],228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,10,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,10,[36,[10]],228],12],[[169,87,228],12],[[169,10,87,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,228],12],[[169,10,228],12],[[169,11]],[[169,169]],[[169,169]],[[169,11]],[[169,169]],[[169,11]],[[169,169]],[[169,169],2],[[169,11],2],[[169,11],2],[[169,4],5],[11,169],[[[29,[11]]],169],[[]],[11,169],[[[29,[11]]],169],[169,11],[[]],[[],24],[169,2],[[169,11]],[[169,169]],[[169,169]],[[169,169]],[[169,169]],[[169,11]],[[169,11]],[[],169],[169],[169],[169],[169],[[169,249],12],[[169,11]],[[169,169]],[[169,169]],[[169,169]],[[169,11]],[[169,169]],[[169,11]],[94,169],[94,169],[[]],[[],12],[24,[[26,[169]]]],[24,[[26,[169]]]],[[],12],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[252,26],[253,26],[254,26],[255,26],[256,26],[257,26],[258,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[259,2],26],[[259,[36,[35]]],26],[[259,55],26],[[252,[0,[153,260]]],26],[[253,[0,[153,260]]],26],[[259,261],26],[[259,38],26],[[254,[0,[153,260]]],26],[[255,[0,[153,260]]],26],[[257,10,[0,[153,260]]],26],[[258,10,[0,[153,260]]],26],[[259,262],26],[[259,11],26],[[259,39],26],[[259,263],26],[[256,[0,[153,260]]],26],[[259,[29,[87]]],26],[[259,10,[0,[153,260]]],26],[[259,10,61,10,[0,[153,260]]],26],[259,26],[[259,[29,[87]]],26],[[259,[0,[153,260]]],26],[[259,10],26],[[259,10,87],26],[[259,10,61,10,87],26],[[259,87],26],[[259,10,87],26],[[259,10,61,10,87],26],[[259,264],26],[[259,61],26],[[259,42],26],[[259,35],26],[259,26],[[259,10],26],[[259,10,61,10],26],[[256,[0,[153,260]]],26],[260,[[26,[24]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[143,30,265]]],[[26,[88]]]],[143],[[],61],[[[62,[10]]],266],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[29,[185]]]],[[],[[29,[50]]]],[[],[[29,[53]]]],[[],[[29,[233]]]],[[],[[29,[52]]]],[[],[[29,[237]]]],[[],[[29,[239]]]],[[],[[29,[241]]]],[[],[[29,[240]]]],[[],[[29,[232]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,88],[[61,74],24],0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[1,10,10],24],[231,24],[231,24],[[]],[[]],[231,24],[231,231],[[]],[[88,1],24],[231],[[88,2],35],[88,35],[[88,2],24],[[88,2],24],[87,169],[87,166],[87,168],[87,35],[87,167],[87,185],[[231,231],2],[[24,24,24],24],[[]],[24,[[12,[231,10]]]],[[24,2],231],[231,88],[[87,[36,[169]]],87],[[87,[36,[166]]],87],[[87,[36,[168]]],87],[[87,[36,[35]]],87],[[87,[36,[167]]],87],[88],[88],[[11,2,11],2],[[]],[[],24],[231,2],[[],168],[[],168],[[],168],[[],168],[[],87],[[10,10],24],[[[0,[196,72,60,246]]],231],[[10,10],24],[[[0,[196,72,60,246]]],231],[[10,10],24],[[[0,[196,72,60,246]]],231],[[10,10],24],[[10,10],24],[[[0,[196,72,60,246]]],231],[[10,10],24],0,[88,88],[2,24],[2,24],[2,24],[2,24],[[],2],[[],2],[[],2],[[],2],0,[88,24],[231],[[87,185]],[2,24],[2,24],[2,24],[[]],[[]],[[]],[[]],[24,[[26,[231]]]],[24,[[26,[231]]]],[[],12],[[],12],[[],13],[[24,24],24],[[24,24,24,11,11],24],0,[236,24],[236,24],[[]],[[]],[236,236],[[]],[[],236],[236],[236],[[236,87],167],[[236,236],2],[[236,4],5],[[]],[74,236],[24,[[12,[236,10]]]],[74,236],[74,236],[236,88],[[236,87,[36,[167]]],87],[[]],[[],24],[236,94],[236,94],[87,236],0,[[]],[24,[[26,[236]]]],[[],12],[24,[[26,[236]]]],[[],12],[[],13],0,0,[267,24],[267,24],[[]],[[]],[[[267,[60]]],[[267,[60]]]],[[]],[[[267,[71]],[267,[71]]],2],[[[267,[72]],4],5],[[]],[267,88],[[]],[[],[[26,[267]]]],0,0,[[]],[[],12],[24,[[26,[267]]]],[24,[[26,[267]]]],[268,[[26,[267]]]],[[],12],[[],13],0,[242,24],[242,24],[[]],[[]],[242,242],[[]],[[],242],[242],[242],[31,[[12,[242]]]],[[242,87],166],[[242,242],2],[[242,4],5],[[]],[74,242],[24,[[12,[242,10]]]],[74,242],[74,242],[242,88],[[242,87,[36,[166]]],87],[[]],[[],24],[242,168],[242,94],[242,94],[87,242],[242,168],0,[[242,249],12],[[242,87,166]],[[]],[24,[[26,[242]]]],[24,[[26,[242]]]],[[],12],[[],12],[[],13],0,0,[50,24],[50,24],[[]],[[]],[[]],[[]],[50,50],[269,269],[[]],[[]],[50,11],[[50,50],2],[[50,4],5],[[269,4],5],[[]],[[]],[[50,74],50],[24,[[12,[50,10]]]],[50,88],0,[[]],[[]],[[]],[[],24],[50,269],[[50,[51,[24]]],[[26,[24]]]],[50,94],[[50,87],50],[50,50],[269,29],0,[50,[[29,[50]]]],0,[[50,249],12],[[50,11],50],[[50,[51,[24]],[51,[24]]]],[[50,50],50],[[]],[[]],[[],12],[24,[[26,[50]]]],[24,[[26,[50]]]],[[],12],[[],12],[[],12],[[],13],[[],13],0,[53,24],[53,24],[[]],[[]],[53,53],[[]],[[],53],[[53,53],2],[[53,4],5],[[]],[24,[[12,[53,10]]]],[74,53],[53,88],[[]],[[],24],[[],53],0,[[53,249],12],[[]],[24,[[26,[53]]]],[[],12],[24,[[26,[53]]]],[[],12],[[],13],[53,229],0,[[[247,[[0,[246,72]]]]],[[0,[246,72]]]],[[[247,[[0,[246,72]]]]],[[0,[246,72]]]],[[[247,[72]]],24],[[[247,[72]]],24],[[]],[[]],[[[247,[[0,[60,72]]]]],[[247,[[0,[60,72]]]]]],[[]],[[[247,[72]]]],[[[247,[72]]]],[[[247,[[0,[71,72]]]],[247,[[0,[71,72]]]]],2],[[[247,[72]],4],5],[[]],[[[247,[72]]],88],[[]],[[],24],0,[[[0,[246,72]]],[[247,[[0,[246,72]]]]]],[[[247,[[0,[246,72]]]]],24],0,[[[247,[[0,[246,72]]]]],24],[[]],[24,[[26,[[247,[[0,[246,72]]]]]]]],[24,[[26,[[247,[[0,[246,72]]]]]]]],[[],12],[[],12],[[],13],0,[233,24],[233,24],[233,[[29,[24]]]],[[]],[[]],[[233,239],[[26,[24]]]],[233,233],[[]],[233,[[29,[50]]]],[[233,233],2],[[233,4],5],[233,[[29,[239]]]],[[]],[[239,52,50],[[26,[233]]]],[24,[[12,[233,10]]]],[233,88],[[]],[[],24],0,[[233,249],12],[[]],[24,[[26,[233]]]],[24,[[26,[233]]]],[[],12],[[],12],[[],13],0,[226,24],[226,24],[[]],[[]],[226,226],[[]],[[],226],[226],[226],[31,[[12,[226]]]],[[226,87],169],[[226,226],2],[[226,4],5],[[]],[74,226],[24,[[12,[226,10]]]],[74,226],[74,226],[226,88],[[226,87,[36,[169]]],87],[[]],[[],24],[226,168],[226,94],[226,94],[87,226],[226,168],0,[[226,249],12],[[226,87,169]],[[]],[[],12],[24,[[26,[226]]]],[24,[[26,[226]]]],[[],12],[[],13],0,[52,24],[52,24],[[]],[[]],[52,52],[[]],[[52,52],2],[[52,4],5],[[]],[24,[[12,[52,10]]]],[74,52],[52,88],[[]],[[],24],[52,244],[52,94],0,[[52,249],12],[[]],[[],12],[24,[[26,[52]]]],[24,[[26,[52]]]],[[],12],[[],13],[52,94],0,0,0,0,[237,24],[237,24],[237,[[36,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[237,237],[229,229],[[]],[[]],[[],237],[[],229],[237],[[237,87],[[26,[24]]]],[[237,237],2],[[237,4],5],[[229,4],5],[[]],[[]],[[]],[[[270,[[51,[45]],24]]],[[26,[237]]]],[74,237],[[74,74],[[26,[237]]]],[74,237],[[24,87,87],229],[24,[[12,[237,10]]]],[24,[[12,[229,10]]]],[74,237],[237,88],0,[[]],[[]],[[]],[237,[[270,[10,24]]]],[237],[[]],[[],24],[[],24],[237,271],[[],45],[229,87],0,[[],87],[87,237],[[],229],[229,29],[[229,87],29],0,0,[[237,249],12],[[237,87,24],26],[229],[[]],[[]],[24,[[26,[[272,[[7,[[219,[24]]]]]]]]]],[24,[[26,[[272,[[7,[[219,[24]]]]]]]]]],[[],12],[24,[[26,[237]]]],[24,[[26,[237]]]],[[],12],[24,[[26,[229]]]],[[],12],[24,[[26,[229]]]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],24],[237,229],0,[248,24],[248,24],[[]],[[]],[248,248],[[]],[[],248],[248],[248],[31,[[12,[248]]]],[[248,87],168],[[248,248],2],[[248,4],5],[[]],[74,248],[24,[[12,[248,10]]]],[74,248],[74,248],[248,88],[[248,87,[36,[168]]],87],[[]],[[],24],[248,94],[248,94],[87,248],0,[[248,249],12],[[248,87,168]],[[]],[24,[[26,[248]]]],[[],12],[24,[[26,[248]]]],[[],12],[[],13],0,0,0,0,0,0,0,0,[[],[[29,[273]]]],[[],[[29,[274]]]],[[],[[29,[275]]]],[[]],[[]],[243,36],0,[243],[243],0,[[[243,[71,71]],[243,[71,71]]],2],[[[243,[72,72]],4],5],[[]],[24,243],[24,[[12,[275,10]]]],[24,[[12,[[243,[[77,[87]]]],10]]]],[[[243,[[77,[87]]]],[77,[87]]]],[[[243,[[77,[87]]]],[77,[87]]]],[[]],[[],24],[[[274,[235]]],87],[[[275,[235]]],87],[[[243,[235,[77,[87]]]]],87],[[[243,[235,[77,[87]]]]],87],[[87,108],[[273,[235]]]],[[87,108],[[243,[235,[77,[87]]]]]],[[87,87,[0,[60,108]]],[[274,[235]]]],[[87,87,[0,[60,108]]],[[243,[235,[77,[87]]]]]],[[87,87,87,[0,[60,108]]],[[275,[235]]]],[[87,87,87,[0,[60,108]]],[[243,[235,[77,[87]]]]]],[[[273,[235]]],87],[[[274,[235]]],87],[[[275,[235]]],87],[[[243,[235,[77,[87]]]]],87],[[[243,[235,[77,[87]]]]],87],[[[243,[235,[77,[87]]]]],87],[[[275,[235]]],87],[[[243,[235,[77,[87]]]]],87],[[],87],[[[243,[[77,[87]]]],[77,[87]]],87],[[[243,[[77,[87]]]],[77,[87]]],87],[[[243,[[77,[87]]]],[77,[87]]],87],0,[24,[[26,[273]]]],[24,[[26,[274]]]],[24,[[26,[275]]]],[[],12],[[],12],[[],13],0,0,0,[[]],[[]],[[[230,[60]]],[[230,[60]]]],[[]],[[[230,[71]],[230,[71]]],2],[[[230,[72]],4],5],[[[29,[[51,[24]]]]],[[230,[[51,[24]]]]]],[[]],[24,[[12,[[230,[276]],10]]]],[[]],[[[230,[[219,[24]]]]],[[29,[[219,[24]]]]]],[[],24],[[230,143],230],[[]],[24,[[12,[[230,[[219,[24]]]]]]]],[24,[[12,[[230,[[219,[24]]]]]]]],[[],12],[[],12],[[],13],0,0,[239,24],[239,24],[[]],[[]],[[]],[[]],[239,239],[244,244],[[]],[[]],[[],239],[[],244],[[239,239],2],[[239,4],5],[[244,4],5],[[]],[[],239],[[]],[74,239],[24,[[12,[239,10]]]],[239,88],[[]],[[]],[239],[[]],[[],24],[[],24],[239,244],0,[239,94],[[],239],[[],244],[244,29],0,0,[[239,249],12],[[]],[[]],[24,[[26,[239]]]],[24,[[26,[239]]]],[[],12],[24,[[26,[244]]]],[[],12],[[],12],[[],12],[[],13],[[],13],[239,94],0,[234,24],[234,24],[[]],[[]],[234,234],[[]],[[234,234],2],[[234,4],5],[[]],[24,[[12,[234,10]]]],[10,[[26,[234]]]],[234,88],[[]],[[],24],0,[[234,249],12],[[]],[24,[[26,[234]]]],[[],12],[24,[[26,[234]]]],[[],12],[[],13],0,[241,24],[241,24],[[]],[[]],[241,241],[[]],[241,24],[241,50],[[241,241],2],[241,[[26,[24]]]],[[241,4],5],[[]],[[24,50],[[26,[241]]]],[24,[[12,[241,10]]]],[241,88],[[]],[[],24],0,[241,11],[[241,249],12],[[]],[[],12],[24,[[26,[241]]]],[24,[[26,[241]]]],[[],12],[[],13],[241,24],0,[240,24],[240,24],[240,[[36,[35]]]],[[]],[[]],[240,240],[[]],[[240,240],2],[[240,4],5],[[]],[[[36,[35]]],240],[24,[[12,[240,10]]]],[240,88],[[]],[[],24],[87,240],0,[[240,249],12],[[]],[24,[[26,[240]]]],[24,[[26,[240]]]],[[],12],[[],12],[[],13],0,[185,10],[185,24],[185,24],[185,10],[[]],[[]],[185,185],[[]],[185],[31,[[12,[185]]]],[[185,228],26],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,10,[36,[10]],228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],26],[[185,228],12],[[185,228],12],[[185,10,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,10,[36,[10]],228],12],[[185,87,228],12],[[185,10,87,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,228],12],[[185,10,228],12],[[185,[62,[10]]],2],[[185,10],2],[[185,4],5],[[185,4],5],[10,185],[45,185],[[]],[24,[[12,[185,10]]]],[10,185],[185,88],[[]],[[],24],[185,2],[[],185],0,[[185,249],12],[88,10],[[]],[[],45],[24,[[26,[185]]]],[[],12],[24,[[26,[185]]]],[[],12],[[],13],0,[238,24],[238,24],[[]],[[]],[238,238],[[]],[[238,238],2],[[238,4],5],[[]],[24,[[12,[238,10]]]],[238,88],[238,[[29,[24]]]],[238,2],[[]],[[],24],[10,[[26,[238]]]],0,[[238,249],12],[[10,239,24],[[26,[238]]]],[[238,[51,[24]],[51,[24]]],[[26,[238]]]],[[]],[24,[[26,[238]]]],[[],12],[24,[[26,[238]]]],[[],12],[[],13],0,[245,24],[245,24],[245,[[36,[185]]]],[[]],[[]],[245,245],[[]],[[],245],[245],[31,[[12,[245]]]],[[245,87],185],[[245,245],2],[[245,4],5],[[]],[[[62,[10]]],245],[74,245],[24,[[12,[245,10]]]],[74,245],[245,88],[[]],[[],24],[245,168],[245,94],[87,245],[245,168],0,[[245,87,185]],[[]],[[],12],[24,[[26,[245]]]],[24,[[26,[245]]]],[[],12],[[],13],0,[232,24],[232,24],[232,10],[[],232],[[]],[[]],[[],232],[[],232],[[],232],[[],232],[232,232],[[]],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[232,232],2],[[232,4],5],[[]],[10,232],[24,[[12,[232,10]]]],[88,232],[[[62,[10]]],232],[232,88],[[]],[[],24],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],[[],232],0,[[],232],[[],232],[[232,249],12],[[],232],[[],232],[[],232],[[]],[[],232],[24,[[26,[232]]]],[24,[[26,[232]]]],[[],12],[[],12],[[],232],[[],13],[[],232]],"c":[1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1488,1926,1927,1928,1929,2130,2168,2323,2392,2393,2399,2598,2607],"p":[[4,"Rtype"],[15,"bool"],[4,"Rany"],[3,"Formatter"],[6,"Result"],[3,"CString"],[3,"Vec"],[3,"R_CallMethodDef"],[3,"Func"],[15,"str"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"RintVisitor"],[3,"RfloatVisitor"],[3,"RboolVisitor"],[3,"RobjVisitor"],[3,"IntegersVisitor"],[3,"DoublesVisitor"],[3,"LogicalsVisitor"],[3,"StringsVisitor"],[3,"RstrVisitor"],[3,"Error"],[3,"Robj"],[8,"Deserialize"],[6,"Result"],[3,"ListGetter"],[8,"DeserializeSeed"],[4,"Option"],[8,"Copy"],[8,"Deserializer"],[3,"SliceGetter"],[3,"NamedListGetter"],[8,"Error"],[15,"u8"],[15,"slice"],[8,"EnumAccess"],[15,"f64"],[15,"i64"],[8,"MapAccess"],[8,"SeqAccess"],[15,"u64"],[8,"Display"],[4,"Error"],[3,"String"],[4,"Infallible"],[8,"Error"],[3,"Box"],[3,"Demand"],[3,"Environment"],[8,"Into"],[3,"Language"],[3,"Expressions"],[3,"Device"],[15,"char"],[3,"Context"],[3,"TextMetric"],[3,"R_GE_gcontext"],[3,"Pattern"],[8,"Clone"],[15,"u32"],[8,"AsRef"],[3,"Raster"],[4,"LineEnd"],[4,"LineJoin"],[4,"LineType"],[4,"Unit"],[4,"FontFace"],[3,"Color"],[6,"pGEcontext"],[8,"PartialEq"],[8,"Debug"],[6,"pGEDevDesc"],[8,"IntoIterator"],[6,"GEUnit"],[3,"DeviceDescriptor"],[15,"array"],[6,"DevDesc"],[8,"Read"],[4,"PstreamFormat"],[3,"ReadHook"],[3,"Path"],[8,"Write"],[3,"WriteHook"],[3,"OutStream"],[3,"StrIter"],[15,"usize"],[6,"SEXP"],[15,"isize"],[3,"Arg"],[3,"Impl"],[3,"Metadata"],[3,"RArg"],[8,"Iterator"],[6,"Result"],[3,"EXTENDR_NA_STRING"],[3,"Ownership"],[3,"OWNERSHIP"],[3,"Mutex"],[8,"IntoDimension"],[3,"Dim"],[3,"IxDynImpl"],[8,"DataMut"],[8,"RawData"],[8,"Dimension"],[3,"ArrayBase"],[3,"Axis"],[8,"FnMut"],[8,"Data"],[8,"DataOwned"],[8,"DimMax"],[8,"ScalarOperand"],[8,"AddAssign"],[4,"Either"],[3,"Zip"],[8,"IntoNdProducer"],[3,"OwnedRepr"],[8,"RemoveAxis"],[3,"ViewRepr"],[3,"ShapeError"],[8,"FixedInitializer"],[3,"CStr"],[8,"AsMut"],[3,"OsStr"],[8,"RawDataMut"],[3,"Pin"],[4,"SliceInfoElem"],[3,"SliceInfo"],[4,"CowRepr"],[3,"MathCell"],[8,"RawDataSubst"],[3,"Axes"],[3,"AxisDescription"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"Windows"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShapeBuilder"],[8,"FnOnce"],[3,"RawViewRepr"],[8,"RawDataClone"],[4,"ErrorKind"],[4,"Order"],[3,"Shape"],[3,"StrideShape"],[3,"Slice"],[3,"NewAxis"],[4,"FoldWhile"],[8,"Sized"],[3,"OwnedArcRepr"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[3,"Lanes"],[3,"LanesMut"],[8,"BufRead"],[8,"Default"],[8,"Deref"],[8,"DerefMut"],[8,"DivAssign"],[8,"LinalgScalar"],[3,"Rfloat"],[3,"Rcplx"],[3,"Rbool"],[3,"Rint"],[3,"ExactChunks"],[3,"ExactChunksMut"],[8,"Extend"],[3,"Error"],[3,"Global"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeFull"],[3,"RangeToInclusive"],[3,"RangeInclusive"],[3,"Range"],[8,"Zero"],[6,"ArrayView1"],[6,"ArrayView2"],[6,"c64"],[3,"Rstr"],[8,"PartialOrd"],[8,"Float"],[8,"NdIndex"],[8,"Hash"],[8,"Hasher"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Indices"],[3,"Iter"],[3,"IterMut"],[8,"ExactSizeIterator"],[8,"FromPrimitive"],[8,"Add"],[8,"Div"],[19,"MaybeUninit"],[8,"MulAssign"],[8,"MultiSliceArg"],[8,"DoubleEndedIterator"],[8,"Future"],[3,"Context"],[4,"Poll"],[8,"Mul"],[8,"One"],[8,"RemAssign"],[8,"DataShared"],[8,"Seek"],[4,"SeekFrom"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SliceArg"],[3,"Complex"],[8,"SubAssign"],[8,"ShapeArg"],[8,"TryFrom"],[3,"Arguments"],[3,"ExactChunksIter"],[3,"LanesIter"],[3,"IndicesIter"],[3,"LanesIterMut"],[3,"ExactChunksIterMut"],[3,"Integers"],[3,"Rcomplex"],[8,"Visitor"],[3,"ListIter"],[4,"Nullable"],[3,"Altrep"],[3,"Symbol"],[3,"Function"],[3,"Primitive"],[8,"ToVectorValue"],[3,"Complexes"],[3,"List"],[3,"S4"],[3,"Pairlist"],[3,"Raw"],[3,"Promise"],[3,"Doubles"],[3,"RArray"],[3,"PairlistIter"],[3,"Strings"],[8,"Any"],[3,"ExternalPtr"],[3,"Logicals"],[8,"Serializer"],[6,"SEXPTYPE"],[8,"TryInto"],[3,"SerializeSeq"],[3,"SerializeTuple"],[3,"SerializeTupleStruct"],[3,"SerializeTupleVariant"],[3,"SerializeMap"],[3,"SerializeStruct"],[3,"SerializeStructVariant"],[3,"RobjSerializer"],[8,"Serialize"],[15,"f32"],[15,"i16"],[15,"i8"],[15,"u16"],[8,"UnwindSafe"],[15,"never"],[3,"Dataframe"],[8,"IntoDataFrameRow"],[3,"EnvIter"],[3,"HashMap"],[6,"NamedListIter"],[3,"FromList"],[6,"RColumn"],[6,"RMatrix"],[6,"RMatrix3D"],[8,"FromRobj"],[4,"DevCapRaster"],[4,"CanHAdjOption"],[4,"DevCapTransparentBg"],[4,"DevCapTransparency"],[4,"DevCapCapture"],[4,"DevCapLocator"],[8,"DeviceDriver"],[4,"ClippingStrategy"],[8,"Load"],[8,"Save"],[8,"AsStrIter"],[8,"CanBeNA"],[3,"Object"],[8,"NdProducer"],[8,"DimAdd"],[8,"Index"],[8,"IndexLonger"],[8,"AssignElem"],[13,"Slice"],[8,"Dot"],[8,"Types"],[8,"GetSexp"],[8,"AsTypedSlice"],[8,"Slices"],[8,"Attributes"],[8,"Eval"],[8,"IntoRobj"],[8,"Length"],[8,"RobjItertools"],[8,"Operators"],[8,"Rinternals"],[8,"Conversions"],[8,"SymPair"],[8,"AltrepImpl"],[8,"AltIntegerImpl"],[8,"AltRealImpl"],[8,"AltLogicalImpl"],[8,"AltRawImpl"],[8,"AltComplexImpl"],[8,"AltStringImpl"],[8,"KeyValue"],[8,"MatrixConversions"],[8,"Offset"]],"a":{"&*":[8],"*":[8,9],"[":[1269],"[]":[1269],"]":[1269]}},\
"extendr_engine":{"doc":"A singleton instance of the R interpreter.","t":"HOFF","n":["START_R","cstr_mut","end_r","start_r"],"q":[[0,"extendr_engine"]],"d":["","","Close down the R interpreter. Note you won’t be able to …",""],"i":[0,0,0,0],"f":[0,0,[[]],[[]]],"c":[],"p":[]},\
"extendr_macros":{"doc":"Macros for generating wrappers for rust functions.","t":"YYAOOYAOAXAAAOAOAAOAAFDLLFMLLLMLLLLFFFFFDLLFLMLMLMLLLLMFFFFDLLLLLLMLLLLDRRLLLLLFFFLFFMMFFFFFLLLFM","n":["IntoDataFrameRow","IntoRobj","R","R","Rraw","TryFromRobj","call","call","dataframe","extendr","extendr_function","extendr_impl","extendr_module","extendr_module","list","list","list_struct","pairlist","pairlist","pairs","wrappers","R","Call","borrow","borrow_mut","call","caller","fmt","from","into","pairs","parse","try_from","try_into","type_id","derive_into_dataframe","parse_struct","extendr_function","parse_options","extendr_impl","Module","borrow","borrow_mut","extendr_module","fmt","fnnames","from","implnames","into","modname","parse","try_from","try_into","type_id","usenames","list","derive_into_robj","derive_try_from_robj","pairlist","Pairs","borrow","borrow_mut","fmt","from","into","names_and_values","pairs","parse","try_from","try_into","type_id","ExtendrOptions","META_PREFIX","WRAP_PREFIX","borrow","borrow_mut","default","fmt","from","get_doc_string","get_named_lit","get_return_type","into","make_function_wrappers","mangled_type_name","mod_name","r_name","sanitize_identifier","translate_actual","translate_formal","translate_meta_arg","translate_to_robj","try_from","try_into","type_id","type_name","use_try_from"],"q":[[0,"extendr_macros"],[21,"extendr_macros::R"],[22,"extendr_macros::call"],[35,"extendr_macros::dataframe"],[37,"extendr_macros::extendr_function"],[39,"extendr_macros::extendr_impl"],[40,"extendr_macros::extendr_module"],[55,"extendr_macros::list"],[56,"extendr_macros::list_struct"],[58,"extendr_macros::pairlist"],[59,"extendr_macros::pairs"],[71,"extendr_macros::wrappers"]],"d":["Enable the construction of dataframes from arrays of …","Derives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …","","Execute R code by parsing and evaluating tokens.","Execute R code by parsing and evaluating tokens but …","Derives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …","","Call a function or primitive defined by a text expression …","","","","","","Define a module and export symbols to R Example:","","Create a List R object from a list of name-value pairs.","","","Create a Pairlist R object from a list of name-value pairs.","Internal module for parsing R-like variadic arguments.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Generate bindings for a single function.","Parse a set of attribute arguments for #[extendr(opts…)]","Handle trait implementations.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Implementation of the IntoRobj macro. Refer to the …","Implementation of the TryFromRobj macro. Refer to the …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Convert <code>SEXP</code> arguments into <code>Robj</code>. This maintains the …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,18,18,0,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,0,0,0,16,16,16,16,16,0,0,0,16,0,0,16,16,0,0,0,0,0,16,16,16,0,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,[[]],[[]],[3,3],0,[[4,5],6],[[]],[[]],0,[7,[[8,[4]]]],[[],9],[[],9],[[],10],[3,3],[[11,12],3],[[[14,[13]],15],3],[[16,13]],[17,3],0,[[]],[[]],[3,3],[[18,5],6],0,[[]],0,[[]],0,[7,[[8,[18]]]],[[],9],[[],9],[[],10],0,[3,3],[3,3],[3,3],[3,3],0,[[]],[[]],[[19,5],6],[[]],[[]],[19,14],0,[7,[[8,[19]]]],[[],9],[[],9],[[],10],0,0,0,[[]],[[]],[[],16],[[16,5],6],[[]],[[[21,[20]]],22],[[[14,[20]],23],[[24,[22]]]],[25,22],[[]],[[16,[14,[15]],23,[21,[20]],25,[24,[26]]]],[26,22],0,0,[27,27],[[16,28],[[24,[29]]]],[[28,[24,[26]]],28],[[28,[24,[26]]],29],[28,30],[[],9],[[],9],[[],10],[26,22],0],"c":[],"p":[[3,"TokenStream"],[15,"bool"],[3,"TokenStream"],[3,"Call"],[3,"Formatter"],[6,"Result"],[6,"ParseStream"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"DeriveInput"],[3,"DataStruct"],[4,"NestedMeta"],[3,"Vec"],[3,"ItemFn"],[3,"ExtendrOptions"],[3,"ItemImpl"],[3,"Module"],[3,"Pairs"],[3,"Attribute"],[15,"slice"],[3,"String"],[15,"str"],[4,"Option"],[3,"Signature"],[4,"Type"],[3,"Ident"],[4,"FnArg"],[4,"Expr"],[4,"Stmt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
