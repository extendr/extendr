name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

# cargo error handling is wrapped by ci-cargo, for simplicity and better logging.
# To use ci-cargo in a step, source ci-cargo.ps1 (using `. ./ci-cargo.ps`, note the extra dot in front).
# ci-cargo does not handle correctly -- separator, so wrap it in quotes ('--')
# A special named parameter called `ActionName` can be used to set the name of current ci-cargo action,
# used as `ci-cargo .... -ActionName "Called for documentation purposes"`.
jobs:
  # All tests under this job are run with pre-computed libR-sys bindings.
  tests_no_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows jobs with unspecific Rust architecture build for both i686 and x86_64 
          # R integration tests are also executed for both architectures
          - {os: windows-latest, r: 'release', rust-version: 'stable-msvc'}
          # TODO: remove this when we drop suppoort for R 4.1. Since R 4.2 uses
          # a different toolchain than R 4.1, we need to test both.
          - {os: windows-latest, r: 'devel',   rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'release', rust-version: 'nightly-msvc'}
          # - {os: windows-latest, r: 'devel', rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'oldrel', rust-version: 'stable-msvc'}

          - {os: macOS-latest,   r: 'release', rust-version: 'stable'}
          # - {os: macOS-latest,   r: 'release', rust-version: 'nightly'}
          # - {os: macOS-latest,   r: 'devel', rust-version: 'stable'}
          # - {os: macOS-latest,   r: 'oldrel', rust-version: 'stable'}

          - {os: ubuntu-20.04,   r: 'release', rust-version: 'stable', check_fmt: true}
          - {os: ubuntu-20.04,   r: 'release', rust-version: 'nightly'}
          # R-devel requires LD_LIBRARY_PATH
          - {os: ubuntu-20.04,   r: 'devel',   rust-version: 'stable'}
          - {os: ubuntu-20.04,   r: 'oldrel',  rust-version: 'stable'}



    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

      # This environment variable enables support for pseudo multi-target cargo builds.
      # Current stable Rust does not support multi-targeting,
      # see https://github.com/rust-lang/cargo/issues/8176
      # The variable is treated as a comma-separated list of valid Rust targets.
      # 'default' value emits no '--target' flag.
      # E.g.: BUILD_TARGETS=i686-pc-windows-gnu,x86_64-pc-windows-gnu builds two times,
      # each time providing '--target=*-pc-windows-gnu' flag to cargo.
      BUILD_TARGETS: default
    
    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true
          components: rustfmt, clippy
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true
      
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
      
      # All configurations for Windows go here
      # If 'rust-version' has no architecture id, both if conditions are executed
      # Otherwise, only one condition is met
      # $targets variable is used to build targets list used later for cargo build/test
      # The order of if blocks favors x86_64 over i686 paths, which is optimal for multi-targeting
      - name: Configure Windows (R-release)
        if: startsWith(runner.os, 'Windows') && matrix.config.r != 'devel'
        # 1. Add rust target
        # 2. Add target name to the $targets variable
        # 3. Add mingw32/mingw64 bin folders to PATH
        # 4. Add R x64/i386 folders to PATH
        run: |
          $targets=@()
          if ($env:RUST_TOOLCHAIN -notlike "*x86_64*") {
            rustup target add i686-pc-windows-gnu ;
            $targets+="i686-pc-windows-gnu"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -notlike "*i686*") {
            rustup target add x86_64-pc-windows-gnu ;
            $targets+="x86_64-pc-windows-gnu"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          echo "BUILD_TARGETS=$($targets -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      - name: Configure Windows (R-devel)
        if: startsWith(runner.os, 'Windows') && matrix.config.r == 'devel'
        run: |
          rustup target add x86_64-pc-windows-gnu ;
          # Use Rtools's UCRT toolchain rather than MSYS2. Note that the setting needs to be modified when Rtools42 becomes official.
          echo "${env:RTOOLS40_HOME}\ucrt64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          echo "BUILD_TARGETS=x86_64-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}


      # This is required for ubuntu r-devel
      # 'Del alias:R' removes 'R' alias which prevents running R 
      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Check code formatting. As this doesn't depend on the platform, do this only on one platform.
      - name: Check code formatting
        if: matrix.config.check_fmt
        run: cargo fmt -- --check

      # For each target in the BUILD_TARGETS comma-separated list, run cargo build with appropriate target
      # Required by Windows builds, does not affect other platforms
      - name: Build
        run: |
          . ./ci-cargo.ps1
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            ci-cargo build $(if($target -ne 'default') {"--target=$target"} ) -ActionName "Building for $target target"
          }
      # For each target in the BUILD_TARGETS comma-separated list, run cargo test with appropriate target
      # Required by Windows builds, does not affect other platforms
      # ! ci-cargo requires '--' to be wrapped in quotes (passed as an explicit string)
      - name: Run tests
        run: |
          . ./ci-cargo.ps1
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            ci-cargo test $(if($target -ne 'default') {"--target=$target"} ) '--' --nocapture -ActionName "Testing for $target target"
          }

      # c.f. https://github.com/actions/checkout#checkout-multiple-repos-side-by-side
      - name: Obtain 'rextendr'
        uses: actions/checkout@v2
        with:
          repository: extendr/rextendr
          path: ./tests/rextendr

      - name: Install dependencies for extendrtests and rcmdcheck
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          working-directory: tests/extendrtests
          extra-packages: any::rcmdcheck

      - name: Install dependencies for rextendr
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          working-directory: tests/rextendr

      # Regex is used to inject absolute path into Cargo.toml
      - name: Configure R for integration testing
        run: |
          api_path <- normalizePath(file.path(getwd(), "extendr-api"), winslash = "/")
          toml_path <- file.path(getwd(), "tests", "extendrtests", "src", "rust", "Cargo.toml")
          lines <- readLines(toml_path)
          lines <- gsub(
            "(^\\s*extendr-api\\s*=\\s*\\{\\s*path\\s*=\\s*\")(.*?)(\"\\s*\\})",
            paste0("\\1", api_path, "\\3"),
            lines
          )
          writeLines(lines, toml_path)
        shell: Rscript {0}
        
      # Windows: modified PATH will launch 32-bit Rscript if the build targets only i686/i386, so no conflict will arise
      # Rust pseudo multi-targeting: R CMD CHECK receives an extra argument '--no-multiarch' if BUILD_TARGETS is not 'default' and does not contain any commas
      # To enable RStudio support, extendrtests should be installable from 'extendr/tests/extendrtests',
      # for this work directory should be modified and then reverted back
      - name: Run R integration tests using {extendrtests}
        id: extendrtests_check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          cat("::group::Checking 'extendrtests'\n")
          rcmdcheck::rcmdcheck(
            path = "tests/extendrtests", 
            args = c("--no-manual", "--as-cran", "--force-multiarch"),
            error_on = "warning", 
            check_dir = "extendrtests_check"
          )
          cat("::endgroup::\n")
        shell: Rscript {0}
        
      # With https://github.com/extendr/rextendr/pull/31
      # rextendr can be configured using environment variables.
      # 'patch.crates_io' is used to point libraries to local copies of
      # extendr-api and extendr-macros, so rextendr tests current version of extendr-*
      - name: Run R integration tests using {rextendr}
        id: rextendr_check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          cat("::group::Checking 'rextendr'\n")

          patch.crates_io <-
            paste(
              paste0(
                "extendr-api = { path = \"",
                normalizePath(file.path(getwd(), "extendr-api"), winslash = "/"),
                "\" }"),
              
              paste0(
                "extendr-macros = { path = \"",
                normalizePath(file.path(getwd(), "extendr-macros"), winslash = "/"),
                "\" }"),
              
              # uncomment this line when we need to depend on the dev version of libR-sys
              'libR-sys = { git = "https://github.com/extendr/libR-sys" }',
              
              sep = ";")
          
          Sys.setenv(REXTENDR_PATCH_CRATES_IO = patch.crates_io)
          rcmdcheck::rcmdcheck(
            path = "tests/rextendr", 
            args = c("--no-manual", "--as-cran", "--force-multiarch"), 
            error_on = "warning", 
            check_dir = "rextendr_check")
          
          cat("::endgroup::\n")
        shell: Rscript {0}


      - name: Upload extendrtests check results from R integration tests
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: extendrtests-${{ matrix.config.os }}-R-${{ matrix.config.r }}-rust-${{ matrix.config.rust-version }}
          path: extendrtests_check

      - name: Upload rextendr check results from R integration tests
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: rextendr-${{ matrix.config.os }}-R-${{ matrix.config.r }}-rust-${{ matrix.config.rust-version }}
          path: rextendr_check


  # All tests under this job are run with R devel and freshly generated bindings.
  # Run bindgen tests without cross-compilation.
  # Cross-compilation prevents from running doc tests
  # if toolchain does not match target (Windows x86_64/i686 case), see
  #  > https://github.com/rust-lang/rust/issues/64245
  #  > https://github.com/rust-lang/cargo/issues/7040
  bindgen_no_cross_compile:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} w/ bindgen (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04,   r: 'devel', rust-version: 'stable'}
          - {os: macOS-latest,   r: 'devel', rust-version: 'stable'}
          # This will be changed back to `R-devel` as soon as R drops 32-bit support and we no longer need cross-compilation
          - {os: windows-latest, r: 'release', rust-version: 'nightly-msvc', rust-targets: ['x86_64-pc-windows-gnu', 'i686-pc-windows-gnu'], extra-args: ['-Zdoctest-xcompile']}


    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      # 1. Update rustup
      # 2. For each target add respective toolchain &
      #    update target for that toolchain
      - name: Set up Rust
        run: |
          echo "::group::Updating system's 'rustup'"
          rustup update
          echo "::endgroup::"
          $targets = $env:RUST_TARGETS.Split(',')
          foreach ($target in $targets) {
            echo "::group::Setting up $env:RUST_TOOLCHAIN $target"
            if ($target -eq '') {
              rustup toolchain add $env:RUST_TOOLCHAIN
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
              rustup default $env:RUST_TOOLCHAIN
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
            }
            else {
              rustup toolchain add "$env:RUST_TOOLCHAIN"
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
              rustup target add $target --toolchain "$env:RUST_TOOLCHAIN"
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
            }
            echo "::endgroup::"
          }

        env: 
          RUST_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true
          windows-path-include-mingw: false
      
      # 1. Inspect targets. If empty, assume 'x86_64' arch
      # 2. Install msys2 packages (--needed skips already installed)
      # 3. Add msys2/mingw{bits}/bin to path
      # 4. Add R/{arch}/bin to path
      # 5. Create array of correct (arch-dependent) paths to 'libclang.dll', export as env variable
      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        run: |

          echo "::group::Setting up x86_64"
          C:\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm  --needed mingw-w64-x86_64-clang mingw-w64-x86_64-toolchain"
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "::endgroup::"
          

          echo "::group::Setting up i686"
          C:\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm --needed mingw32/mingw-w64-i686-clang mingw-w64-i686-toolchain"  
          echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "::endgroup::"


      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 1. Retrieve targets
      # 2. Retrieve 'libcalng' paths
      # 3. For each target run
      # 3.1 Select correct $target & $toolchain
      # 3.x Run build commands, checking for errors, providing explicit toolchain & target
      - name: Build
        run: |
          . ./ci-cargo.ps1
          $targets = $env:BUILD_TARGETS.Split(',')
          $toolchain = $env:RUST_TOOLCHAIN
          $itt = 0..($targets.Length - 1)
          foreach($i in $itt) {
            if ($targets[$i] -eq "") {
              $target = 'default'
            }
            else {
              $target = $targets[$i]
            }

            ci-cargo +$toolchain build --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -ActionName "Build extendr-api for $toolchain"
         
            ci-cargo +$toolchain build --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -ActionName "Build extendr-engine for $toolchain"
            
          }
        env: 
          BUILD_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      # Identical to the build process, but running more test commands
      # ! ci-cargo requires '--' to be wrapped in quotes (passed as an explicit string)
      - name: Run tests
        run: |
          . ./ci-cargo.ps1
          $targets = $env:BUILD_TARGETS.Split(',')
          $toolchain = $env:RUST_TOOLCHAIN
          $itt = 0..($targets.Length - 1)
          foreach($i in $itt) {
            if ($targets[$i] -eq "") {
              $target = 'default'
            }
            else {
              $target = $targets[$i]
            }

            ci-cargo +$toolchain test --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) $env:EXTRA_ARGS '--' --nocapture -ActionName "Test extendr-engine \w tests-all for $target target"

            # TODO: --test-threads=1 is needed because graphics-related tests need to run in serial
            ci-cargo +$toolchain test --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) $env:EXTRA_ARGS '--' --nocapture --test-threads=1 -ActionName "Test extendr-api \w tests-all for $target target"

            ci-cargo +$toolchain test --manifest-path extendr-api/Cargo.toml --features tests-minimal $(if($target -ne 'default') {"--target=$target"} ) $env:EXTRA_ARGS '--' --nocapture -ActionName "Test extendr-api \w tests-minimal for $target target"
                      
            ci-cargo +$toolchain test --manifest-path extendr-macros/Cargo.toml  $(if($target -ne 'default') {"--target=$target"} ) $env:EXTRA_ARGS '--' --nocapture -ActionName "Test extendr-macros for $target target"
            
          }
        env: 
          BUILD_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}
          EXTRA_ARGS: ${{ join(matrix.config.extra-args, ',') }}
