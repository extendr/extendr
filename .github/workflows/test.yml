name: Tests

on: [push, pull_request]

jobs:
  test_linux:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04,   r: 'release', rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04,   r: 'release', rust-version: 'beta', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04,   r: 'devel',   rust-version: 'nightly', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Build
        run: cargo build

      - name: Run tests
        run: cargo test -- --nocapture --test-threads=1

      - name: Install R dependencies for integration testing
        run: |
          install.packages(c('rmarkdown', 'testthat'))
        shell: Rscript {0}

      - name: Run R integration tests
        run: |
          R CMD build tests/extendrtests
          R CMD check extendrtests*.tar.gz

  test_macos:
    name: Run tests (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        rust-version: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
      - name: Install dependencies
        run: brew install llvm r
      - name: Set dynamic environment variables
        run: echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
      - name: Build
        run: cargo build
      - name: Run tests
        run: cargo test -- --nocapture --test-threads=1

  test_windows:
    name: Run tests (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        rust-version: [stable-gnu]
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          path-type: inherit
          release: false
          update: false
          install: >-
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-headers-git
            mingw-w64-x86_64-make
      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          target: x86_64-pc-windows-gnu
          default: true
          components: rustfmt, clippy
      - name: Build
        run: |
          echo "C:/msys64/usr/bin" >> $GITHUB_PATH
          echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH
          cargo build
        env:
          LIBCLANG_PATH: C:/msys64/mingw64/bin
      # - name: Run tests
      #   run: |
      #     echo "C:/msys64/usr/bin" >> $GITHUB_PATH
      #     echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH
      #     cargo test -- --nocapture --test-threads=1
      #   env:
      #     LIBCLANG_PATH: C:/msys64/mingw64/bin
