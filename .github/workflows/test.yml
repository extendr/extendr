name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  # All tests under this job are run with pre-computed libR-sys bindings.
  tests_no_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows jobs with unspecific Rust architecture build for both i686 and x86_64 
          # R integration tests are also executed for both architectures
          - {os: windows-latest, r: 'release', rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'release', rust-version: 'nightly-msvc'}
          # - {os: windows-latest, r: 'devel', rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'oldrel', rust-version: 'stable-msvc'}

          - {os: macOS-latest,   r: 'release', rust-version: 'stable'}
          # - {os: macOS-latest,   r: 'release', rust-version: 'nightly'}
          # - {os: macOS-latest,   r: 'devel', rust-version: 'stable'}
          # - {os: macOS-latest,   r: 'oldrel', rust-version: 'stable'}

          - {os: ubuntu-20.04,   r: 'release', rust-version: 'stable',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest", check_fmt: true}
          - {os: ubuntu-20.04,   r: 'release', rust-version: 'nightly', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          # R-devel requires LD_LIBRARY_PATH
          - {os: ubuntu-20.04,   r: 'devel',   rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}   
          - {os: ubuntu-20.04,   r: 'oldrel',  rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}   



    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

      # This environment variable enables support for pseudo multi-target cargo builds.
      # Current stable Rust does not support multi-targeting,
      # see https://github.com/rust-lang/cargo/issues/8176
      # The variable is treated as a comma-separated list of valid Rust targets.
      # 'default' value emits no '--target' flag.
      # E.g.: BUILD_TARGETS=i686-pc-windows-gnu,x86_64-pc-windows-gnu builds two times,
      # each time providing '--target=*-pc-windows-gnu' flag to cargo.
      BUILD_TARGETS: default
    
    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true
          components: rustfmt, clippy
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
      
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v1
      
      # All configurations for Windows go here
      # If 'rust-version' has no architecture id, both if conditions are executed
      # Otherwise, only one condition is met
      # $targets variable is used to build targets list used later for cargo build/test
      # The order of if blocks favors x86_64 over i686 paths, which is optimal for multi-targeting
      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        # 1. Add rust target
        # 2. Add target name to the $targets variable
        # 3. Add mingw32/mingw64 bin folders to PATH
        # 4. Add R x64/i386 folders to PATH
        run: |
          $targets=@()
          if ($env:RUST_TOOLCHAIN -notlike "*x86_64*") {
            rustup target add i686-pc-windows-gnu ;
            $targets+="i686-pc-windows-gnu"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -notlike "*i686*") {
            rustup target add x86_64-pc-windows-gnu ;
            $targets+="x86_64-pc-windows-gnu"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          echo "BUILD_TARGETS=$($targets -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      # This is required for ubuntu r-devel
      # 'Del alias:R' removes 'R' alias which prevents running R 
      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Check code formatting. As this doesn't depend on the platform, do this only on one platform.
      - name: Check code formatting
        if: matrix.config.check_fmt
        run: cargo fmt -- --check

      # For each target in the BUILD_TARGETS comma-separated list, run cargo build with appropriate target
      # Required by Windows builds, does not affect other platforms
      - name: Build
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Build for $target target"

            cargo build $(if($target -ne 'default') {"--target=$target"} ) 
            if (!$?) { 
              echo "::error::Build for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }

      # For each target in the BUILD_TARGETS comma-separated list, run cargo test with appropriate target
      # Required by Windows builds, does not affect other platforms
      - name: Run tests
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Test for $target target"
            
            cargo test $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture
            if (!$?) { 
              echo "::error::Test for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }

      - name: Query dependencies for integration testing
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(pkgdir = "tests/extendrtests", dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache installed R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install R dependencies for integration testing
        run: |
          remotes::install_deps(pkgdir = "tests/extendrtests", dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}
        
      # Windows: modified PATH will launch 32-bit Rscript if the build targets only i686/i386, so no conflict will arise
      # Rust pseudo multi-targeting: R CMD CHECK receives an extra argument '--no-multiarch' if BUILD_TARGETS is not 'default' and does not contain any commas
      - name: Run R integration tests
        id: r_integration_tests
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          setwd("tests/extendrtests")
          rcmdcheck::rcmdcheck(path = ".", args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
        
      - name: Upload check results from R integration tests
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name:  ${{ matrix.config.os }}-R-${{ matrix.config.r }}-rust-${{ matrix.config.rust-version }}
          path: check


# All tests under this job are run with R devel and freshly generated bindings.
  tests_R_devel_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} w/ bindgen (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04,   r: 'devel', rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: macOS-latest,   r: 'devel', rust-version: 'stable'}
          - {os: windows-latest, r: 'devel', rust-version: 'stable-msvc'}


    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      BUILD_TARGETS: default

    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true

      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
      

      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        # 1. Add rust target
        # 2. Add target name to the $targets variable
        # 3. Add mingw32/mingw64 bin folders to PATH
        # 4. Add R x64/i386 folders to PATH
        run: |
          $targets=@()
          if ($env:RUST_TOOLCHAIN -notlike "*x86_64*") {
            rustup target add i686-pc-windows-gnu ;
            $targets+="i686-pc-windows-gnu"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -notlike "*i686*") {
            rustup target add x86_64-pc-windows-gnu ;
            $targets+="x86_64-pc-windows-gnu"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          echo "BUILD_TARGETS=$($targets -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Build extendr-api for $target target"

            cargo build --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} )
            if (!$?) { 
              echo "::error::Build extendr-api for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Build extendr-engine for $target target"

            cargo build --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) 
            if (!$?) { 
              echo "::error::Build extendr-engine for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }

      - name: Run tests
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Test extendr-engine \w tests-all for $target target"

            cargo test --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture 
            if (!$?) { 
              echo "::error::Test extendr-engine \w tests-all for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Test extendr-api \w tests-all for $target target"

            cargo test --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture 
            if (!$?) { 
              echo "::error::Test extendr-api \w tests-all for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {            
            echo "::group::Test extendr-api \w tests-minimal for $target target"

            cargo test --manifest-path extendr-api/Cargo.toml --features tests-minimal $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture
            if (!$?) { 
              echo "::error::Test extendr-api \w tests-minimal for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }

            echo "::endgroup::"
          }
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Test extendr-macros for $target target"

            cargo test --manifest-path extendr-macros/Cargo.toml  $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture
            if (!$?) { 
              echo "::error::Test extendr-macros for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }
            
            echo "::endgroup::"
          }
