name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main
      - master
  workflow_disaptch:

jobs:
  correct_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} w/ bindgen (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04,   r: 'devel', rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: macOS-latest,   r: 'devel', rust-version: 'stable'}
          - {os: windows-latest, r: 'devel', rust-version: 'stable', rust-targets: ['x86_64-pc-windows-gnu', 'i686-pc-windows-gnu']}


    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      LIBCLANG_PATHS: ""

    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      # 1. Update rustup
      # 2. For each target add respective toolchain &
      #    update target for that toolchain
      - name: Set up Rust
        run: |
          echo "::group::Updating system's 'rustup'"
          rustup update
          echo "::endgroup::"
          $targets = $env:RUST_TARGETS.Split(',')
          foreach ($target in $targets) {
            echo "::group::Setting up $env:RUST_TOOLCHAIN $target"
            if ($target -eq '') {
              rustup toolchain add $env:RUST_TOOLCHAIN
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
              rustup default $env:RUST_TOOLCHAIN
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
            }
            else {
              rustup toolchain add "$env:RUST_TOOLCHAIN-$target"
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
              rustup target add $target --toolchain "$env:RUST_TOOLCHAIN-$target"
              if(!$?) {
                throw "Last exit code $LASTEXITCODE"
              }
            }
            echo "::endgroup::"
          }

        env: 
          RUST_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          windows-path-include-mingw: false
      
      - name: Setup 'try-cargo'
        run: | 
          function try-cargo {
              param(
                  [Parameter(Position = 0, ValueFromRemainingArguments)]
                  [String[]]
                  $CargoArgs,
                  [String]
                  $ActionName
              )
              try {    
                  echo "::group::$ActionName"
                  echo "Running cargo $CargoArgs"
                  cargo $CargoArgs
              }
              catch {
                  $err_msg = "::error::$ActionName cargo failed with code $LASTEXITCODE (args: $CargoArgs)"
                  Write-Error -Message "$err_msg" -ErrorAction Stop 
              }
              finally {
                  echo "::endgroup::"
              }
              
          }


      # 1. Inspect targets. If empty, assume 'x86_64' arch
      # 1.5 Make symlink to please i686 toolchain (https://github.com/rust-lang/cargo/issues/8990)
      # 2. Install msys2 packages (--needed skips already installed)
      # 3. Add msys2/mingw{bits}/bin to path
      # 4. Add R/{arch}/bin to path
      # 5. Create array of correct (arch-dependent) paths to 'libclang.dll', export as env variable
      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          if (($env:BUILD_TARGETS -like "*x86_64*") -or ($env:BUILD_TARGETS -eq "")) {
            echo "::group::Setting up x86_64"
            C:\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm  --needed mingw-w64-x86_64-clang mingw-w64-x86_64-toolchain"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "::endgroup::"
          }
          if ($env:BUILD_TARGETS -like "*i686*") {
            echo "::group::Setting up i686"
            mkdir target\debug -ErrorAction Ignore
            new-item -Type symboliclink -Path .\target\debug\libgcc_s_dw2-1.dll -Value C:\msys64\mingw32\bin\libgcc_s_dw2-1.dll
            C:\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm --needed mingw32/mingw-w64-i686-clang mingw-w64-i686-toolchain"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "::endgroup::"
          }

          $libclang_paths = $env:BUILD_TARGETS.Split(",") | `
            foreach {"C:\msys64\mingw$(if ($_ -like "*i686*") {"32"} else {"64"})\bin"} | `
            Join-String -Separator $([System.IO.Path]::PathSeparator)

          echo "LIBCLANG_PATHS=$libclang_paths" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        env: 
          BUILD_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}

      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 1. Retrieve targets
      # 2. Retrieve 'libcalng' paths
      # 3. For each target run
      # 3.1 Select correct $target & $toolchain
      # 3.2 Set up correct LIBCLANG_PATH
      # 3.x Run build commands, checking for errors, providing explicit toolchain & target
      - name: Build
        run: |
          $targets = $env:BUILD_TARGETS.Split(',')
          $libclang_paths = $env:LIBCLANG_PATHS.Split([System.IO.Path]::PathSeparator)
          $itt = 0..($targets.Length - 1)
          foreach($i in $itt) {
            if ($targets[$i] -eq "") {
              $target = 'default'
              $toolchain = $env:RUST_TOOLCHAIN
            }
            else {
              $target = $targets[$i]
              $toolchain = "$env:RUST_TOOLCHAIN-$target"
            }
            if (($libclang_paths[$i] -ne $null) -and ($libclang_paths[$i] -ne "")) {
              $env:LIBCLANG_PATH = $libclang_paths[$i]
            }
            else {
              $env:LIBCLANG_PATH = $null
            }


            try-cargo +$toolchain build --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -ActionName "Build extendr-api for $toolchain"
         
            try-cargo +$toolchain build --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -ActionName "Build extendr-engine for $toolchain"
            
          }
        env: 
          BUILD_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      # Identical to the build process, but running more test commands
      - name: Run tests
        run: |
          $targets = $env:BUILD_TARGETS.Split(',')
          $libclang_paths = $env:LIBCLANG_PATHS.Split([System.IO.Path]::PathSeparator)
          $itt = 0..($targets.Length - 1)
          foreach($i in $itt) {
            if ($targets[$i] -eq "") {
              $target = 'default'
              $toolchain = $env:RUST_TOOLCHAIN
            }
            else {
              $target = $targets[$i]
              $toolchain = "$env:RUST_TOOLCHAIN-$target"
            }
            if (($libclang_paths[$i] -ne $null) -and ($libclang_paths[$i] -ne "")) {
              $env:LIBCLANG_PATH = $libclang_paths[$i]
            }
            else {
              $env:LIBCLANG_PATH = $null
            }

            try-cargo +$toolchain test --manifest-path extendr-engine/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) '--' --nocapture -ActionName "Test extendr-engine \w tests-all for $target target"
            
            try-cargo +$toolchain test --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) '--' --nocapture -ActionName "Test extendr-api \w tests-all for $target target"
"                    
            try-cargo +$toolchain test --manifest-path extendr-api/Cargo.toml --features tests-minimal $(if($target -ne 'default') {"--target=$target"} ) '--' --nocapture -ActionName "Test extendr-api \w tests-minimal for $target target"
                      
            try-cargo +$toolchain test --manifest-path extendr-macros/Cargo.toml  $(if($target -ne 'default') {"--target=$target"} ) '--' --nocapture -ActionName "Test extendr-macros for $target target"
            
          }
        env: 
          BUILD_TARGETS: ${{ join(matrix.config.rust-targets, ',') }}
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}
