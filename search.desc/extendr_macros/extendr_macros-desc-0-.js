searchState.loadedDescShard("extendr_macros", 0, "Macros for generating wrappers for rust functions.\nEnable the construction of dataframes from arrays of …\nDerives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …\nExecute R code by parsing and evaluating tokens.\nExecute R code by parsing and evaluating tokens but …\nDerives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …\nCall a function or primitive defined by a text expression …\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate a List R object from a list of name-value pairs.\nCreate a Pairlist R object from a list of name-value pairs.\nInternal module for parsing R-like variadic arguments.\nThis is responsible for generating the C functions that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate bindings for a single function.\nMake inherent implementations available to R\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a set of attribute arguments for <code>#[extendr(opts...)]</code>\nImplementation of the IntoRobj macro. Refer to the …\nImplementation of the TryFromRobj macro. Refer to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns only the alias from a function argument.\nConvert <code>SEXP</code> arguments into <code>Robj</code>. This maintains the …\nReturn a simplified type name that will be meaningful to …")