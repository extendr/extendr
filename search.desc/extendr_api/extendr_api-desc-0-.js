searchState.loadedDescShard("extendr_api", 0, "An ergonomic, opinionated, safe and user-friendly wrapper …\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nFALSE value eg. <code>r!(FALSE)</code>\nEnable the construction of dataframes from arrays of …\nDerives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …\nNA value for integers eg. <code>r!(NA_INTEGER)</code>\nNA value for logical. <code>r!(NA_LOGICAL)</code>\nNA value for real values eg. <code>r!(NA_REAL)</code>\nNA value for strings. <code>r!(NA_STRING)</code>\nNULL value eg. <code>r!(NULL)</code>\nExecute R code by parsing and evaluating tokens.\nEnum use to unpack R objects into their specialist …\nExecute R code by parsing and evaluating tokens but …\nType of R objects used by Robj::rtype.\nTRUE value eg. <code>r!(TRUE)</code>\nThe resulting type after dereferencing.\nSimple and safe type conversions that may fail in a …\nDerives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …\nAn attempted conversion that consumes <code>self</code>, which may or …\nCall a function or primitive defined by a text expression …\nCreate a dataframe.\nDereferences the value.\nMutably dereferences the value.\nConvert R objects to a wide variety of types.\nError handling in Rust called from R.\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate a factor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a global variable.\nGraphic Device Operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA macro for constructing R language objects.\nArgument parsing and checking.\nCreate a List R object from a list of name-value pairs.\nModule metadata\nA set of optional features and third-party crate …\nMaintain ownership of R objects.\nCreate a Pairlist R object from a list of name-value pairs.\nCommon exports for extendr-api.\nConvert a rust expression to an R object.\nPrint via the R error stream.\nPrint with a newline via the R output stream.\nrmacros - a set of macros to call actual R functions in a …\nR object handling.\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nConvert extendr’s Rtype to R’s SEXPTYPE. Panics if the …\nSee https://serde.rs/impl-serializer.html\nConvert R’s SEXPTYPE to extendr’s Rtype.\nThe sym! macro install symbols. You should cache your …\nMacro for running tests.\nProvide limited protection for multithreaded access to the …\nPerforms the conversion.\nPerforms the conversion.\nGet a local variable from the calling function or a global …\nWrappers are lightweight proxies for references to R …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert any R object to a Deserialize object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nSee <code>std::array::TryFromSliceError</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base environment; formerly <code>R_NilValue</code>\nThe namespace for base.\n“” as a STRSXP\n“” as a CHARSXP\nThe current interpreter environment.\n“.Generic”\nAn empty environment at the root of the environment tree\nParse a string into an R executable object and run it. …\nParse a string into an R executable object and run it using\nFind a namespace by name.\nFind a function or primitive that may be in a namespace.\nThe “global” environment\nGet a global function from global_env() and ancestors.\nNA_STRING as a CHARSXP\nFor registered namespaces.\nCreate a new environment\nThe nil object\nParse a string into an R executable object\nCurrent srcref, for debuggers\nA pointer to the end of the display list to avoid …\nA pointer to the end of the display list to avoid …\nWhen replaying the display list, the graphics engine …\nCopy system state information to the current device. This …\nThis event gives the registered system a chance to undo …\nIn response to this event, the registered graphics system …\nRestore the system state that is saved by …\nThis is sent by the graphics engine prior to replaying the …\nCreate a snapshot of the system state that is sufficient …\nThis is sent by the graphics engine prior to initialising …\nThe device wants to scale the current pointsize (for …\nNo value.\nThe nil object\nA row-major array of pixels. One pixel is 32-bit, whose …\nSome value of type <code>T</code>.\nIs a device appending a path ?\nIs a device appending a path ?\nper-device setting for ‘ask’ (use NewFrameConfirm)\nper-device setting for ‘ask’ (use NewFrameConfirm)\nbottom raster coordinate\nbottom raster coordinate\nAn array of function pointers, one per graphics system that\ncan the gamma factor be modified?\ncan the gamma factor be modified?\nDevice-level clipping\nDevice-level clipping\ncan the device generate idle events\ncan the device generate idle events\ncan the device generate keyboard events\ncan the device generate keyboard events\ncan the device generate mousedown events\ncan the device generate mousedown events\ncan the device generate mousemove events\ncan the device generate mousemove events\ncan the device generate mouseup events\ncan the device generate mouseup events\nCan do at least some horiz adjust of text 0 = none, 1 = …\nCan do at least some horiz adjust of text 0 = none, 1 = …\nScreen capture. Returns an integer matrix representing …\ncetype_t is an identifier reseved by POSIX, but it is well …\nGet the metrics for a single unicode codepoint.\nDraw a stroked/filled circle. gc.color() is the stroke …\nChange the clip rectangle.\nR only has the notion of a rectangular clipping region\nR only has the notion of a rectangular clipping region\nSet the line or text color of a primitive.\nCharacter size in rasters; [0]=x, [1]=y\nCharacter size in rasters; [0]=x, [1]=y\nGet the current device.\nStuff that the devices can see (and modify). All detailed …\nStuff that the devices can see (and modify). All detailed …\nThis can be used to OVERRIDE canClip so that graphics …\nThis can be used to OVERRIDE canClip so that graphics …\npointer to device specific parameters\npointer to device specific parameters\nThis should match R_GE_version, BUT it does not have to. …\nThis should match R_GE_version, BUT it does not have to. …\nGet the device number for this device.\nHas the device received any output?\nHas the device received any output?\ndisplay list\ndisplay list\ntoggle for initial display list status\ntoggle for display list status\ntoggle for initial display list status\ntoggle for display list status\nThis is an environment holding event handlers.\nThis is an environment holding event handlers.\nSet the fill color of a primitive.\nSet the font face.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert device coordinates into a specified unit. This is …\nConvert device width/height coordinates into a specified …\nSet the gamma of the device. <code>out_color = in_color ** gamma</code>\n(initial) Device Gamma Correction\n(initial) Device Gamma Correction\nStuff about the device that only graphics systems see. The …\nStuff about the device that only graphics systems see. The …\ndevice_getEvent is no longer used, but the slot is kept …\ndevice_getEvent is no longer used, but the slot is kept …\nGet a device by number.\nThis is set while getGraphicsEvent is actively looking for …\nThis is set while getGraphicsEvent is actively looking for …\nand strWidthUTF8\nand strWidthUTF8\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = yes, 3 = except for missing values\n1 = no, 2 = yes, 3 = except for missing values\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = fully, 3 = semi\n1 = no, 2 = fully, 3 = semi\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInches per raster; [0]=x, [1]=y\nInches per raster; [0]=x, [1]=y\nleft raster coordinate\nleft raster coordinate\nDraw a stroked line. gc.color() is the stroke color.\nSet the line end type.\nSet the line height for text.\nSet the line join type.\nSet the line miter limit - the point where the line …\nSet the type of the line.\nSet the width of the line in chosen units.\nDraw a mathematical expression.\nGet the height of a mathematical expression.\nGet the metrics for a mathematical expression.\nGet the width of a mathematical expression.\nDisable device rendering and flush.\nEnable device rendering.\nStart a new page. The page color can be set in advance.\nDraw a path with multiple segments. gc.color() is the …\nDraw a stroked/filled polygon. gc.color() is the stroke …\nDraw a stroked/filled polyline. gc.color() is the stroke …\nDraw a bitmap.\nShould a graphics call be stored on the display list? Set …\nShould a graphics call be stored on the display list? Set …\nDraw a stroked/filled axis-aligned rectangle. gc.color() …\nArea for future expansion. By zeroing this, devices are …\nArea for future expansion. By zeroing this, devices are …\nright raster coordinate\nright raster coordinate\nThe last element of the display list just prior to when …\nThe last element of the display list just prior to when …\nsets par(“fg”), par(“col”) and gpar(“col”)\nsets par(“fg”), par(“col”) and gpar(“col”)\nsets par(“bg”) and gpar(“fill”)\nsets par(“bg”) and gpar(“fill”)\nDevice initial settings / /* These are things that the …\nDevice initial settings / /* These are things that the …\nDraw a special symbol centered on pos. See …\nAn array of information about each graphics system that …\nDraw a text string starting at pos. TODO: do we need to …\nGet the height of a unicode string.\nGet the metrics for a unicode string.\nGet the width of a unicode string.\nConvert a specified unit coordinates into device …\nConvert a specified unit width/height coordinates into …\ntop raster coordinate\ntop raster coordinate\nSet the transform as a 3x2 matrix.\nIs rotated text good enough to be preferable to Hershey in …\nIs rotated text good enough to be preferable to Hershey in …\nx character addressing offset - unused\nx character addressing offset - unused\ny character addressing offset\ny character addressing offset\n1/2 interline space as frac of line height\n1/2 interline space as frac of line height\nReturns the argument unchanged.\nGenerate a color from a CSS-like hex number. eg. …\nGenerate a color from a 3 digit CSS-like hex number. eg. …\nCalls <code>U::from(self)</code>.\nGenerate a color from rgb components (0-255).\nGenerate a color from rgba components (0-255).\nConvert to an R color.\nhttps://www.w3.org/TR/2018/REC-css-color-3-20180619/\nA builder of extendr_ffi::DevDesc.\nSets the font size (unit: point). <strong>Note that most of the </strong>…\nSets the device sizes (unit: point).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets inches per raster unit (i.e. point). <strong>Note that most </strong>…\nSets the initial value of colour.\nSets the initial value of fill.\nSets the initial value of font face.\nSets the initial value of line type.\nSets the initial value of pointsize.\nSet this to <code>false</code> if the implemented <code>strWidth()</code> and <code>text()</code> …\nTo what extent the device takes the responsibility of …\nThe underlying C structure <code>DevDesc</code> has two fields related …\nA graphic device implementation.\nWhether the device accepts a capturing operation. By …\nWhether the device has a locator capability, i.e., reading …\nWhether the device maintains a plot history. This …\nWhether the device accepts the drawing operation of a …\nA callback function to setup the device when the device is …\nA callback function that captures and returns the current …\nA callback function that returns the TextMetric (ascent, …\nA callback function to draw a circle.\nA callback function to clip.\nA callback function to free device-specific resources when …\nCreate a Device.\nA callback function to clean up when the device is …\nA callback function for X11_eventHelper.\nReturns the argument unchanged.\nA callback function to manage the “suspension level” …\nCalls <code>U::from(self)</code>.\nA callback function to draw a line.\nA callback function that returns the coords of the event\nA callback function called whenever the graphics engine …\nA callback function to confirm a new frame. It seems this …\nA callback function called whenever a new plot requires a …\nA callback function called when the user aborts some …\nA callback function to draw paths.\nA callback function to draw a polygon.\nA callback function to draw a polyline.\nA callback function to draw a Raster.\nA callback function to draw a rect.\nA callback function that returns the current device size …\nA callback function to draw a text.\nA callback function that returns the width of the given …\nSave an object in the R data format to a <code>Write</code> trait. …\nSave an object in the R data format. <code>version</code> should …\nWrapper for R output streams.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format to a <code>Write</code> trait. …\nReturns the argument unchanged.\nSave an object in the R data format to a <code>Write</code> trait. …\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nThe hook will convert some objects into strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format to a <code>Write</code> trait. …\nIterator over name-value pairs in lists.\nIterator over strings or string factors.\nGet an iterator over a string vector. Returns None if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake an empty str iterator.\nMetadata function argument.\nMetadata function.\nMetadata Impl.\nModule metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps invalid R identifiers, like <code>_function_name</code>, into …\nGenerate a wrapper for a non-method function.\nGenerate a wrapper for an implementation block.\nGenerate a wrapper for a method.\nReturn true if this primitive is <code>NA</code>.\nEnables support for the <code>either</code> crate, to allow accepting …\nDefines conversions between R objects and the <code>ndarray</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide a wrapper around R’s pointer type <code>SEXP</code> that is …\nA wrapper around R’s pointer type <code>SEXP</code> that is <code>Send</code>.\nReturns the argument unchanged.\nGet the inner <code>SEXP</code>\nCalls <code>U::from(self)</code>.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nEnable the construction of dataframes from arrays of …\nProvides methods for converting a type <code>Self</code> into either a …\nIterator that maps left or right iterators to …\nA value of type <code>L</code>.\nExecute R code by parsing and evaluating tokens.\nA value of type <code>R</code>.\nExecute R code by parsing and evaluating tokens but …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nCall a function or primitive defined by a text expression …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nCreate a dataframe.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate a factor.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nEvaluate the provided expression for both <code>Either::Left</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a global variable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nA macro for constructing R language objects.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nCreate a List R object from a list of name-value pairs.\nCreate a List R object from a list of name-value pairs.\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nCreate a Pairlist R object from a list of name-value pairs.\nConvert a rust expression to an R object.\nPrint via the R error stream.\nPrint with a newline via the R output stream.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nThe sym! macro install symbols. You should cache your …\nMacro for running tests.\nPerforms the conversion.\nReturns the first type that matches the provided <code>Robj</code>, …\nReturns the first type that matches the provided <code>Robj</code>, …\nPerforms the conversion.\nMacro for unwrapping the left side of an <code>Either</code>, which …\nDual to <code>try_left!</code>, see its documentation for more …\nReturns the left value\nReturns the right value\nGet a local variable from the calling function or a global …\nGeneric access to typed slices in an Robj.\nProvides access to the attributes of an R object.\nThis is an extension trait to provide a convenience method …\nThe following impls add operators to Robj.\nThe following impls wrap specific Rinternals.h functions.\nWrapper for an R S-expression pointer (SEXP).\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nAdd two R objects, consuming the left hand side. panics on …\nAllocate a matrix object.\nAllocated an owned object of a certain type.\nGet a scalar rust boolean.\nConvert a factor to a string vector.\nConvert to a string vector.\nGet a scalar integer.\nGet a read-only reference to the content of an integer …\nGet a read-write reference to the content of an integer or …\nGet a <code>Vec&lt;i32&gt;</code> copied from the object.\nConvert an <code>Robj</code> into <code>Integers</code>.\nGet a scalar boolean as a tri-boolean Rbool value.\nGet an iterator over logical elements of this slice.\nGet a read-only reference to the content of a logical …\nGet a <code>Vec&lt;Rbool&gt;</code> copied from the object using the …\nGet a read-only reference to the content of an integer or …\nGet a read-write reference to the content of a raw vector.\nGet a scalar real.\nGet an iterator over real elements of this slice.\nGet a read-only reference to the content of a double …\nGet a read-write reference to the content of a double …\nGet a <code>Vec&lt;f64&gt;</code> copied from the object.\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nGet a read-only reference to a scalar string type.\nGet a vector of string references. String references …\nGet a vector of owned strings. Owned strings have long …\nGet an immutable slice to this object’s data.\nGet a mutable slice to this object’s data.\nDo the equivalent of x(a, b, c)\nGet the <code>class</code> attribute as a string iterator if one exists.\nConvert to vectors of many kinds.\nCollects an iterable into an <code>RArray</code>. The iterable must …\nConvert a wide range of iterators to Robj.\nReturn true if two arrays have identical dims.\nGenerate a text representation of this object.\nGet the <code>dim</code> attribute as an integer iterator if one exists.\nGet the <code>dimnames</code> attribute as a list iterator if one …\nDivide two R objects, consuming the left hand side. panics …\nDo the equivalent of x$y\nDo the equivalent of x :: y\nDo a deep copy of this object. Note that clone() only adds …\nEvaluate the expression in R and return an error or an R …\nEvaluate the expression and return NULL or an R object.\nEvaluate the expression in R and return an error or an R …\nFind a function in an environment ignoring other variables.\nFind a variable in an environment.\nYou can return a ListIter from a function.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a vector of Rstr into strings.\nMake an robj from a wrapper.\nYou can return a PairlistIter from a function.\nConvert a rust object to NULL or another type.\nConvert a column, matrix or matrix3d to an Robj.\nReturns the argument unchanged.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a vector of Robj into a list.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nA reference of an <code>Robj</code> can be constructed from a reference …\nGet a copy of the underlying SEXP.\nGet a specific attribute as a borrowed <code>Robj</code> if it exists.\nGet the source ref.\nGet the source filename.\nReturn true if an attribute exists.\nReturn true if this object has an attribute called <code>names</code>.\nDo the equivalent of <code>x[[y]]</code>\nReturn true if this object has this class attribute. …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturn true if this is an array.\nReturn true if this is CHARSXP.\nReturn true if this is a complex vector.\nReturns <code>true</code> if the <code>Robj</code> contains no elements.\nReturn true if this is an environment.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is factor.\nReturn true if this is a data frame.\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is a language object (LANGSXP).\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is a boolean (logical) vector\nReturn true if this is a matrix.\nIs this object is an <code>NA</code> scalar? Works for character, …\nReturn true if this is the null object.\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is an object (ie. has a class …\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is an environment.\nReturn true if this is RAWSXP.\nReturn true if this is a real (f64) vector.\nReturn true if this is a S4 object.\nReturn true if this is a string.\nReturn true if this is a symbol.\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a user defined binop.\nReturn true if this is a vector.\nReturn true if this is an atomic vector.\nReturn true if this is a vector list.\nReturn true if this is can be made into a vector.\nGet the extended length of the object.\nGet the <code>levels</code> attribute as a string iterator if one …\nMultiply two R objects, consuming the left hand side. …\nGet the <code>names</code> attribute as a string iterator if one exists.\nNumber of columns of a matrix\nNumber of rows of a matrix\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nGet the type of an R object.\nSet a specific attribute in-place and return the object.\nSet the <code>class</code> attribute from a string iterator, and return …\nSet the <code>names</code> attribute from a string iterator.\nDo the equivalent of <code>x[y]</code>\nSubtract two R objects, consuming the left hand side. …\nDo the equivalent of x ~ y\nConverts an ndarray Array into an equivalent R array. The …\nConverts a reference to an ndarray Array into an …\nThere are various ways an <code>Robj</code> may be converted into …\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nCopy a vector and resize it. See. …\nThis is an extension trait to provide a convenience method …\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nCollects an iterable into an <code>RArray</code>. The iterable must …\nConvert a wide range of iterators to Robj.\nReturns an <code>CHARSXP</code> based on the provided <code>&amp;str</code>.\nGenerates a <code>ToVectorValue</code> for a type, by inheriting the …\nThe following impls add operators to Robj.\nDo the equivalent of x(a, b, c)\nDo the equivalent of x$y\nDo the equivalent of x :: y\nDo the equivalent of <code>x[[y]]</code>\nDo the equivalent of <code>x[y]</code>\nDo the equivalent of x ~ y\nThe following impls wrap specific Rinternals.h functions.\nAllocate a matrix object.\nAllocated an owned object of a certain type.\nConvert a factor to a string vector.\nConvert to a string vector.\nConvert to vectors of many kinds.\nReturn true if two arrays have identical dims.\nGenerate a text representation of this object.\nDo a deep copy of this object. Note that clone() only adds …\nFind a function in an environment ignoring other variables.\nFind a variable in an environment.\nGet the source ref.\nGet the source filename.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturn true if this is an array.\nReturn true if this is CHARSXP.\nReturn true if this is a complex vector.\nReturn true if this is an environment.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is factor.\nReturn true if this is a data frame.\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is a language object (LANGSXP).\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is a boolean (logical) vector\nReturn true if this is a matrix.\nReturn true if this is the null object.\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is an object (ie. has a class …\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is an environment.\nReturn true if this is RAWSXP.\nReturn true if this is a real (f64) vector.\nReturn true if this is a S4 object.\nReturn true if this is a string.\nReturn true if this is a symbol.\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a user defined binop.\nReturn true if this is a vector.\nReturn true if this is an atomic vector.\nReturn true if this is a vector list.\nReturn true if this is can be made into a vector.\nNumber of columns of a matrix\nNumber of rows of a matrix\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nCopy a vector and resize it. See. …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nRcplx is a wrapper for f64 in the context of an R’s …\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nNA always fails.\nNA always fails.\nNA always fails.\nNA always fails.\nDebug format.\nDebug format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nReturn true is the is a NA value.\nReturn true is the is a NA value.\nReturn true is the is a NA value.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nConstruct a NA.\nConstruct a NA.\nConstruct a NA.\nConstruct a NA.\nNegate a Rfloat value.\nNegate a Rfloat value.\nNegate a Rint value, overflows to NA.\nNegate a Rint value, overflows to NA.\nNegate a Rcplx value.\nNegate a Rcplx value.\nLogical not a Rint value, overflows to NA.\nLogical not a Rint value, overflows to NA.\nReal portion of the complex number\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nConvert an <code>LGLSXP</code> object into a <code>Rbool</code> (tri-state boolean). …\nGenerates an implementation of a binary operator Trait for …\nGenerates an implementation of a binary operate-assign …\nGenerates an implementation of type conversion Traits from …\nGenerates an implementation of <code>std::iter::Sum</code> for a scalar …\nGenerates an implementation of a number of Traits for the …\nGenerates an implementation of a unary operator Trait for …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nReturn a <code>false</code> <code>Rbool</code>.\nConvert this construct a <code>Rbool</code> from a rust boolean.\nReturn <code>true</code> if this triboolean is <code>false</code> but not <code>NA</code>.\nReturn <code>true</code> if this triboolean is <code>true</code> but not <code>NA</code>.\nReturn a <code>NA</code> <code>Rbool</code>.\nConvert this <code>Rbool</code> to a bool. Note <code>NA</code> will be true.\nReturn a <code>true</code> <code>Rbool</code>.\nRcplx is a wrapper for f64 in the context of an R’s …\nImaginary portion of the complex number\nReal portion of the complex number\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a bool to a Robj.\nRaw objects.\nMap a char to a Robj string.\nMap a f32 to a Robj.\nMap a f64 to a Robj.\nMap a i16 to a Robj.\nMap a i32 to a Robj.\nMap a i64 to a Robj.\nMap a i8 to a Robj.\nStart of a map. We require that keys must be strings.\nWrapper struct: Wrap(T)\nWrapper struct in enum: Enum::Wrap(T)\nNone of an option is NULL.\nStart of a vector or other sequence.\nSome of an option is that value.\nMap a string slice to a Robj string.\nStart of a struct. Collect just the values in a list.\neg. <code>Enum::Point { x: i32, y: i32 }</code>\nStart of a tuple.\nStart of a tuple struct eg. <code>Point(i32, i32)</code>.\nStart of a struct variant eg. <code>Enum::Point{ x: i32, y: i32}</code>.\nMap a u16 to a Robj.\nMap a u32 to a Robj.\nMap a u64 to a Robj.\nMap a u8 to a Robj.\nUnit variant: Enum::Name\nConvert a serializable object to a Robj.\nA global lock, that should represent the global lock on …\nWrap an R function such as <code>Rf_findFunction</code> and convert …\nRun <code>f</code> while ensuring that <code>f</code> runs in a single-threaded …\nThis provides an abstraction for R’s <code>data.frame</code>…\n<code>ExternalPtr</code> is a way to leak Rust allocated data to R, …\nWrappers for matrices with deferred arithmetic.\nA pairlist is a linked list of values with optional symbol …\nS4 class support.\nRust trait for implementing ALTREP. Implement one or more …\nSafely implement ALTREP_CLASS.\nCoerce this object into some other type, if possible.\nSafely implement R_altrep_data1, R_altrep_data2. When …\nGet the data pointer for this vector, possibly expanding …\nGet the data pointer for this vector, returning NULL if …\nDuplicate this object. Called by Rf_duplicate. Currently …\nDuplicate this object, possibly duplicating attributes. …\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector a single element of …\nImplement subsetting (eg. <code>x[10:19]</code>) for this Altrep vector.\nReturns the argument unchanged.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nPrint the text for .Internal(inspect(obj))\nCalls <code>U::from(self)</code>.\nReturn true if the ALTREP object has been manifested …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nGet the virtual length of the vector. For example for a …\nMake a complex ALTREP class that can be used to make …\nMake an integer ALTREP class that can be used to make …\nMake a logical ALTREP class that can be used to make …\nMake a raw ALTREP class that can be used to make vectors.\nMake a real ALTREP class that can be used to make vectors.\nMake a string ALTREP class that can be used to make …\nReturn the maximum of the elements in this vector. If …\nReturn the maximum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nFetch the state of this object when writing to a file.\nSafely (relatively!) implement R_set_altrep_data1, …\nSet a single element in this vector.\nSet a single element in this list.\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nSimplified constructor that is called when loading an …\nAn obscure <code>NA</code>-aware wrapper for R’s complex vectors. Can …\nTreat Complexes as if it is a slice, like <code>Vec&lt;Rcplx&gt;</code>\nTreat Complexes as if it is a mutable slice, like …\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP complex (CPLXSXP) vectors …\nWrapper for creating ALTREP complex (CPLXSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a complex object. Forces ALTREP …\nReturn a writable iterator for a complex object. Forces …\nCreate a new vector of complexes.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nA representation of a typed <code>data.frame</code>\nA trait to convert a collection of <code>IntoDataFrameRow</code> into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse <code>#[derive(IntoDataFrameRow)]</code> to use this.\nAn obscure <code>NA</code>-aware wrapper for R’s double vectors. Can …\nTreat Doubles as if it is a slice, like <code>Vec&lt;Rfloat&gt;</code>\nTreat Doubles as if it is a mutable slice, like <code>Vec&lt;Rfloat&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP double (REALSXP) vectors …\nWrapper for creating ALTREP double (REALSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a double object. Forces ALTREP …\nReturn a writable iterator for a double object. Forces …\nCreate a new vector of doubles.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nIterator over the names and values of an environment\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an R environment object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a variable from an environment, but not its ancestors.\nCreate a new, empty environment with a reserved size.\nCreate a new, empty environment.\nGet the enclosing (parent) environment.\nSet or define a variable in an environment.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nWrapper for creating Expressions (EXPRSXP) objects.\nCalls <code>U::from(self)</code>.\nWrapper for creating Expressions (EXPRSXP) objects.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturn an iterator over the values of this expression list.\nWrapper for creating R objects containing any Rust object.\nThis is a zero-length object that holds the type of the …\nGet the “address” field of an external pointer. …\nGet the “address” field of an external pointer as a …\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nThis allows us to treat the Robj as if it is the type T.\nThis allows us to treat the Robj as if it is the mutable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct an external pointer object from any type T. In …\nGet the “protected” field of an external pointer. This …\nThis is the contained Robj.\nGet the “tag” of an external pointer. This is the type …\nGet the “address” field of an external pointer. …\nGet the “address” field of an external pointer as a …\nWrapper for creating functions (CLOSSXP).\nGet the body of the function or None if it is a primitive.\nDo the equivalent of x(a, b, c)\nGet the environment of the function or None if it is a …\nGet the formal arguments of the function or None if it is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nAn obscure <code>NA</code>-aware wrapper for R’s integer vectors. Can …\nTreat Integers as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Integers as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP integer (INTSXP) vectors …\nWrapper for creating ALTREP integer (INTSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a integer object. Forces ALTREP …\nReturn a writable iterator for a integer object. Forces …\nCreate a new vector of integers.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating language objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can use the FromList wrapper to coerce a Robj into a …\nIterator over the objects in a VECSXP, EXPRSXP or …\nGet the list a slice of <code>Robj</code>s.\nLists behave like slices of Robj.\nGet a reference to an element in the list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrapper for creating a list (VECSXP) object from an …\nConvert an iterator to a <code>List</code> object.\nBuild a list using separate names and values iterators. …\nWrapper for creating a list (VECSXP) object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>List</code> into a <code>HashMap</code>, consuming the list.\nConvert a List into an interator, consuming the list.\nReturn an iterator over the names and values of this list.\nLength of a list iterator.\nCreate a new list.\nSet an element in the list.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nConvert a general R object into a List iterator if …\nConvert a general R object into a List iterator if …\nReturn an iterator over the values of this list.\nAn obscure <code>NA</code>-aware wrapper for R’s logical vectors. Can …\nTreat Logicals as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Logicals as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP logical (LGLSXP) vectors …\nWrapper for creating ALTREP logical (LGLSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a logical object. Forces ALTREP …\nReturn a writable iterator for a logical object. Forces …\nCreate a new vector of logicals.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nGenerates <code>impl</code> block and required traits for a vector type.\nWrapper for creating and using matrices and arrays.\nData type of the n-array\nData type of the n-array\nData type of the n-array\nData type of the n-array\nData type of the n-array\nData type of the n-array\nReturns a flat representation of the array in col-major.\nReturns a flat, mutable representation of the array in …\nReturns the dimensions of the array.\nConvert a faer MatRef into Robj.\nReturns the argument unchanged.\nGet the dimension vector of the array.\nZero-based indexing for DIM-dimensional arrays.\nZero-based mutable indexing for DIM-dimensional arrays.\nCalls <code>U::from(self)</code>.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nReturns the number of dimensions.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nMake a new column type.\nMake a new column type.\nCreate a new matrix wrapper.\nCreate a new matrix wrapper.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of submatrices.\nGet the number of submatrices.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nSet the dimensions of an array.\nSet the dimension names of an array.\nSet the names of the elements of an array.\nWrapper for handling potentially NULL values.\nReturns the argument unchanged.\nConvert an Option into Nullable type\nCalls <code>U::from(self)</code>.\nConvert Nullable R object into <code>Option</code>\nMap <code>Nullable&lt;T&gt;</code> into <code>Nullable&lt;U&gt;</code>\nConvert an object that may be null to a rust type.\nConvert an object that may be null to a rust type.\nGenerate paits of names and values.\nReturns the argument unchanged.\nConstruct a NULL pairlist (which is a NULL).\nReturns the argument unchanged.\nConvert an iterator of names and values to a pairlist …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a PairList into an interator, consuming the …\nGenerate paits of names and values.\nMake an empty pairlist iterator.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can pass a PairlistIter to a function.\nWrapper for creating primitive objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating promises (PROMSXP).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating raw (byte) objects.\nGet a slice of bytes from the Raw object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Raw object of length <code>len</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating CHARSXP objects. These are used only …\nTreat a Rstr as a string slice.\nGet the string from a character object. If the string is …\nReturns a rust string-slice based on the provided <code>SEXP</code>, …\nTreat <code>Rstr</code> like <code>&amp;str</code>.\nCompare a <code>Rstr</code> with a string slice.\nCompare a <code>Rstr</code> with a string slice.\nReturns the argument unchanged.\nConvert a String to a Rstr.\nConvert a string slice to a Rstr.\nMake a character object from a string.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nGet a named slot from a S4 object.\nCheck if a named slot exists.\nCalls <code>U::from(self)</code>.\nCreate a S4 object.\nCreate a S4 class.\nSet a named slot in a S4 object.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nThis is a relatively expensive operation, so use a …\nGet an element in a string vector.\nReturns the argument unchanged.\nconvert string-like objects into a Strings object.\nConvert an iterator to a Strings object.\nWrapper for creating string vector (STRSXP) objects.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nGet an iterator for this string vector.\nCreate a new, empty list.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nSet a single element of this string vector.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating symbol objects.\nGet the string from a symbol object.\n“base”\n“{”\n“[[”\n“[”\n“class”\n“.Device”\n“dim”\n“dimnames”\n“$”\n“.defined”\n“.Method”\n“packageName”\n“.target”\n“…”\n“::”\nConvert a string to a symbol.\nReturns the argument unchanged.\nMake a symbol object from a string.\nCalls <code>U::from(self)</code>.\n“.Last.value”\n“levels”\nMissing argument marker\n“mode”\n“na.rm”\n“name”\n“names”\n<em>NAMESPACE</em>_.“\n“package”\n“previous”\n“quote”\n“row.names”\n“.Random.seed”\n“sort.list”\n“source”\n“spec”\n“:::”\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\n“tsp”\nUnbound marker\nConvert a <code>CHARSXP</code> object to a <code>Rstr</code> wrapper.\nConvert an environment object (ENVSXP) to a Env wrapper.\nConvert an expression object (EXPRSXP) to a Expr wrapper.\nConvert a function object (CLOSXP) to a Function wrapper.\nConvert a language object to a Language wrapper.\nConvert a list object (VECSXP) to a List wrapper.\nConvert a pair list object (LISTSXP) to a Pairlist wrapper.\nGet a wrapper for a promise.\nConvert a raw object to a Rstr wrapper.\nConvert a symbol object to a Symbol wrapper.")