searchState.loadedDescShard("extendr_api", 0, "A safe and user friendly R extension interface.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nFALSE value eg. <code>r!(FALSE)</code>\nEnable the construction of dataframes from arrays of …\nDerives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …\nNA value for integers eg. <code>r!(NA_INTEGER)</code>\nNA value for logical. <code>r!(NA_LOGICAL)</code>\nNA value for real values eg. <code>r!(NA_REAL)</code>\nNA value for strings. <code>r!(NA_STRING)</code>\nNULL value eg. <code>r!(NULL)</code>\nExecute R code by parsing and evaluating tokens.\nEnum use to unpack R objects into their specialist …\nExecute R code by parsing and evaluating tokens but …\nType of R objects used by Robj::rtype.\nTRUE value eg. <code>r!(TRUE)</code>\nThe resulting type after dereferencing.\nSimple and safe type conversions that may fail in a …\nDerives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …\nAn attempted conversion that consumes <code>self</code>, which may or …\nCall a function or primitive defined by a text expression …\nCreate a dataframe.\nDereferences the value.\nMutably dereferences the value.\nConvert R objects to a wide variety of types.\nError handling in Rust called from R.\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate a factor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a global variable.\nGraphic Device Operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA macro for constructing R langage objects.\nArgument parsing and checking.\nCreate a List R object from a list of name-value pairs.\nModule metadata\nA set of optional features and third-party crate …\nMaintain ownership of R objects.\nCreate a Pairlist R object from a list of name-value pairs.\nCommon exports for extendr-api.\nConvert a rust expression to an R object.\nPrint via the R error stream.\nPrint with a newline via the R output stream.\nrmacros - a set of macros to call actual R functions in a …\nR object handling.\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nConvert extendr’s Rtype to R’s SEXPTYPE. Panics if the …\nSee https://serde.rs/impl-serializer.html\nConvert R’s SEXPTYPE to extendr’s Rtype.\nThe sym! macro install symbols. You should cache your …\nMacro for running tests.\nProvide limited protection for multithreaded access to the …\nPerforms the conversion.\nPerforms the conversion.\nGet a local variable from the calling function or a global …\nWrappers are lightweight proxies for references to R …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert any R object to a Deserialize object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base environment; formerly R_NilValue\nThe namespace for base.\n“” as a STRSXP\n“” as a CHARSXP\nThe current interpreter environment.\n“.Generic”\nAn empty environment at the root of the environment tree\nParse a string into an R executable object and run it. …\nParse a string into an R executable object and run it using\nFind a namespace by name.\nFind a function or primitive that may be in a namespace.\nThe “global” environment\nGet a global function from global_env() and ancestors.\nGet a global variable from global_env() and ancestors. If …\nGet a local variable from current_env() and ancestors.\nNA_STRING as a CHARSXP\nFor registered namespaces.\nCreate a new environment\nThe nil object\nParse a string into an R executable object\nCurrent srcref, for debuggers\n——— New (in 1.4.0) device driver structure ——— …\nA structure containing graphical parameters\nA row-major array of pixels. One pixel is 32-bit, whose …\nbottom raster coordinate\ncan the gamma factor be modified?\nDevice-level clipping\ncan the device generate idle events\ncan the device generate keyboard events\ncan the device generate mousedown events\ncan the device generate mousemove events\ncan the device generate mouseup events\nCan do at least some horiz adjust of text 0 = none, 1 = …\nScreen capture. Returns an integer matrix representing …\nCharacter expansion (font size = fontsize*cex)\nGet the metrics for a single unicode codepoint.\nDraw a stroked/filled circle. gc.color() is the stroke …\nChange the clip rectangle.\nR only has the notion of a rectangular clipping region\npen colour (lines, text, borders, …)\nSet the line or text color of a primitive.\nCharacter size in rasters; [0]=x, [1]=y\nGet the current device.\nThis can be used to OVERRIDE canClip so that graphics …\npointer to device specific parameters\nThis should match R_GE_version, BUT it does not have to. …\nGet the device number for this device.\ntoggle for initial display list status\nThis is an environment holding event handlers.\nSet the fill color of a primitive.\nfill colour (for polygons, circles, rects, …)\nSet the font face.\nFont face (plain, italic, bold, …)\nFont family\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert device coordinates into a specified unit. This is …\nConvert device width/height coordinates into a specified …\nSet the gamma of the device. <code>out_color = in_color ** gamma</code>\n(initial) Device Gamma Correction\nGamma correction\ndevice_getEvent is no longer used, but the slot is kept …\nGet a device by number.\nThis is set while getGraphicsEvent is actively looking for …\nand strWidthUTF8\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = yes, 3 = except for missing values\n1 = no, 2 = yes\n1 = no, 2 = fully, 3 = semi\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInches per raster; [0]=x, [1]=y\nleft raster coordinate\nLine end\nDraw a stroked line. gc.color() is the stroke color.\nSet the line end type.\nSet the line height for text.\nSet the line join type.\nSet the line miter limit - the point where the line …\nSet the type of the line.\nSet the width of the line in chosen units.\nLine height (multiply by font size)\nline join\nline mitre\nLine type (solid, dashed, dotted, …)\nLine width (roughly number of pixels)\nDraw a mathematical expression.\nGet the height of a mathematical expression.\nGet the metrics for a mathematical expression.\nGet the width of a mathematical expression.\nDisable device rendering and flush.\nEnable device rendering.\nStart a new page. The page color can be set in advance.\nDraw a path with multiple segments. gc.color() is the …\nReference to a pattern fill\nDraw a stroked/filled polygon. gc.color() is the stroke …\nDraw a stroked/filled polyline. gc.color() is the stroke …\nFont size in points\nDraw a bitmap.\nDraw a stroked/filled axis-aligned rectangle. gc.color() …\nArea for future expansion. By zeroing this, devices are …\nright raster coordinate\nsets par(“fg”), par(“col”) and gpar(“col”)\nsets par(“bg”) and gpar(“fill”)\nDevice initial settings / /* These are things that the …\nDraw a special symbol centered on pos. See …\nDraw a text string starting at pos. TODO: do we need to …\nGet the height of a unicode string.\nGet the metrics for a unicode string.\nGet the width of a unicode string.\nConvert a specified unit coordinates into device …\nConvert a specified unit width/height coordinates into …\ntop raster coordinate\nSet the transform as a 3x2 matrix.\nIs rotated text good enough to be preferable to Hershey in …\nx character addressing offset - unused\ny character addressing offset\n1/2 interline space as frac of line height\nReturns the argument unchanged.\nGenerate a color from a CSS-like hex number. eg. …\nGenerate a color from a 3 digit CSS-like hex number. eg. …\nCalls <code>U::from(self)</code>.\nGenerate a color from rgb components (0-255).\nGenerate a color from rgba components (0-255).\nConvert to an R color.\nhttps://www.w3.org/TR/2018/REC-css-color-3-20180619/\nA builder of libR_sys::DevDesc.\nSets the font size (unit: point). <strong>Note that most of the </strong>…\nSets the device sizes (unit: point).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets inches per raster unit (i.e. point). <strong>Note that most </strong>…\nSets the initial value of colour.\nSets the initial value of fill.\nSets the initial value of font face.\nSets the initial value of line type.\nSets the initial value of pointsize.\nSet this to <code>false</code> if the implemented <code>strWidth()</code> and <code>text()</code> …\nTo what extent the device takes the responsibility of …\nThe underlying C structure <code>DevDesc</code> has two fields related …\nA graphic device implementation.\nWhether the device accepts a capturing operation. By …\nWhether the device has a locator capability, i.e., reading …\nWhether the device maintains a plot history. This …\nWhether the device accepts the drawing operation of a …\nA callback function to setup the device when the device is …\nA callback function that captures and returns the current …\nA callback function that returns the TextMetric (ascent, …\nA callback function to draw a circle.\nA callback function to clip.\nA callback function to free device-specific resources when …\nCreate a Device.\nA callback function to clean up when the device is …\nA callback function for X11_eventHelper.\nReturns the argument unchanged.\nA callback function to manage the “suspension level” …\nCalls <code>U::from(self)</code>.\nA callback function to draw a line.\nA callback function that returns the coords of the event\nA callback function called whenever the graphics engine …\nA callback function to confirm a new frame. It seems this …\nA callback function called whenever a new plot requires a …\nA callback function called when the user aborts some …\nA callback function to draw paths.\nA callback function to draw a polygon.\nA callback function to draw a polyline.\nA callback function to draw a Raster.\nA callback function to draw a rect.\nA callback function that returns the current device size …\nA callback function to draw a text.\nA callback function that returns the width of the given …\nWrapper for R output streams.\nReturns the argument unchanged.\nSave an object in the R data format to a <code>Write</code> trait. …\nSave an object in the R data format to a <code>Write</code> trait. …\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format. <code>version</code> should …\nThe hook will convert some objects into strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format to a <code>Write</code> trait. …\nSave an object in the R data format to a <code>Write</code> trait. …\nIterator over name-value pairs in lists.\nIterator over strings or string factors.\nGet an iterator over a string vector. Returns None if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake an empty str iterator.\nMetadata function argument.\nMetadata function.\nMetadata Impl.\nModule metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps invalid R identifiers, like <code>_function_name</code>, into …\nGenerate a wrapper for a non-method function.\nGenerate a wrapper for an implementation block.\nGenerate a wrapper for a method.\nReturn true if this primitive is <code>NA</code>.\nEnables support for the <code>either</code> crate, to allow accepting …\nDefines conversions between R objects and the <code>ndarray</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide a wrapper around R’s pointer type <code>SEXP</code> that is …\nA wrapper around R’s pointer type <code>SEXP</code> that is <code>Send</code>.\nReturns the argument unchanged.\nGet the inner <code>SEXP</code>\nCalls <code>U::from(self)</code>.\nAn array where the data has shared ownership and is copy …\none-dimensional shared ownership array\ntwo-dimensional shared ownership array\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nA producer element that can be assigned to once\nAn axis index.\nDescription of the axis, its length and its stride.\n“C” is an alias for row major ordering\nColumn major or “F” order\nContinue folding with this value\nAn array with copy-on-write behavior.\nCowArray’s representation.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nDimension description.\nCreate a new dimension value.\nDimension type of the producer\nDimension type\nAdds the two dimensions at compile time.\nArray shape and index trait.\nFold is complete and will return this value\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe array element type.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nError code for an error related to array shape or layout.\n“F” (for Fortran) is an alias for column major ordering\nFixed-size array used for array initialization\nValue controlling the execution of <code>.fold_while</code> on <code>Zip</code>.\nincompatible memory layout\nincompatible shape\nA single index.\nExtra indexing methods for array views\nEnable the construction of dataframes from arrays of …\nArgument conversion a dimension.\nProvides methods for converting a type <code>Self</code> into either a …\nArgument conversion into a producer.\nThe element produced per iteration.\nThe element produced per iteration.\nIterator that maps left or right iterators to …\nArray index type\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nDynamic dimension or index type.\nArray index type (signed)\nNext larger dimension\nA value of type <code>L</code>.\nElements that support linear algebra operations.\nA transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …\nCorresponding owned data with MaybeUninit elements\nSlicing information describing multiple mutable, disjoint …\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nTuple or fixed size arrays that can be used to index an …\nA producer of an n-dimensional set of elements; for …\nToken to represent a new axis in a slice description.\nA new axis of length 1.\nArray order\nDimensionality of the output array.\nout of bounds indexing\nThe resulting array storage of the same kind but …\nThe type of the slices created by <code>.multi_slice_move()</code>.\nThe resulting dimension type after broadcasting.\nThe sum of the two dimensions.\nThe type of the reference to the element that is produced, …\noverflow when computing offset, length, etc.\nOwned data.\nArcArray’s representation.\nArray’s representation.\nPattern matching friendly form of the dimension value.\nExecute R code by parsing and evaluating tokens.\nthe shape does not fit inside type limits\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray pointer’s representation.\nArray shape with a next smaller dimension.\nA value of type <code>R</code>.\nRow major or “C” order\nExecute R code by parsing and evaluating tokens but …\nElements that can be used as direct operands in arithmetic …\nA contiguous array shape of n dimensions.\nArray shape argument with optional order parameter\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nAn error related to array shape or layout.\nA slice (range with step size).\nA range with step size. <code>end</code> is an exclusive index. …\nA type that can slice an array of dimension <code>D</code>.\nRepresents all of the necessary information to perform a …\nA slice (range with step), an index, or a new axis token.\nNext smaller dimension (if applicable)\nAn array shape of n dimensions in c-order, f-order or …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\naliasing array elements\nBorrowed data.\nArray view’s representation.\nLock step function application across several arrays or …\nIterates over pairs of consecutive elements along the axis.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nAppend an array to the array along an axis.\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two or three dimensions.\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nReturn a mutable pointer to the first element in the array.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nReturn a pointer to the first element in the array.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice, if it is contiguous …\nReturn a standard-layout array containing the data, …\nPerform an elementwise assigment to <code>self</code> from <code>rhs</code>.\nAssign the value <code>input</code> to the element that self represents.\nPerform an elementwise assigment of values cloned from <code>self</code>…\n<strong>Promise</strong> that the array’s elements are all fully …\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nCreate a two-dimensional read-write array view with …\nReturn an iterator over the length and stride of each axis.\nReturn axis\nAxis identifier (index)\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturns a producer which traverses over all windows of a …\nArray zip macro: lock step function application across …\nAct like a larger size and/or shape array by <em>broadcasting</em> …\nCreate an array with uninitialized elements, shape <code>shape</code>.\nCall a function or primitive defined by a text expression …\nCast the raw pointer of the raw array view to a different …\nCast the raw pointer of the raw array view to a different …\nReturn a shared view of the array with elements as if they …\n<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …\nSelects <code>index</code> along the axis, collapsing the axis into …\nReturn an array view of column <code>index</code>.\nReturn Order::ColumnMajor if the input is true, …\nReturn a mutable array view of column <code>index</code>.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nConcatenate arrays along the given axis.\nConcatenate arrays along the given axis.\nCreate a dataframe.\nUnsafely translate the data representation from one element\nCreate an array with default values, shape <code>shape</code>\nConverts to a read-only view of the array.\nConverts to a read-only view of the array.\nConverts to a mutable view of the array.\nReturn a view of the diagonal elements of the array.\nReturn a read-write view over the diagonal elements of the …\nReturn the shape of the array in its “pattern” form, …\nPerform dot product or matrix multiplication of arrays <code>self</code>…\nCompute the dot product of one-dimensional arrays.\nPerform the matrix multiplication of the row vector <code>self</code> …\nPerform matrix multiplication of rectangular arrays <code>self</code> …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nend index; negative are counted from the back of the axis; …\nReturn an exact chunks producer (and iterable).\nReturn an exact chunks producer (and iterable).\nReturns the left value\nReturns the right value\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate an identity matrix of size <code>n</code> (square 2D array).\nCreate a factor.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nPerform an elementwise assigment to <code>self</code> from element <code>x</code>.\nReturns a reference to the first element of the array, or …\nReturns a mutable reference to the first element of the …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nTraverse the array elements and apply a fold, returning …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nFold along an axis.\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nEvaluate the provided expression for both <code>Either::Left</code> and …\nCall <code>f</code> for each element in the array.\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a read-only clone-on-write view of the array.\nCreate a read-only array view of the array.\nConverts the <code>Vec</code> of arrays to an owned 3-D array.\nCreate a one-dimensional array from a vector (no copying …\nCreate a read-write array view of the array.\nReturns the argument unchanged.\nConverts the <code>Vec</code> of arrays to an owned 2-D array.\nCreate a one-dimensional array from a boxed slice (no …\nCreate a one-dimensional read-write array view of the data …\nCreate a one-dimensional clone-on-write view of the data …\nCreate a one-dimensional read-only array view of the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Shape</code> from <code>dimension</code>, using the default memory …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Zip</code> from the input array or other producer <code>p</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a 2D matrix from its diagonal\nCreate a square 2D matrix of the specified size, with the …\nCreate an array with copies of <code>elem</code>, shape <code>shape</code>.\nCreate a one-dimensional array from an iterator or …\nCreate a one-dimensional array from an iterable.\nCreate a new <code>ShapeError</code>\nConvert an R object to a <code>ndarray</code> ArrayView1.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nConvert an R object to a <code>ndarray</code> ArrayView2.\nCreate a read-write array view borrowing its data from a …\nCreate a read-only array view borrowing its data from a …\nCreate an array with values created by the function <code>f</code>.\nCreate an <code>ArrayViewMut&lt;A, D&gt;</code> from shape information and a …\nCreate an <code>RawArrayViewMut&lt;A, D&gt;</code> from shape information and …\nCreate an <code>ArrayView&lt;A, D&gt;</code> from shape information and a raw …\nCreate an <code>RawArrayView&lt;A, D&gt;</code> from shape information and a …\nCreate an array with values created by the function <code>f</code>.\nCreate an array with the given shape from a vector. (No …\nCreates an array from a vector and interpret it according …\nCreate a one-dimensional array from a vector (no copying …\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nCreate a one-dimensional array with <code>n</code> geometrically spaced …\nGet a reference of a element through the view.\nReturn a reference to the element at <code>index</code>, or return <code>None</code> …\nConvert a mutable array view to a mutable reference of a …\nReturn a mutable reference to the element at <code>index</code>, or …\nReturn a raw pointer to the element at <code>index</code>, or return …\nReturn a raw pointer to the element at <code>index</code>, or return …\nGet a global variable.\nReturns the number of axes in the input array.\nReturns the number of dimensions of the input array for …\nGet a reference of a element through the view.\nConvert a mutable array view to a mutable reference of a …\nGet a reference of a element through the view.\nReturn the index of the axis.\nReturns a view restricted to <code>index</code> along the axis, with …\nCollapses the array to <code>index</code> along the axis and removes …\nCollapses the array to <code>index</code> along the axis and removes …\nReturns a mutable view restricted to <code>index</code> along the axis, …\nCreate a new <code>Zip</code> with an index producer and the producer <code>p</code>.\nReturn an iterator of indexes and references to the …\nReturn an iterator of indexes and mutable references to …\nCreate an iterable of the array shape <code>shape</code>.\nReturn an iterable of the indices of the passed-in array.\nInsert new array axis at <code>axis</code> and return the result.\nInsert new array axis of length 1 at <code>axis</code>, modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a shared view of the array with elements as if they …\nReturn the diagonal as a one-dimensional array.\nConvert an array or array view to another with the same …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert any array or array view to a dynamic dimensional …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nExtract the value of an either over two equivalent types.\nReturn the inner value\nReturn the inner value\nConvert the inner value to an iterator.\nTurn the array into a uniquely owned array, cloning the …\nConvert the dimension into a pattern matching friendly …\nConvert the value into an <code>NdProducer</code>.\nReturn a vector of the elements in the array, in the way …\nConsume the mutable view and return a mutable reference to …\nConsume the view and return a reference to the single …\nReturns the single element in the array without cloning it.\nTransform the array into <code>shape</code>; any shape with the same …\nTurn the array into a shared ownership (copy on write) …\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReverse the stride of <code>axis</code>.\nReturn true if input is Order::ColumnMajor, false otherwise\nReturn true if it is <code>Done</code>, false if <code>Continue</code>\nReturn whether the array has any elements\nReturns <code>true</code> if <code>self</code> is an <code>Index</code> value.\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.\nReturns <code>true</code> iff the array is the owned variant.\nReturns <code>true</code> iff the data is the <code>Owned</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nReturn true if input is Order::RowMajor, false otherwise\nReturns <code>true</code> if <code>self</code> is a <code>Slice</code> value.\nReturn true if the array is square, false otherwise.\nReturn <code>true</code> if the array data is laid out in contiguous …\nReturns <code>true</code> iff the array is the view (borrowed) variant.\nReturns <code>true</code> iff the data is the <code>View</code> variant.\nProducers, iterables and iterators.\nBorrow the inner value as an iterator.\nReturn an iterator of references to the elements of the …\nMutably borrow the inner value as an iterator.\nReturn an iterator of mutable references to the elements …\nReturn the <code>ErrorKind</code> of this error.\nReturn a producer and iterable that traverses over all 1D …\nReturn a producer and iterable that traverses over all 1D …\nA macro for constructing R langage objects.\nReturns a reference to the last element of the array, or …\nReturns a mutable reference to the last element of the …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nReturn the total number of elements in the array.\nReturn length\nLength in count of elements of the current axis\nReturn the length of <code>axis</code>.\nLinear algebra.\nCreate a one-dimensional array with <code>n</code> evenly spaced …\nCreate a List R object from a list of name-value pairs.\nCreate a List R object from a list of name-value pairs.\nCreate a one-dimensional array with <code>n</code> logarithmically …\nMap <code>f</code> over the contained value and return the result in the\nCall <code>f</code> by reference on each element and create a new array …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nReduce the values along an axis into just one value, …\nReduce the values along an axis into just one value, …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nModify the array in place by calling <code>f</code> by mutable …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nCall <code>f</code> on a mutable reference of each element and create a …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nCall <code>f</code> by <strong>v</strong>alue on each element and create a new array …\nModify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …\nCall <code>f</code> by <strong>v</strong>alue on each element, update the array with the …\nConsume the array, call <code>f</code> by <strong>v</strong>alue on each element, and …\nReturn the axis with the greatest stride (by absolute …\nCreate an array with uninitialized elements, shape <code>shape</code>.\nReturns the arithmetic mean x̅ of all elements in the …\nReturn mean along <code>axis</code>.\nIf possible, merge in the axis <code>take</code> to <code>into</code>.\nMove all elements from self into <code>new_array</code>, which must be …\nMove all elements from self into <code>new_array</code>, which must be …\nSplit the view into multiple disjoint slices.\nSplit the view into multiple disjoint slices.\nReturn multiple disjoint, sliced, mutable views of the …\nReturn the number of columns (length of <code>Axis(1)</code>) in the …\nReturns the number of dimensions (number of axes).\nReturn the number of dimensions (axes) in the array\nPerform an elementwise negation of <code>self</code> and return the …\nPerform an elementwise negation of reference <code>self</code> and …\nCreate a new cell with the given value\nCreate a new <code>Slice</code> with the given extents.\nReturns a new <code>SliceInfo</code> instance.\nPerform an elementwise unary not of reference <code>self</code> and …\nPerform an elementwise unary not of <code>self</code> and return the …\nReturn the number of rows (length of <code>Axis(0)</code>) in the …\nCreate an array with ones, shape <code>shape</code>.\nReturns the number of axes in the output array.\nReturns the number of dimensions after calling <code>.slice()</code> …\nReturn an iterator that traverses over the outermost …\nReturn an iterator that traverses over the outermost …\nCreate a Pairlist R object from a list of name-value pairs.\nPermute the axes.\nndarray prelude.\nReturn the product of all elements in the array.\nAppend an array to the array along an axis.\nAppend a column to an array\nAppend a row to an array\nConvert a rust expression to an R object.\nCreate a one-dimensional array with elements from <code>start</code> to …\nReturn the shape of the producer.\nReturn the shape of the array as it’s stored in the …\nReturn a reference to the dimension\nReturn a reference to the dimension\nReturn a raw view of the array.\nReturn a raw mutable view of the array.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nConvert the view into an <code>ArrayViewMut&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> …\nConvert the view into an <code>ArrayView&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> is a …\nRemove array axis <code>axis</code> and return the result.\nRemove the <code>index</code>th elements along <code>axis</code> and shift down …\nPrint via the R error stream.\nPrint with a newline via the R output stream.\n<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for </em>…\nTranspose the array by reversing axes.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturn an array view of row <code>index</code>.\nReturn Order::RowMajor if the input is true, …\nReturn a mutable array view of row <code>index</code>.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nSlice argument constructor.\nReturn the sum of all elements in the array.\nPerform the operation <code>self += alpha * rhs</code> efficiently, …\nAlong <code>axis</code>, select arbitrary subviews corresponding to …\nReturn the shape of the array as a slice.\nCompute the size of the dimension (number of elements)\nReturn the size of the shape in number of elements\nReturn the size of the shape in number of elements\nReturn a the number of element tuples in the Zip\nCompute the size while checking for overflow.\nReturn a sliced view of the array.\nReturn a view of the array, sliced along the specified …\nSlice the array in place along the specified axis.\nReturn a mutable view of the array, sliced along the …\nSlice the array in place without changing the number of …\nReturn a view of a slice of the array, with a closure …\nSlice the array in place, with a closure specifying the …\nReturn a mutable view of a slice of the array, with a …\nSlice the array, possibly changing the number of …\nReturn a sliced read-write view of the array.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the array view along <code>axis</code> and return one view …\nSplit the array view along <code>axis</code> and return one array …\nSplit the array view along <code>axis</code> and return one array …\nSplit the array view along <code>axis</code> and return one mutable …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nStack arrays along the new axis.\nStack arrays along the new axis.\nStack arrays along the new axis.\nStack arrays along the new axis.\nstart index; negative are counted from the back of the axis\nReturn standard deviation of elements in the array.\nReturn standard deviation along <code>axis</code>.\nstep size in elements; the default is 1, for every element.\nCreate a new <code>Slice</code> with the given step size (multiplied …\nReturn stride\nStride in count of elements of the current axis\nReturn the stride of <code>axis</code>.\nReturn the strides of the array as a slice.\nReturn the sum of all elements in the array.\nReturn sum along <code>axis</code>.\nSwap elements at indices <code>index1</code> and <code>index2</code>.\nSwap value with another cell\nSwap axes <code>ax</code> and <code>bx</code>.\nThe sym! macro install symbols. You should cache your …\nReturn a transposed view of the array.\nMacro for running tests.\nReturn an uniquely owned copy of the array.\nTransform the array into <code>new_shape</code>; any shape with the …\nReturn a shared ownership (copy on write) array, cloning …\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReturn an vector with the elements of the one-dimensional …\nReturn the transpose: row major becomes column major and …\nPerforms the conversion.\nReturns the first type that matches the provided <code>Robj</code>, …\nReturns the first type that matches the provided <code>Robj</code>, …\nPerforms the conversion.\nConverts the array into <code>Array&lt;A, D&gt;</code> if this is possible …\nMacro for unwrapping the left side of an <code>Either</code>, which …\nDual to <code>try_left!</code>, see its documentation for more …\nGet a reference of a element through the view without …\nConvert a mutable array view to a mutable reference of a …\nGet a reference of a element through the view without …\nPerform <em>unchecked</em> array indexing.\nPerform <em>unchecked</em> array indexing.\nCreate an array with uninitialized elements, shape <code>shape</code>.\nCreate an array with uninitialized elements, shape <code>shape</code>.\nReturns the left value\nReturns the right value\nSwap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.\nReturn variance of elements in the array.\nGet a local variable from the calling function or a global …\nReturn variance along <code>axis</code>.\nReturn a read-only view of the array\nReturn a read-write view of the array\nVisit each element in the array by calling <code>f</code> by reference …\nReturn a window producer and iterable.\nCreates a dimension of all zeros with the specified ndim.\nCreate an array with zeros, shape <code>shape</code>.\nCreate a new dimension value with <code>n</code> axes, all zeros\nTraverse two arrays in unspecified order, in lock step, …\nend index; negative are counted from the back of the axis; …\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nAn iterator over the length and stride of each axis of an …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over an axis and and yields …\nAn iterator that traverses over an axis and and yields …\nExact chunks producer and iterable.\nExact chunks iterator.\nExact chunks iterator.\nExact chunks producer and iterable.\nAn iterator over the indexes and elements of an array.\nAn iterator over the indexes and elements of an array …\nIndices producer and iterable.\nAn iterator over the indexes of an array shape.\nAn iterator over the elements of an array.\nAn iterator over the elements of an array (mutable).\nSee <code>.lanes()</code> for more information.\nAn iterator that traverses over all axes but one, and …\nAn iterator that traverses over all dimensions but the …\nSee <code>.lanes_mut()</code> for more information.\nWindow producer and iterable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the iterator at <code>index</code>, yielding two disjoint …\nSplits the iterator at index, yielding two disjoint …\nSplits the iterator at index, yielding two disjoint …\nSplits the iterator at <code>index</code>, yielding two disjoint …\nMatrix Multiplication\nThe result of the operation.\nGeneral matrix-matrix multiplication.\nGeneral matrix-vector multiplication.\nKronecker product of 2D matrices.\nAn array where the data has shared ownership and is copy …\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nAn axis index.\nAn array with copy-on-write behavior.\nDimension description.\nCreate a new dimension value.\nArray shape and index trait.\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nNext larger dimension\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nToken to represent a new axis in a slice description.\nPattern matching friendly form of the dimension value.\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nNext smaller dimension (if applicable)\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two or three dimensions.\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nArray zip macro: lock step function application across …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nReturns the number of dimensions (number of axes).\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nCreates a dimension of all zeros with the specified ndim.\nGeneric access to typed slices in an Robj.\nProvides access to the attributes of an R object.\nTrait used for incomming parameter conversion.\nThis is an extension trait to provide a convenience method …\nThe following impls add operators to Robj.\nThe following impls wrap specific Rinternals.h functions.\nWrapper for an R S-expression pointer (SEXP).\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nAdd two R objects, consuming the left hand side. panics on …\nGet a scalar rust boolean.\nGet a scalar integer.\nGet a read-only reference to the content of an integer …\nGet a read-write reference to the content of an integer or …\nGet a <code>Vec&lt;i32&gt;</code> copied from the object.\nConvert an <code>Robj</code> into <code>Integers</code>.\nGet a scalar boolean as a tri-boolean Rbool value.\nGet an iterator over logical elements of this slice.\nGet a read-only reference to the content of a logical …\nGet a <code>Vec&lt;Rbool&gt;</code> copied from the object using the …\nGet a read-only reference to the content of an integer or …\nGet a read-write reference to the content of a raw vector.\nGet a scalar real.\nGet an iterator over real elements of this slice.\nGet a read-only reference to the content of a double …\nGet a read-write reference to the content of a double …\nGet a <code>Vec&lt;f64&gt;</code> copied from the object.\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nGet a read-only reference to a scalar string type.\nGet a vector of string references. String references …\nGet a vector of owned strings. Owned strings have long …\nGet an immutable slice to this object’s data.\nGet a mutable slice to this object’s data.\nGet the <code>class</code> attribute as a string iterator if one exists.\nGet the <code>dim</code> attribute as an integer iterator if one exists.\nGet the <code>dimnames</code> attribute as a list iterator if one …\nDivide two R objects, consuming the left hand side. panics …\nEvaluate the expression in R and return an error or an R …\nEvaluate the expression and return NULL or an R object.\nEvaluate the expression in R and return an error or an R …\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nReturns the argument unchanged.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a vector of Robj into a list.\nYou can return a ListIter from a function.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a rust object to NULL or another type.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a column, matrix or matrix3d to an Robj.\nMake an robj from a wrapper.\nYou can return a PairlistIter from a function.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a vector of Rstr into strings.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nA ref of an robj can be constructed from a ref to a SEXP …\nGet a copy of the underlying SEXP.\nGet a specific attribute as a borrowed <code>Robj</code> if it exists.\nReturn true if an attribute exists.\nReturn true if this object has an attribute called <code>names</code>.\nReturn true if this object has this class attribute. …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Robj</code> contains no elements.\nIs this object is an <code>NA</code> scalar? Works for character, …\nGet the extended length of the object.\nGet the <code>levels</code> attribute as a string iterator if one …\nMultiply two R objects, consuming the left hand side. …\nGet the <code>names</code> attribute as a string iterator if one exists.\nGet the type of an R object.\nSet a specific attribute in-place and return the object.\nSet the <code>class</code> attribute from a string iterator, and return …\nSet the <code>names</code> attribute from a string iterator.\nSubtract two R objects, consuming the left hand side. …\nConverts a reference to an ndarray Array into an …\nConverts an ndarray Array into an equivalent R array. The …\nConversions to Robj\nTrait used for incomming parameter conversion.\nThis is an extension trait to provide a convenience method …\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nCollects an iterable into an <code>RArray</code>. The iterable must …\nCollects an iterable into an <code>RArray</code>. The iterable must …\nConvert a wide range of iterators to Robj.\nConvert a wide range of iterators to Robj.\nGenerates a <code>ToVectorValue</code> for a type, by inheriting the …\nThe following impls add operators to Robj.\nDo the equivalent of x(a, b, c)\nDo the equivalent of x(a, b, c)\nDo the equivalent of x$y\nDo the equivalent of x$y\nDo the equivalent of x :: y\nDo the equivalent of x :: y\nDo the equivalent of <code>x[[y]]</code>\nDo the equivalent of <code>x[[y]]</code>\nDo the equivalent of <code>x[y]</code>\nDo the equivalent of <code>x[y]</code>\nDo the equivalent of x ~ y\nDo the equivalent of x ~ y\nThe following impls wrap specific Rinternals.h functions.\nAllocate a matrix object.\nAllocate a matrix object.\nAllocated an owned object of a certain type.\nAllocated an owned object of a certain type.\nConvert a factor to a string vector.\nConvert a factor to a string vector.\nConvert to a string vector.\nConvert to a string vector.\nConvert to vectors of many kinds.\nConvert to vectors of many kinds.\nReturn true if two arrays have identical dims.\nReturn true if two arrays have identical dims.\nGenerate a text representation of this object.\nGenerate a text representation of this object.\nDo a deep copy of this object. Note that clone() only adds …\nDo a deep copy of this object. Note that clone() only adds …\nIf this object is a promise, evaluate it, otherwise return …\nIf this object is a promise, evaluate it, otherwise return …\nFind a function in an environment ignoring other variables.\nFind a function in an environment ignoring other variables.\nFind a variable in an environment.\nFind a variable in an environment.\nGet the source ref.\nGet the source ref.\nGet the source filename.\nGet the source filename.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturn true if this is an array.\nReturn true if this is an array.\nReturn true if this is CHARSXP.\nReturn true if this is CHARSXP.\nReturn true if this is a complex vector.\nReturn true if this is a complex vector.\nReturn true if this is an environment.\nReturn true if this is an environment.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is factor.\nReturn true if this is factor.\nReturn true if this is a data frame.\nReturn true if this is a data frame.\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is a language object (LANGSXP).\nReturn true if this is a language object (LANGSXP).\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is a boolean (logical) vector\nReturn true if this is a boolean (logical) vector\nReturn true if this is a matrix.\nReturn true if this is a matrix.\nReturn true if this is the null object.\nReturn true if this is the null object.\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is an object (ie. has a class …\nReturn true if this is an object (ie. has a class …\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is an environment.\nReturn true if this is an environment.\nReturn true if this is RAWSXP.\nReturn true if this is RAWSXP.\nReturn true if this is a real (f64) vector.\nReturn true if this is a real (f64) vector.\nReturn true if this is a S4 object.\nReturn true if this is a S4 object.\nReturn true if this is a string.\nReturn true if this is a string.\nReturn true if this is a symbol.\nReturn true if this is a symbol.\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a user defined binop.\nReturn true if this is a user defined binop.\nReturn true if this is a valid string.\nReturn true if this is a valid string.\nReturn true if this is a valid string.\nReturn true if this is a valid string.\nReturn true if this is a vector.\nReturn true if this is a vector.\nReturn true if this is an atomic vector.\nReturn true if this is an atomic vector.\nReturn true if this is a vector list.\nReturn true if this is a vector list.\nReturn true if this is can be made into a vector.\nReturn true if this is can be made into a vector.\nNumber of columns of a matrix\nNumber of columns of a matrix\nNumber of rows of a matrix\nNumber of rows of a matrix\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nCopy a vector and resize it. See. …\nCopy a vector and resize it. See. …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nRcplx is a wrapper for f64 in the context of an R’s …\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nImaginary portion of the complex number\nReal portion of the complex number\nGenerates an implementation of a binary operator Trait for …\nGenerates an implementation of a binary operate-assign …\nGenerates an implementation of type conversion Traits from …\nGenerates an implementation of <code>std::iter::Sum</code> for a scalar …\nGenerates an implementation of a number of Traits for the …\nGenerates an implementation of a unary operator Trait for …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nNA always fails.\nReturn a <code>false</code> <code>Rbool</code>.\nReturns the argument unchanged.\nConvert this construct a <code>Rbool</code> from a rust boolean.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this triboolean is <code>false</code> but not <code>NA</code>.\nReturn true is the is a NA value.\nReturn <code>true</code> if this triboolean is <code>true</code> but not <code>NA</code>.\nConstruct a NA.\nReturn a <code>NA</code> <code>Rbool</code>.\nConvert this <code>Rbool</code> to a bool. Note <code>NA</code> will be true.\nReturn a <code>true</code> <code>Rbool</code>.\nConvert an <code>LGLSXP</code> object into a <code>Rbool</code> (tri-state boolean). …\nRcplx is a wrapper for f64 in the context of an R’s …\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nNA always fails.\nReturns the argument unchanged.\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nConstruct a NA.\nNegate a Rcplx value.\nNegate a Rcplx value.\nReal portion of the complex number\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nNA always fails.\nDebug format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nConstruct a NA.\nNegate a Rfloat value.\nNegate a Rfloat value.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nNA always fails.\nDebug format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nConstruct a NA.\nNegate a Rint value, overflows to NA.\nNegate a Rint value, overflows to NA.\nLogical not a Rint value, overflows to NA.\nLogical not a Rint value, overflows to NA.\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a bool to a Robj.\nRaw objects.\nMap a char to a Robj string.\nMap a f32 to a Robj.\nMap a f64 to a Robj.\nMap a i16 to a Robj.\nMap a i32 to a Robj.\nMap a i64 to a Robj.\nMap a i8 to a Robj.\nStart of a map. We require that keys must be strings.\nWrapper struct: Wrap(T)\nWrapper struct in enum: Enum::Wrap(T)\nNone of an option is NULL.\nStart of a vector or other sequence.\nSome of an option is that value.\nMap a string slice to a Robj string.\nStart of a struct. Collect just the values in a list.\neg. <code>Enum::Point { x: i32, y: i32 }</code>\nStart of a tuple.\nStart of a tuple struct eg. <code>Point(i32, i32)</code>.\nStart of a struct variant eg. <code>Enum::Point{ x: i32, y: i32}</code>.\nMap a u16 to a Robj.\nMap a u32 to a Robj.\nMap a u64 to a Robj.\nMap a u8 to a Robj.\nUnit variant: Enum::Name\nConvert a serializable object to a Robj.\nA global lock, that should represent the global lock on …\nWrap an R function such as <code>Rf_findFunction</code> and convert …\nRun <code>f</code> while ensuring that <code>f</code> runs in a single-threaded …\nConvert a CHARSXP object to a Rstr wrapper.\nConvert an environment object (ENVSXP) to a Env wrapper.\nConvert an expression object (EXPRSXP) to a Expr wrapper.\nConvert a function object (CLOSXP) to a Function wrapper.\nConvert a language object to a Language wrapper.\nConvert a list object (VECSXP) to a List wrapper.\nConvert a pair list object (LISTSXP) to a Pairlist wrapper.\nGet a wrapper for a promise.\nConvert a raw object to a Rstr wrapper.\nConvert a symbol object to a Symbol wrapper.\nThis provides an abstraction for R’s <code>data.frame</code>…\n<code>ExternalPtr</code> is a way to leak Rust allocated data to R, …\nWrappers for matrices with deferred arithmetic.\nA pairlist is a linked list of values with optional symbol …\nS4 class support.\nRust trait for implementing ALTREP. Implement one or more …\nSafely implement ALTREP_CLASS.\nCoerce this object into some other type, if possible.\nSafely implement R_altrep_data1, R_altrep_data2. When …\nGet the data pointer for this vector, possibly expanding …\nGet the data pointer for this vector, returning NULL if …\nDuplicate this object. Called by Rf_duplicate. Currently …\nDuplicate this object, possibly duplicating attributes. …\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector a single element of …\nImplement subsetting (eg. <code>x[10:19]</code>) for this Altrep vector.\nReturns the argument unchanged.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nPrint the text for .Internal(inspect(obj))\nCalls <code>U::from(self)</code>.\nReturn true if the ALTREP object has been manifested …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nGet the virtual length of the vector. For example for a …\nMake a complex ALTREP class that can be used to make …\nMake an integer ALTREP class that can be used to make …\nMake a logical ALTREP class that can be used to make …\nMake a raw ALTREP class that can be used to make vectors.\nMake a real ALTREP class that can be used to make vectors.\nMake a string ALTREP class that can be used to make …\nReturn the maximum of the elements in this vector. If …\nReturn the maximum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nFetch the state of this object when writing to a file.\nSafely (relatively!) implement R_set_altrep_data1, …\nSet a single element in this vector.\nSet a single element in this list.\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nSimplified constructor that is called when loading an …\nAn obscure <code>NA</code>-aware wrapper for R’s complex vectors. Can …\nTreat Complexes as if it is a slice, like <code>Vec&lt;Rcplx&gt;</code>\nTreat Complexes as if it is a mutable slice, like …\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP complex (CPLXSXP) vectors …\nWrapper for creating ALTREP complex (CPLXSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a complex object. Forces ALTREP …\nReturn a writable iterator for a complex object. Forces …\nCreate a new vector of complexes.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nA representation of a typed <code>data.frame</code>\nA trait to convert a collection of <code>IntoDataFrameRow</code> into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse <code>#[derive(IntoDataFrameRow)]</code> to use this.\nAn obscure <code>NA</code>-aware wrapper for R’s double vectors. Can …\nTreat Doubles as if it is a slice, like <code>Vec&lt;Rfloat&gt;</code>\nTreat Doubles as if it is a mutable slice, like <code>Vec&lt;Rfloat&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP double (REALSXP) vectors …\nWrapper for creating ALTREP double (REALSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a double object. Forces ALTREP …\nReturn a writable iterator for a double object. Forces …\nCreate a new vector of doubles.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nIterator over the names and values of an environment\nGet the environment flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an R environment object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over an environment.\nGet a variable from an environment, but not its ancestors.\nGet the names in an environment.\nCreate a new, empty environment with a reserved size.\nCreate a new, empty environment.\nGet the enclosing (parent) environment.\nSet or define a variable in an environment.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nWrapper for creating Expressions (EXPRSXP) objects.\nCalls <code>U::from(self)</code>.\nWrapper for creating Expressions (EXPRSXP) objects.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturn an iterator over the values of this expression list.\nWrapper for creating R objects containing any Rust object.\nThis is a zero-length object that holds the type of the …\nGet the “address” field of an external pointer. …\nGet the “address” field of an external pointer as a …\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nThis allows us to treat the Robj as if it is the type T.\nThis allows us to treat the Robj as if it is the mutable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct an external pointer object from any type T. In …\nGet the “protected” field of an external pointer. This …\nThis is the contained Robj.\nGet the “tag” of an external pointer. This is the type …\nWrapper for creating functions (CLOSSXP).\nGet the body of the function or None if it is a primitive.\nDo the equivalent of x(a, b, c)\nGet the environment of the function or None if it is a …\nGet the formal arguments of the function or None if it is …\nReturns the argument unchanged.\nMake a function from parts.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nAn obscure <code>NA</code>-aware wrapper for R’s integer vectors. Can …\nTreat Integers as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Integers as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP integer (INTSXP) vectors …\nWrapper for creating ALTREP integer (INTSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a integer object. Forces ALTREP …\nReturn a writable iterator for a integer object. Forces …\nCreate a new vector of integers.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating language objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can use the FromList wrapper to coerce a Robj into a …\nIterator over the objects in a VECSXP, EXPRSXP or …\nGet the list a slice of <code>Robj</code>s.\nLists behave like slices of Robj.\nGet a reference to an element in the list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrapper for creating a list (VECSXP) object from an …\nConvert an iterator to a <code>List</code> object.\nBuild a list using separate names and values iterators. …\nWrapper for creating a list (VECSXP) object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a List into a HashMap, consuming the list.\nConvert a List into an interator, consuming the list.\nReturn an iterator over the names and values of this list.\nLength of a list iterator.\nCreate a new list.\nSet an element in the list.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nConvert a general R object into a List iterator if …\nConvert a general R object into a List iterator if …\nReturn an iterator over the values of this list.\nAn obscure <code>NA</code>-aware wrapper for R’s logical vectors. Can …\nTreat Logicals as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Logicals as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP logical (LGLSXP) vectors …\nWrapper for creating ALTREP logical (LGLSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a logical object. Forces ALTREP …\nReturn a writable iterator for a logical object. Forces …\nCreate a new vector of logicals.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nGenerates <code>impl</code> block and required traits for a vector type.\nWrapper for creating and using matrices and arrays.\nReturns a flat representation of the array in col-major.\nReturns a flat mutable representation of the array in …\nGet the dimensions for this array.\nDimensions of the array.\nDimensions of the array.\nDimensions of the array.\nDimensions of the array.\nConvert a faer MatRef into Robj.\nReturns the argument unchanged.\nZero-based indexing in row, column order.\nZero-based mutable indexing in row, column order.\nCalls <code>U::from(self)</code>.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nMake a new column type.\nMake a new column type.\nCreate a new matrix wrapper.\nCreate a new matrix wrapper.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of submatrices.\nGet the number of submatrices.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nWrapper for handling potentially NULL values.\nReturns the argument unchanged.\nConvert an Option into Nullable type\nConvert an object that may be null to a rust type.\nCalls <code>U::from(self)</code>.\nConvert Nullable R object into <code>Option</code>\nMap <code>Nullable&lt;T&gt;</code> into <code>Nullable&lt;U&gt;</code>\nConvert an object that may be null to a rust type.\nConvert an object that may be null to a rust type.\nGenerate paits of names and values.\nReturns the argument unchanged.\nConstruct a NULL pairlist (which is a NULL).\nReturns the argument unchanged.\nConvert an iterator of names and values to a pairlist …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a PairList into an interator, consuming the …\nGenerate paits of names and values.\nMake an empty pairlist iterator.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can pass a PairlistIter to a function.\nWrapper for creating primitive objects.\nReturns the argument unchanged.\nMake a Primitive object from a string.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating promises (PROMSXP).\nGet the code to be executed from the promise.\nGet the environment for the execution from the promise.\nIf this promise has not been evaluated, evaluate it, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the seen flag (avoids recursion).\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nGet the value of the promise, once executed.\nWrapper for creating raw (byte) objects.\nGet a slice of bytes from the Raw object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Raw object of length <code>len</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating CHARSXP objects. These are used only …\nTreat a Rstr as a string slice.\nGet the string from a character object. If the string is …\nTreat <code>Rstr</code> like <code>&amp;str</code>.\nCompare a <code>Rstr</code> with a string slice.\nCompare a <code>Rstr</code> with a <code>Rstr</code>.\nReturns the argument unchanged.\nConvert a string slice to a Rstr.\nConvert a String to a Rstr.\nMake a character object from a string.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nGet a named slot from a S4 object.\nCheck if a named slot exists.\nCalls <code>U::from(self)</code>.\nCreate a S4 object.\nCreate a S4 class.\nSet a named slot in a S4 object.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nThis is a relatively expensive operation, so use a …\nGet an element in a string vector.\nconvert string-like objects into a Strings object.\nReturns the argument unchanged.\nConvert an iterator to a Strings object.\nWrapper for creating string vector (STRSXP) objects.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nGet an iterator for this string vector.\nCreate a new, empty list.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nSet a single element of this string vector.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating symbol objects.\nGet the string from a symbol object.\n“base”\n“{”\n“[[”\n“[”\n“class”\n“.Device”\n“dim”\n“dimnames”\n“$”\n“.defined”\n“.Method”\n“packageName”\n“.target”\n“…”\n“::”\nConvert a string to a symbol.\nReturns the argument unchanged.\nMake a symbol object from a string.\nCalls <code>U::from(self)</code>.\n“.Last.value”\n“levels”\nMissing argument marker\n“mode”\n“na.rm”\n“name”\n“names”\n<em>NAMESPACE</em>_.“\n“package”\n“previous”\n“quote”\n“row.names”\n“.Random.seed”\n“sort.list”\n“source”\n“spec”\n“:::”\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\n“tsp”\nUnbound marker")