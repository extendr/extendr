searchState.loadedDescShard("extendr_api", 0, "An ergonomic, opinionated, safe and user-friendly wrapper …\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nFALSE value eg. <code>r!(FALSE)</code>\nEnable the construction of dataframes from arrays of …\nDerives an implementation of <code>From&lt;Struct&gt; for Robj</code> and …\nNA value for integers eg. <code>r!(NA_INTEGER)</code>\nNA value for logical. <code>r!(NA_LOGICAL)</code>\nNA value for real values eg. <code>r!(NA_REAL)</code>\nNA value for strings. <code>r!(NA_STRING)</code>\nNULL value eg. <code>r!(NULL)</code>\nExecute R code by parsing and evaluating tokens.\nEnum use to unpack R objects into their specialist …\nExecute R code by parsing and evaluating tokens but …\nType of R objects used by Robj::rtype.\nTRUE value eg. <code>r!(TRUE)</code>\nThe resulting type after dereferencing.\nSimple and safe type conversions that may fail in a …\nDerives an implementation of <code>TryFrom&lt;Robj&gt; for Struct</code> and …\nAn attempted conversion that consumes <code>self</code>, which may or …\nCall a function or primitive defined by a text expression …\nCreate a dataframe.\nDereferences the value.\nMutably dereferences the value.\nConvert R objects to a wide variety of types.\nError handling in Rust called from R.\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate a factor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a global variable.\nGraphic Device Operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA macro for constructing R language objects.\nArgument parsing and checking.\nCreate a List R object from a list of name-value pairs.\nModule metadata\nA set of optional features and third-party crate …\nMaintain ownership of R objects.\nCreate a Pairlist R object from a list of name-value pairs.\nCommon exports for extendr-api.\nConvert a rust expression to an R object.\nPrint via the R error stream.\nPrint with a newline via the R output stream.\nrmacros - a set of macros to call actual R functions in a …\nR object handling.\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nConvert extendr’s Rtype to R’s SEXPTYPE. Panics if the …\nSee https://serde.rs/impl-serializer.html\nConvert R’s SEXPTYPE to extendr’s Rtype.\nThe sym! macro install symbols. You should cache your …\nMacro for running tests.\nProvide limited protection for multithreaded access to the …\nPerforms the conversion.\nPerforms the conversion.\nGet a local variable from the calling function or a global …\nWrappers are lightweight proxies for references to R …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert any R object to a Deserialize object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base environment; formerly <code>R_NilValue</code>\nThe namespace for base.\n“” as a STRSXP\n“” as a CHARSXP\nThe current interpreter environment.\n“.Generic”\nAn empty environment at the root of the environment tree\nParse a string into an R executable object and run it. …\nParse a string into an R executable object and run it using\nFind a namespace by name.\nFind a function or primitive that may be in a namespace.\nThe “global” environment\nGet a global function from global_env() and ancestors.\nNA_STRING as a CHARSXP\nFor registered namespaces.\nCreate a new environment\nThe nil object\nParse a string into an R executable object\nCurrent srcref, for debuggers\n——— New (in 1.4.0) device driver structure ——— …\nA structure containing graphical parameters\nA row-major array of pixels. One pixel is 32-bit, whose …\nbottom raster coordinate\ncan the gamma factor be modified?\nDevice-level clipping\ncan the device generate idle events\ncan the device generate keyboard events\ncan the device generate mousedown events\ncan the device generate mousemove events\ncan the device generate mouseup events\nCan do at least some horiz adjust of text 0 = none, 1 = …\nScreen capture. Returns an integer matrix representing …\nCharacter expansion (font size = fontsize*cex)\nGet the metrics for a single unicode codepoint.\nDraw a stroked/filled circle. gc.color() is the stroke …\nChange the clip rectangle.\nR only has the notion of a rectangular clipping region\npen colour (lines, text, borders, …)\nSet the line or text color of a primitive.\nCharacter size in rasters; [0]=x, [1]=y\nGet the current device.\nThis can be used to OVERRIDE canClip so that graphics …\npointer to device specific parameters\nThis should match R_GE_version, BUT it does not have to. …\nGet the device number for this device.\ntoggle for initial display list status\nThis is an environment holding event handlers.\nSet the fill color of a primitive.\nfill colour (for polygons, circles, rects, …)\nSet the font face.\nFont face (plain, italic, bold, …)\nFont family\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert device coordinates into a specified unit. This is …\nConvert device width/height coordinates into a specified …\nSet the gamma of the device. <code>out_color = in_color ** gamma</code>\n(initial) Device Gamma Correction\nGamma correction\ndevice_getEvent is no longer used, but the slot is kept …\nGet a device by number.\nThis is set while getGraphicsEvent is actively looking for …\nand strWidthUTF8\n1 = no, 2 = yes\n1 = no, 2 = yes\n1 = no, 2 = yes, 3 = except for missing values\n1 = no, 2 = yes\n1 = no, 2 = fully, 3 = semi\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInches per raster; [0]=x, [1]=y\nleft raster coordinate\nLine end\nDraw a stroked line. gc.color() is the stroke color.\nSet the line end type.\nSet the line height for text.\nSet the line join type.\nSet the line miter limit - the point where the line …\nSet the type of the line.\nSet the width of the line in chosen units.\nLine height (multiply by font size)\nline join\nline mitre\nLine type (solid, dashed, dotted, …)\nLine width (roughly number of pixels)\nDraw a mathematical expression.\nGet the height of a mathematical expression.\nGet the metrics for a mathematical expression.\nGet the width of a mathematical expression.\nDisable device rendering and flush.\nEnable device rendering.\nStart a new page. The page color can be set in advance.\nDraw a path with multiple segments. gc.color() is the …\nReference to a pattern fill\nDraw a stroked/filled polygon. gc.color() is the stroke …\nDraw a stroked/filled polyline. gc.color() is the stroke …\nFont size in points\nDraw a bitmap.\nDraw a stroked/filled axis-aligned rectangle. gc.color() …\nArea for future expansion. By zeroing this, devices are …\nright raster coordinate\nsets par(“fg”), par(“col”) and gpar(“col”)\nsets par(“bg”) and gpar(“fill”)\nDevice initial settings / /* These are things that the …\nDraw a special symbol centered on pos. See …\nDraw a text string starting at pos. TODO: do we need to …\nGet the height of a unicode string.\nGet the metrics for a unicode string.\nGet the width of a unicode string.\nConvert a specified unit coordinates into device …\nConvert a specified unit width/height coordinates into …\ntop raster coordinate\nSet the transform as a 3x2 matrix.\nIs rotated text good enough to be preferable to Hershey in …\nx character addressing offset - unused\ny character addressing offset\n1/2 interline space as frac of line height\nReturns the argument unchanged.\nGenerate a color from a CSS-like hex number. eg. …\nGenerate a color from a 3 digit CSS-like hex number. eg. …\nCalls <code>U::from(self)</code>.\nGenerate a color from rgb components (0-255).\nGenerate a color from rgba components (0-255).\nConvert to an R color.\nhttps://www.w3.org/TR/2018/REC-css-color-3-20180619/\nA builder of libR_sys::DevDesc.\nSets the font size (unit: point). <strong>Note that most of the </strong>…\nSets the device sizes (unit: point).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets inches per raster unit (i.e. point). <strong>Note that most </strong>…\nSets the initial value of colour.\nSets the initial value of fill.\nSets the initial value of font face.\nSets the initial value of line type.\nSets the initial value of pointsize.\nSet this to <code>false</code> if the implemented <code>strWidth()</code> and <code>text()</code> …\nTo what extent the device takes the responsibility of …\nThe underlying C structure <code>DevDesc</code> has two fields related …\nA graphic device implementation.\nWhether the device accepts a capturing operation. By …\nWhether the device has a locator capability, i.e., reading …\nWhether the device maintains a plot history. This …\nWhether the device accepts the drawing operation of a …\nA callback function to setup the device when the device is …\nA callback function that captures and returns the current …\nA callback function that returns the TextMetric (ascent, …\nA callback function to draw a circle.\nA callback function to clip.\nA callback function to free device-specific resources when …\nCreate a Device.\nA callback function to clean up when the device is …\nA callback function for X11_eventHelper.\nReturns the argument unchanged.\nA callback function to manage the “suspension level” …\nCalls <code>U::from(self)</code>.\nA callback function to draw a line.\nA callback function that returns the coords of the event\nA callback function called whenever the graphics engine …\nA callback function to confirm a new frame. It seems this …\nA callback function called whenever a new plot requires a …\nA callback function called when the user aborts some …\nA callback function to draw paths.\nA callback function to draw a polygon.\nA callback function to draw a polyline.\nA callback function to draw a Raster.\nA callback function to draw a rect.\nA callback function that returns the current device size …\nA callback function to draw a text.\nA callback function that returns the width of the given …\nWrapper for R output streams.\nReturns the argument unchanged.\nSave an object in the R data format to a <code>Write</code> trait. …\nSave an object in the R data format to a <code>Write</code> trait. …\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format. <code>version</code> should …\nThe hook will convert some objects into strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format. <code>version</code> should …\nSave an object in the R data format to a <code>Write</code> trait. …\nSave an object in the R data format to a <code>Write</code> trait. …\nIterator over name-value pairs in lists.\nIterator over strings or string factors.\nGet an iterator over a string vector. Returns None if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake an empty str iterator.\nMetadata function argument.\nMetadata function.\nMetadata Impl.\nModule metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps invalid R identifiers, like <code>_function_name</code>, into …\nGenerate a wrapper for a non-method function.\nGenerate a wrapper for an implementation block.\nGenerate a wrapper for a method.\nReturn true if this primitive is <code>NA</code>.\nEnables support for the <code>either</code> crate, to allow accepting …\nDefines conversions between R objects and the <code>ndarray</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide a wrapper around R’s pointer type <code>SEXP</code> that is …\nA wrapper around R’s pointer type <code>SEXP</code> that is <code>Send</code>.\nReturns the argument unchanged.\nGet the inner <code>SEXP</code>\nCalls <code>U::from(self)</code>.\nAn array where the data has shared ownership and is copy …\none-dimensional shared ownership array\ntwo-dimensional shared ownership array\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nA producer element that can be assigned to once\nAn axis index.\nDescription of the axis, its length and its stride.\n“C” is an alias for row major ordering\nMust have the same layout as <code>Self</code>, and <code>Canonical::Unit</code> …\nHeap allocated resizable column vector.\nMutable view over a column vector, similar to a mutable …\nImmutable view over a column vector, similar to an …\nColumn major or “F” order\nUnstable trait containing the operations that a number …\nWhether a matrix should be implicitly conjugated when read …\nMust have the same layout as <code>Self</code>, and <code>Conj::Unit</code> must …\nTrait for types that may be implicitly conjugated.\nContinue folding with this value\nAn array with copy-on-write behavior.\nCowArray’s representation.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nDimension description.\nCreate a new dimension value.\nDimension type of the producer\nDimension type\nAdds the two dimensions at compile time.\nArray shape and index trait.\nFold is complete and will return this value\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe array element type.\nUnstable core trait for describing how a scalar value may …\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nError code for an error related to array shape or layout.\n“F” (for Fortran) is an alias for column major ordering\nFixed-size array used for array initialization\nEqually-sized index type with a fixed size (no <code>usize</code>).\nValue controlling the execution of <code>.fold_while</code> on <code>Zip</code>.\nincompatible memory layout\nincompatible shape\nTrait for unsigned integers that can be indexed with.\nA single index.\nExtra indexing methods for array views\nEnable the construction of dataframes from arrays of …\nArgument conversion a dimension.\nProvides methods for converting a type <code>Self</code> into either a …\nArgument conversion into a producer.\nThe element produced per iteration.\nThe element produced per iteration.\nIterator that maps left or right iterators to …\nArray index type\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nDynamic dimension or index type.\nArray index type (signed)\nNext larger dimension\nA value of type <code>L</code>.\nElements that support linear algebra operations.\nLower half should be accessed.\nMaximum representable value.\nHeap allocated resizable matrix, similar to a 2D <code>Vec</code>.\nMutable view over a matrix, similar to a mutable reference …\nImmutable view over a matrix, similar to an immutable …\nA transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …\nCorresponding owned data with MaybeUninit elements\nSlicing information describing multiple mutable, disjoint …\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nTuple or fixed size arrays that can be used to index an …\nA producer of an n-dimensional set of elements; for …\nToken to represent a new axis in a slice description.\nA new axis of length 1.\nDo not conjugate.\nNo parallelism.\nArray order\nDimensionality of the output array.\nout of bounds indexing\nThe resulting array storage of the same kind but …\nThe type of the slices created by <code>.multi_slice_move()</code>.\nThe resulting dimension type after broadcasting.\nThe sum of the two dimensions.\nThe type of the reference to the element that is produced, …\noverflow when computing offset, length, etc.\nOwned data.\nArcArray’s representation.\nArray’s representation.\nParallelism strategy that can be passed to most of the …\nPattern matching friendly form of the dimension value.\nExecute R code by parsing and evaluating tokens.\nthe shape does not fit inside type limits\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray pointer’s representation.\nRayon parallelism. Only available with the <code>rayon</code> feature.\nUnstable trait containing the operations that a real …\nArray shape with a next smaller dimension.\nA value of type <code>R</code>.\nHeap allocated resizable row vector.\nRow major or “C” order\nMutable view over a row vector, similar to a mutable …\nImmutable view over a row vector, similar to an immutable …\nExecute R code by parsing and evaluating tokens but …\nElements that can be used as direct operands in arithmetic …\nFactor for matrix-scalar multiplication.\nA contiguous array shape of n dimensions.\nArray shape argument with optional order parameter\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nAn error related to array shape or layout.\nSpecifies whether the triangular lower or upper part of a …\nEqually-sized signed index type.\nTrait for signed integers corresponding to the ones …\nA slice (range with step size).\nA range with step size. <code>end</code> is an exclusive index. …\nA type that can slice an array of dimension <code>D</code>.\nRepresents all of the necessary information to perform a …\nA slice (range with step), an index, or a new axis token.\nNext smaller dimension (if applicable)\nAn array shape of n dimensions in c-order, f-order or …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\naliasing array elements\nUpper half should be accessed.\nBorrowed data.\nArray view’s representation.\nDo conjugate.\nLock step function application across several arrays or …\nIterates over pairs of consecutive elements along the axis.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nAppend an array to the array along an axis.\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two or three dimensions.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns <code>self</code> as a mutable matrix view.\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nReturns a mutable view over the matrix.\nReturns a mutable view over the vector.\nReturns a mutable view over the matrix.\nReturns a mutable view over the matrix.\nReturns a mutable view over the matrix.\nReturns a mutable view over the vector.\nReturn a mutable pointer to the first element in the array.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nReturn a pointer to the first element in the array.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the vector.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the vector.\nReturn the array’s data as a slice, if it is contiguous …\nReturns a reference to a slice over the column.\nReturns a reference to a slice over the row.\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice, if it is contiguous …\nReturns a mutable reference to a slice over the column.\nReturns a mutable reference to a slice over the row.\nReturn a standard-layout array containing the data, …\nReturns a mutable reference to a potentially uninitialized …\nReturns a mutable reference to a potentially uninitialized …\nCompare matrices for exact or approximate equality.\nPerform an elementwise assigment to <code>self</code> from <code>rhs</code>.\nAssign the value <code>input</code> to the element that self represents.\nPerform an elementwise assigment of values cloned from <code>self</code>…\n<strong>Promise</strong> that the array’s elements are all fully …\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nCreate a two-dimensional read-write array view with …\nReturn an iterator over the length and stride of each axis.\nReturn axis\nAxis identifier (index)\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturns a producer which traverses over all windows of a …\nArray zip macro: lock step function application across …\nAct like a larger size and/or shape array by <em>broadcasting</em> …\nCreate an array with uninitialized elements, shape <code>shape</code>.\nCall a function or primitive defined by a text expression …\nPerforms the implicit conjugation operation on the given …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nConvert a reference to a slice of <code>Self</code> to fixed width …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nConvert a mutable reference to a slice of <code>Self</code> to fixed …\nCast the raw pointer of the raw array view to a different …\nCast the raw pointer of the raw array view to a different …\nReturn a shared view of the array with elements as if they …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\n<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nColumn vector type.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nCreates a <code>col::Col</code> containing the arguments.\nReturns a reference to a slice over the column at the …\nReturns a mutable reference to a slice over the column at …\nReturns the column capacity, that is, the number of …\nReturns the col capacity, that is, the number of cols that …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the column stride of the matrix, specified in …\nReturns the column stride of the matrix, specified in …\nReturns the offset between the first elements of two …\nReturns the column stride of the matrix, specified in …\nReturns the column stride of the matrix, specified in …\nReturns the offset between the first elements of two …\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nSelects <code>index</code> along the axis, collapsing the axis into …\nReturn an array view of column <code>index</code>.\nReturn Order::ColumnMajor if the input is true, …\nReturn a mutable array view of column <code>index</code>.\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nNative complex floating point types whose real and …\nCombine <code>self</code> and <code>other</code> to create a new conjugation object.\nConcatenates the matrices in each row horizontally, then …\nConcatenate arrays along the given axis.\nConcatenate arrays along the given axis.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCreate a dataframe.\nUnsafely translate the data representation from one element\nCreate an array with default values, shape <code>shape</code>\nConverts to a read-only view of the array.\nConverts to a read-only view of the array.\nConverts to a mutable view of the array.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nDiagonal matrix type.\nReturn a view of the diagonal elements of the array.\nReturn a read-write view over the diagonal elements of the …\nReturns the diagonal of the matrix.\nReturns the diagonal of the matrix.\nReturns a view over the diagonal of the matrix.\nReturns the diagonal of the matrix.\nReturns a view over the diagonal of the matrix.\nReturn the shape of the array in its “pattern” form, …\nCauses functions that access global parallelism settings …\nPerform dot product or matrix multiplication of arrays <code>self</code>…\nPerform the matrix multiplication of the row vector <code>self</code> …\nCompute the dot product of one-dimensional arrays.\nPerform matrix multiplication of rectangular arrays <code>self</code> …\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nend index; negative are counted from the back of the axis; …\nReturn an exact chunks producer (and iterable).\nReturn an exact chunks producer (and iterable).\nReturns the left value\nReturns the right value\nThe <code>#[extendr]</code>-macro may be placed on three items\nDefine a module and export symbols to R Example:\nCreate an identity matrix of size <code>n</code> (square 2D array).\nCreate a factor.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nReturns the absolute value of <code>self</code>.\nReturns the squared absolute value of <code>self</code>.\nReturns <code>self + rhs</code>.\nReturns <code>conjugate(self)</code>.\nConverts <code>value</code> from <code>f64</code> to <code>Self</code>. The conversion may be …\nReturns a complex number whose real part is equal to <code>real</code>, …\nReturns the imaginary part.\nReturns <code>1.0/self</code>.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns <code>self * rhs</code>.\nReturns a NaN value.\nReturns <code>-self</code>.\nReturns <code>1.0</code>.\nReturns the real part.\nReturns the input, scaled by <code>rhs</code>.\nReturns the input, scaled by <code>rhs</code>.\nReturns either the norm or squared norm of the number.\nReturns the square root of <code>self</code>.\nReturns <code>self - rhs</code>.\nReturns <code>0.0</code>.\nPerform an elementwise assigment to <code>self</code> from element <code>x</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nReturns a reference to the first element of the array, or …\nReturns a mutable reference to the first element of the …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nTraverse the array elements and apply a fold, returning …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nFold along an axis.\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nEvaluate the provided expression for both <code>Either::Left</code> and …\nCall <code>f</code> for each element in the array.\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a read-only array view of the array.\nConverts the <code>Vec</code> of arrays to an owned 2-D array.\nCreate a one-dimensional array from a boxed slice (no …\nCreate a read-only clone-on-write view of the array.\nCreate a one-dimensional array from a vector (no copying …\nCreate a one-dimensional read-only array view of the data …\nReturns the argument unchanged.\nCreate a one-dimensional read-write array view of the data …\nCreate a read-write array view of the array.\nCreate a one-dimensional clone-on-write view of the data …\nConverts the <code>Vec</code> of arrays to an owned 3-D array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Shape</code> from <code>dimension</code>, using the default memory …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Zip</code> from the input array or other producer <code>p</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a 2D matrix from its diagonal\nCreate a square 2D matrix of the specified size, with the …\nCreate an array with copies of <code>elem</code>, shape <code>shape</code>.\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nCreate a one-dimensional array from an iterable.\nCreate a one-dimensional array from an iterator or …\nCreate a new <code>ShapeError</code>\nCreate a read-only array view borrowing its data from a …\nCreate a read-write array view borrowing its data from a …\nCreate an array with values created by the function <code>f</code>.\nCreate an <code>ArrayView&lt;A, D&gt;</code> from shape information and a raw …\nCreate an <code>RawArrayViewMut&lt;A, D&gt;</code> from shape information and …\nCreate an <code>ArrayViewMut&lt;A, D&gt;</code> from shape information and a …\nCreate an <code>RawArrayView&lt;A, D&gt;</code> from shape information and a …\nCreate an array with values created by the function <code>f</code>.\nCreate an array with the given shape from a vector. (No …\nCreates an array from a vector and interpret it according …\nConvert a signed value to an unsigned one.\nCreate a one-dimensional array from a vector (no copying …\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nReturns the LU decomposition of <code>self</code> with full pivoting.\nReturns the LU decomposition of <code>self</code> with full pivoting.\nReturns the LU decomposition of <code>self</code> with full pivoting.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nCreate a one-dimensional array with <code>n</code> geometrically spaced …\nGet a reference of a element through the view.\nReturn a reference to the element at <code>index</code>, or return <code>None</code> …\nConvert a mutable array view to a mutable reference of a …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nGets the global parallelism settings.\nReturn a mutable reference to the element at <code>index</code>, or …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturn a raw pointer to the element at <code>index</code>, or return …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturn a raw pointer to the element at <code>index</code>, or return …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nGet a global variable.\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns the number of axes in the input array.\nReturns the number of dimensions of the input array for …\nGet a reference of a element through the view.\nGet a reference of a element through the view.\nConvert a mutable array view to a mutable reference of a …\nReturn the index of the axis.\nReturns a view restricted to <code>index</code> along the axis, with …\nCollapses the array to <code>index</code> along the axis and removes …\nCollapses the array to <code>index</code> along the axis and removes …\nReturns a mutable view restricted to <code>index</code> along the axis, …\nCreate a new <code>Zip</code> with an index producer and the producer <code>p</code>.\nReturn an iterator of indexes and references to the …\nReturn an iterator of indexes and mutable references to …\nCreate an iterable of the array shape <code>shape</code>.\nReturn an iterable of the indices of the passed-in array.\nInsert new array axis at <code>axis</code> and return the result.\nInsert new array axis of length 1 at <code>axis</code>, modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a shared view of the array with elements as if they …\nReturn the diagonal as a one-dimensional array.\nConvert an array or array view to another with the same …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert any array or array view to a dynamic dimensional …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nExtract the value of an either over two equivalent types.\nReturn the inner value\nReturn the inner value\nConvert the inner value to an iterator.\nTurn the array into a uniquely owned array, cloning the …\nConvert the dimension into a pattern matching friendly …\nConvert the value into an <code>NdProducer</code>.\nReturn a vector of the elements in the array, in the way …\nConsume the view and return a reference to the single …\nConsume the mutable view and return a mutable reference to …\nReturns the single element in the array without cloning it.\nTransform the array into <code>shape</code>; any shape with the same …\nTurn the array into a shared ownership (copy on write) …\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReverse the stride of <code>axis</code>.\nDe-serialization from common matrix file formats.\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturn true if input is Order::ColumnMajor, false otherwise\nReturn true if it is <code>Done</code>, false if <code>Continue</code>\nReturn whether the array has any elements\nReturns <code>true</code> if <code>self</code> is an <code>Index</code> value.\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.\nReturns <code>true</code> iff the array is the owned variant.\nReturns <code>true</code> iff the data is the <code>Owned</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nReturn true if input is Order::RowMajor, false otherwise\nReturns <code>true</code> if <code>self</code> is a <code>Slice</code> value.\nReturn true if the array is square, false otherwise.\nReturn <code>true</code> if the array data is laid out in contiguous …\nReturns <code>true</code> iff the array is the view (borrowed) variant.\nReturns <code>true</code> iff the data is the <code>View</code> variant.\nBorrow the inner value as an iterator.\nReturn an iterator of references to the elements of the …\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nMutably borrow the inner value as an iterator.\nReturn an iterator of mutable references to the elements …\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nReturn the <code>ErrorKind</code> of this error.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nReturn a producer and iterable that traverses over all 1D …\nReturn a producer and iterable that traverses over all 1D …\nA macro for constructing R language objects.\nReturns a reference to the last element of the array, or …\nReturns a mutable reference to the last element of the …\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nReturn the total number of elements in the array.\nReturn length\nLength in count of elements of the current axis\nReturn the length of <code>axis</code>.\nCreate a one-dimensional array with <code>n</code> evenly spaced …\nCreate a List R object from a list of name-value pairs.\nCreate a List R object from a list of name-value pairs.\nCreate a one-dimensional array with <code>n</code> logarithmically …\nMap <code>f</code> over the contained value and return the result in the\nCall <code>f</code> by reference on each element and create a new array …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nReduce the values along an axis into just one value, …\nReduce the values along an axis into just one value, …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nModify the array in place by calling <code>f</code> by mutable …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nCall <code>f</code> on a mutable reference of each element and create a …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nCall <code>f</code> by <strong>v</strong>alue on each element and create a new array …\nModify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …\nCall <code>f</code> by <strong>v</strong>alue on each element, update the array with the …\nConsume the array, call <code>f</code> by <strong>v</strong>alue on each element, and …\nMatrix type.\nCreates a <code>Mat</code> containing the arguments.\nReturn the axis with the greatest stride (by absolute …\nCreate an array with uninitialized elements, shape <code>shape</code>.\nReturns the arithmetic mean x̅ of all elements in the …\nReturn mean along <code>axis</code>.\nIf possible, merge in the axis <code>take</code> to <code>into</code>.\nRe-exports.\nMove all elements from self into <code>new_array</code>, which must be …\nMove all elements from self into <code>new_array</code>, which must be …\nSplit the view into multiple disjoint slices.\nSplit the view into multiple disjoint slices.\nReturn multiple disjoint, sliced, mutable views of the …\nReturn the number of columns (length of <code>Axis(1)</code>) in the …\nReturns the number of columns of the column. This is …\nReturns the number of columns of the column. This is …\nReturns the number of columns of the column. This is …\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the row.\nReturns the number of columns of the row.\nReturns the number of columns of the row.\nReturns the number of dimensions (number of axes).\nReturn the number of dimensions (axes) in the array\nPerform an elementwise negation of <code>self</code> and return the …\nPerform an elementwise negation of reference <code>self</code> and …\nCreate a new cell with the given value\nCreate a new <code>Slice</code> with the given extents.\nReturns a new <code>SliceInfo</code> instance.\nReturns an empty column of dimension <code>0</code>.\nReturns an empty matrix of dimension <code>0×0</code>.\nReturns an empty row of dimension <code>0</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nPerform an elementwise unary not of reference <code>self</code> and …\nPerform an elementwise unary not of <code>self</code> and return the …\nReturn the number of rows (length of <code>Axis(0)</code>) in the …\nReturns the number of rows of the column.\nReturns the number of rows of the column.\nReturns the number of rows of the column.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the row. This is always …\nReturns the number of rows of the row. This is always …\nReturns the number of rows of the row. This is always …\nCreate an array with ones, shape <code>shape</code>.\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nReturns the number of axes in the output array.\nReturns the number of dimensions after calling <code>.slice()</code> …\nReturn an iterator that traverses over the outermost …\nReturn an iterator that traverses over the outermost …\nCreate a Pairlist R object from a list of name-value pairs.\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nPermutation matrices.\nPermute the axes.\nReturn the product of all elements in the array.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nAppend an array to the array along an axis.\nAppend a column to an array\nAppend a row to an array\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nConvert a rust expression to an R object.\nCreate a one-dimensional array with elements from <code>start</code> to …\nReturn the shape of the producer.\nReturn the shape of the array as it’s stored in the …\nReturn a reference to the dimension\nReturn a reference to the dimension\nReturn a raw view of the array.\nReturn a raw mutable view of the array.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given indices, with …\nReads the value of the element at the given indices, with …\nReads the value of the element at the given indices, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReads the value of the element at the given indices.\nReads the value of the element at the given indices.\nReads the value of the element at the given indices.\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nConvert the view into an <code>ArrayView&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> is a …\nConvert the view into an <code>ArrayViewMut&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> …\nRemove array axis <code>axis</code> and return the result.\nRemove the <code>index</code>th elements along <code>axis</code> and shift down …\nPrint via the R error stream.\nPrint with a newline via the R output stream.\nReserves the minimum capacity for <code>row_capacity</code> rows …\nReserves the minimum capacity for <code>row_capacity</code> rows and …\nReserves the minimum capacity for <code>col_capacity</code> columns …\n<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for </em>…\nResizes the vector in-place so that the new number of rows …\nResizes the matrix in-place so that the new dimensions are …\nResizes the vector in-place so that the new number of …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nTranspose the array by reversing axes.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nRow vector type.\nReturn an array view of row <code>index</code>.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nCreates a <code>row::Row</code> containing the arguments.\nReturns the row capacity, that is, the number of rows that …\nReturns the row capacity, that is, the number of rows that …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturn Order::RowMajor if the input is true, …\nReturn a mutable array view of row <code>index</code>.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns the row stride of the matrix, specified in number …\nReturns the row stride of the matrix, specified in number …\nReturns the offset between the first elements of two …\nReturns the row stride of the matrix, specified in number …\nReturns the row stride of the matrix, specified in number …\nReturns the offset between the first elements of two …\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nPrint via the R output stream.\nPrint with a newline via the R output stream.\nSlice argument constructor.\nReturn the sum of all elements in the array.\nReturns a factor for matrix-scalar multiplication.\nPerform the operation <code>self += alpha * rhs</code> efficiently, …\nAlong <code>axis</code>, select arbitrary subviews corresponding to …\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nSet the dimensions of the matrix.\nSets the global parallelism settings.\nSet the dimensions of the matrix.\nSet the dimensions of the matrix.\nReturn the shape of the array as a slice.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the singular values of <code>self</code>, in nonincreasing …\nReturns the singular values of <code>self</code>, in nonincreasing …\nReturns the singular values of <code>self</code>, in nonincreasing …\nCompute the size of the dimension (number of elements)\nReturn the size of the shape in number of elements\nReturn the size of the shape in number of elements\nReturn a the number of element tuples in the Zip\nCompute the size while checking for overflow.\nReturn a sliced view of the array.\nReturn a view of the array, sliced along the specified …\nSlice the array in place along the specified axis.\nReturn a mutable view of the array, sliced along the …\nSlice the array in place without changing the number of …\nReturn a view of a slice of the array, with a closure …\nSlice the array in place, with a closure specifying the …\nReturn a mutable view of a slice of the array, with a …\nSlice the array, possibly changing the number of …\nReturn a sliced read-write view of the array.\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nMatrix solvers and decompositions.\nSparse data structures and algorithms. Sparse matrix data …\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the array view along <code>axis</code> and return one array …\nSplit the array view along <code>axis</code> and return one array …\nSplit the array view along <code>axis</code> and return one mutable …\nSplit the array view along <code>axis</code> and return one view …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nStack arrays along the new axis.\nStack arrays along the new axis.\nStack arrays along the new axis.\nStack arrays along the new axis.\nstart index; negative are counted from the back of the axis\nStatistics-related utilities.\nReturn standard deviation of elements in the array.\nReturn standard deviation along <code>axis</code>.\nstep size in elements; the default is 1, for every element.\nCreate a new <code>Slice</code> with the given step size (multiplied …\nReturn stride\nStride in count of elements of the current axis\nReturn the stride of <code>axis</code>.\nReturn the strides of the array as a slice.\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the subvector starting at column …\nReturns a view over the subvector starting at column …\nReturns a view over the subvector starting at column …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturn the sum of all elements in the array.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturn sum along <code>axis</code>.\nSum values while checking for overflow.\nSum nonnegative values while checking for overflow.\nReturns the SVD of <code>self</code>.\nReturns the SVD of <code>self</code>.\nReturns the SVD of <code>self</code>.\nSwap elements at indices <code>index1</code> and <code>index2</code>.\nSwap value with another cell\nSwap axes <code>ax</code> and <code>bx</code>.\nSign extend <code>self</code>.\nThe sym! macro install symbols. You should cache your …\nReturn a transposed view of the array.\nMacro for running tests.\nReturns the thin SVD of <code>self</code>.\nReturns the thin SVD of <code>self</code>.\nReturns the thin SVD of <code>self</code>.\nReturn an uniquely owned copy of the array.\nReturns an owning <code>Col</code> of the data.\nReturns an owning <code>Col</code> of the data.\nReturns an owning <code>Col</code> of the data\nReturns an owning <code>Mat</code> of the data.\nReturns an owning <code>Mat</code> of the data\nReturns an owning <code>Mat</code> of the data\nReturns an owning <code>Row</code> of the data.\nReturns an owning <code>Row</code> of the data.\nReturns an owning <code>Row</code> of the data\nTransform the array into <code>new_shape</code>; any shape with the …\nReturn a shared ownership (copy on write) array, cloning …\nConvert an unsigned value to a signed one.\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReturn an vector with the elements of the one-dimensional …\nReturn the transpose: row major becomes column major and …\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nTruncate <code>value</code> to type <code>Self</code>.\nTruncates the matrix so that its new number of rows is …\nTruncates the matrix so that its new dimensions are …\nTruncates the matrix so that its new number of columns is …\nTruncate <code>value</code> to type <code>Self</code>.\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the column as a contiguous potentially …\nReturns the column as a contiguous potentially …\nReturns the row as a contiguous potentially uninitialized …\nReturns the row as a contiguous potentially uninitialized …\nPerforms the conversion.\nReturns the first type that matches the provided <code>Robj</code>, …\nReturns the first type that matches the provided <code>Robj</code>, …\nPerforms the conversion.\nConverts the array into <code>Array&lt;A, D&gt;</code> if this is possible …\nMacro for unwrapping the left side of an <code>Either</code>, which …\nDual to <code>try_left!</code>, see its documentation for more …\nReturns views over the columns at the given indices.\nReturns views over the columns at the given indices.\nReturns views over the rows at the given indices.\nReturns views over the rows at the given indices.\nGet a reference of a element through the view without …\nGet a reference of a element through the view without …\nPerform <em>unchecked</em> array indexing.\nConvert a mutable array view to a mutable reference of a …\nPerform <em>unchecked</em> array indexing.\nCreate an array with uninitialized elements, shape <code>shape</code>.\nCreate an array with uninitialized elements, shape <code>shape</code>.\nReturns the left value\nReturns the right value\nUsed to undo the zipping by the <code>zipped!</code> macro.\nSwap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.\nVarious utilities for low level implementations in generic …\nReturns the inner value.\nReturn variance of elements in the array.\nGet a local variable from the calling function or a global …\nReturn variance along <code>axis</code>.\nReturn a read-only view of the array\nReturn a read-write view of the array\nVisit each element in the array by calling <code>f</code> by reference …\nReturn a window producer and iterable.\nReturns a new column vector with 0 rows, with enough …\nReturns a new matrix with dimensions <code>(0, 0)</code>, with enough …\nReturns a new column vector with 0 columns, with enough …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given indices, with …\nWrites the value to the element at the given indices, with …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index.\nWrites the value to the element at the given index.\nWrites the value to the element at the given indices.\nWrites the value to the element at the given indices.\nWrites the value to the element at the given index.\nWrites the value to the element at the given index.\nCreates a dimension of all zeros with the specified ndim.\nCreate an array with zeros, shape <code>shape</code>.\nCreate a new dimension value with <code>n</code> axes, all zeros\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nTraverse two arrays in unspecified order, in lock step, …\nZips together matrix of the same size, so that …\nZero extend <code>self</code>.\nZero extend <code>self</code>.\nend index; negative are counted from the back of the axis; …\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nTrait for types that can be converted to a mutable column …\nTrait for types that can be converted to a column view.\nHeap allocated resizable column vector.\nType that can be interpreted as a batch of column vectors. …\nType that can be interpreted as a mutable batch of column …\nRepresents a type that can be used to slice a column, such …\nMutable view over a column vector, similar to a mutable …\nImmutable view over a column vector, similar to an …\nCorresponding owning type.\nResulting type of the indexing operation.\nConvert to a mutable column view.\nConvert to a column view.\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with 1 row containing value …\nCreates a <code>ColRef</code> from pointers to the column vector data, …\nCreates a <code>ColMut</code> from pointers to the column vector data, …\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with <code>nrows</code> rows containing …\nReturns a view over a column with <code>nrows</code> rows containing …\nCreates a <code>ColRef</code> from slice views over the column vector …\nCreates a <code>ColRef</code> from slice views over the column vector …\nCreates a <code>ColMut</code> from slice views over the column vector …\nCreates a <code>ColMut</code> from slice views over the column vector …\nIndex the column at <code>row</code>.\nIndex the column at <code>row</code>, without bound checks.\nConstructor of the owned type that copies the values.\nConstructor of the owned type that initializes the values …\nResize an owned column or matrix.\n32-bit complex floating point type. See the module-level …\n32-bit implicitly conjugated complex floating point type.\n64-bit complex floating point type. See the module-level …\n64-bit implicitly conjugated complex floating point type.\nCreate a complex number from a phase.\nCreate a complex number from a phase.\nCalculate the complex conjugate of self.\nCalculate the complex conjugate of self.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a complex number from polar coordinates.\nCreate a complex number from polar coordinates.\nConstruct the imaginary number.\nConstruct the imaginary number.\nReturns the imaginary part of the complex number.\nReturns the imaginary part of the complex number.\nNegated imaginary part.\nNegated imaginary part.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of <code>self</code>.\nComputes the inverse of <code>self</code>.\nComputes the <code>l1</code> norm of <code>self</code>.\nComputes the <code>l1</code> norm of <code>self</code>.\nNegated imaginary part.\nNegated imaginary part.\nCreate a new complex number.\nCreate a new complex number.\nComputes the <code>l2</code> norm of <code>self</code>.\nComputes the <code>l2</code> norm of <code>self</code>.\nComputes the squared <code>l2</code> norm of <code>self</code>.\nComputes the squared <code>l2</code> norm of <code>self</code>.\nReturns the real part of the complex number.\nReturns the real part of the complex number.\nReal part.\nReal part.\nReal part.\nReal part.\nConvert the number to a num_complex::Complex32.\nConvert the number to a num_complex::Complex64.\nDiagonal matrix.\nDiagonal mutable matrix view.\nDiagonal matrix view.\nReturns a mutable view over the matrix.\nReturns a mutable view over <code>self</code>.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over <code>self</code>.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a mutable column vector view.\nReturns the diagonal as a mutable column vector view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the diagonal as a column vector.\nOwns an unsized array of data, allocated from some stack.\nStack wrapper around a buffer of uninitialized bytes.\nBuffer of uninitialized bytes to serve as workspace for …\nBuffer of initialized bytes to serve as workspace for …\nStack wrapper around a buffer of bytes.\nMutable reborrowing.\nSize overflow error during the computation of stack …\nStack allocation requirements.\nThe alignment of allocated bytes required.\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nReturns a pointer to the (possibly uninitialized) stack …\nReturns a pointer to the stack memory.\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nAllocation requirements for an empty unaligned buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>GlobalMemBuffer</code>\tfrom its raw components.\nCreates a <code>GlobalPodBuffer</code>\tfrom its raw components.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes a <code>GlobalMemBuffer</code> into its raw components in …\nDecomposes a <code>GlobalPodBuffer</code> into its raw components in …\nReturns the number of bytes that this stack can hold.\nReturns the number of bytes that this stack can hold.\nReturns a new aligned and uninitialized slice and a stack …\nReturns a new aligned and uninitialized <code>DynArray</code> and a …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nReturns a new uninitialized slice and a stack over the …\nReturns a new uninitialized <code>DynArray</code> and a stack over the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nReturns a new <code>DynStack</code> from the provided memory buffer.\nReturns a new <code>PodStack</code> from the provided memory buffer.\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nThe required allocation to allocate storage sufficient for …\nThe number of allocated bytes required, aligned to …\nSame as <code>StackReq::all_of</code>, but returns an error if the size …\nSame as <code>StackReq::and</code>, but returns an error if the size …\nSame as <code>StackReq::any_of</code>, but returns an error if the size …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nSame as <code>StackReq::new</code>, but returns an error in case the …\nSame as <code>StackReq::new_aligned</code>, but returns an error in …\nSame as <code>StackReq::or</code>, but returns an error if the size …\nSame as <code>StackReq::unaligned_bytes_required</code>, but returns an …\nThe number of allocated bytes required, with no alignment …\nError during memory allocation.\nBuffer of uninitialized bytes to serve as workspace for …\nBuffer of initialized bytes to serve as workspace for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n32-bit complex floating point.\n64-bit complex floating point.\nData type of the buffer data.\n32-bit floating point.\n64-bit floating point.\nTrait implemented for native types that can be read from a …\nMemory view over a buffer in <code>npy</code> format.\nData type of an <code>npy</code> buffer.\nUnknown type.\nIf the memory buffer is aligned, and the provided type …\nReturns the data type of the memory buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the memory buffer is aligned, in which case the …\nParse a npy file from a memory buffer.\nIf the provided type matches the one stored in the buffer, …\nTrait for types that can be converted to a 2D matrix view.\nTrait for types that can be converted to a mutable 2D …\nTrait for types that can be converted to a mutable matrix …\nTrait for types that can be converted to a matrix view.\nHeap allocated resizable matrix, similar to a 2D <code>Vec</code>.\nRepresents a type that can be used to slice a matrix, such …\nMutable view over a matrix, similar to a mutable reference …\nImmutable view over a matrix, similar to an immutable …\nResulting type of the indexing operation.\nConvert to a mutable 2D matrix view.\nConvert to a 2D matrix view.\nConvert to a mutable matrix view.\nConvert to a matrix view.\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nCreates a <code>MatRef</code> from pointers to the matrix data, …\nCreates a <code>MatMut</code> from pointers to the matrix data, …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a matrix containing <code>col</code> repeated <code>ncols</code> …\nReturns a view over an <code>nrows×ncols</code> matrix containing <code>value</code>…\nReturns a view over an <code>nrows×ncols</code> matrix containing <code>value</code>…\nReturns a view over a matrix containing <code>row</code> repeated <code>nrows</code> …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nIndex the matrix at <code>(row, col)</code>.\nIndex the matrix at <code>(row, col)</code>, without bound checks.\nLow level implementation of the various Cholesky-like …\nEmulation layer for <code>faer_core</code>\nLow level implementation of the eigenvalue decomposition …\nLow level implementation of the LU decompositions.\nThis crate provides utilities for computing and …\nLow level implementation of the SVD of a matrix.\nThe Bunch Kaufman decomposition of a Hermitian matrix $A$ …\nComputes a permutation that reduces the chance of …\nThe Cholesky decomposition with diagonal $D$ of a …\nThe Cholesky decomposition of a Hermitian positive …\nComputing the decomposition.\nSolving a linear system using the decomposition.\nInfo about the result of the Bunch-Kaufman factorization.\nTuning parameters for the decomposition.\nDynamic Bunch-Kaufman regularization. Values below <code>epsilon</code> …\nDiagonal pivoting.\nPivoting strategy for choosing the pivots.\nBlock size of the algorithm.\nComputes the Cholesky factorization with Bunch-Kaufman  …\nComputes the size and alignment of required workspace for …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nExpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPivoting strategy.\nNumber of pivoting transpositions.\nComputes the size and alignment of required workspace for …\nGiven the Bunch-Kaufman factors of a matrix $A$ and a …\nComputing the decomposition.\nSolving a linear system using the decomposition.\nUpdating the decomposition.\nLDLT factorization tuning parameters.\nInfo about the result of the LDLT factorization.\nDynamic LDLT regularization. Values below <code>epsilon</code> in …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nExpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the Cholesky factors $L$ and $D$ of the input …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nDeletes <code>r</code> rows and columns at the provided indices from …\nComputes the size and alignment of required workspace for …\nInserts <code>r</code> rows and columns at the provided index in the …\nComputes the size and alignment of the required workspace …\nPerforms a rank-r update in place, while clobbering the …\nThis error signifies that the LLT decomposition could not …\nComputing the decomposition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReconstructing the inverse of the original matrix from the …\nThe dimension of the first square non positive-definite …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nUpdating the decomposition.\nInfo about the result of the LLT factorization.\nLLT factorization tuning parameters.\nDynamic LLT regularization. Values below <code>epsilon</code> in …\nComputes the Cholesky factor $L$ of a Hermitian positive …\nComputes the size and alignment of required workspace for …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the lower triangular part of the inverse of a …\nComputes the lower triangular part of the inverse of a …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the lower triangular part of the reconstructed …\nComputes the lower triangular part of the reconstructed …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nDeletes <code>r</code> rows and columns at the provided indices from …\nComputes the size and alignment of required workspace for …\nInserts <code>r</code> rows and columns at the provided index in the …\nComputes the size and alignment of the required workspace …\nPerforms a rank-r update in place, while clobbering the …\nTrait for types that can be converted to a 2D matrix view.\nTrait for types that can be converted to a mutable 2D …\nTrait for types that can be converted to a mutable column …\nTrait for types that can be converted to a column view.\nTrait for types that can be converted to a mutable matrix …\nTrait for types that can be converted to a matrix view.\nTrait for types that can be converted to a mutable row …\nTrait for types that can be converted to a row view.\nMust have the same layout as <code>Self</code>, and <code>Canonical::Unit</code> …\nHeap allocated resizable column vector.\nMutable view over a column vector, similar to a mutable …\nImmutable view over a column vector, similar to an …\nUnstable trait containing the operations that a number …\nWhether a matrix should be implicitly conjugated when read …\nMust have the same layout as <code>Self</code>, and <code>Conj::Unit</code> must …\nTrait for types that may be implicitly conjugated.\nUnstable core trait for describing how a scalar value may …\nErrors that can occur in sparse algorithms.\nAn index exceeding the maximum value (<code>I::Signed::MAX</code> for a …\nLower half should be accessed.\nHeap allocated resizable matrix, similar to a 2D <code>Vec</code>.\nMutable view over a matrix, similar to a mutable reference …\nImmutable view over a matrix, similar to an immutable …\nDo not conjugate.\nNo parallelism.\nMemory allocation failed.\nParallelism strategy that can be passed to most of the …\nRayon parallelism. Only available with the <code>rayon</code> feature.\nUnstable trait containing the operations that a real …\nHeap allocated resizable row vector.\nMutable view over a row vector, similar to a mutable …\nImmutable view over a row vector, similar to an immutable …\nFactor for matrix-scalar multiplication.\nSpecifies whether the triangular lower or upper part of a …\nUpper half should be accessed.\nDo conjugate.\nConvert to a mutable 2D matrix view.\nConvert to a 2D matrix view.\nConvert to a mutable column view.\nConvert to a column view.\nConvert to a mutable matrix view.\nConvert to a matrix view.\nConvert to a mutable row view.\nConvert to a row view.\nPerforms the implicit conjugation operation on the given …\nCreates a <code>col::Col</code> containing the arguments.\nCauses functions that access global parallelism settings …\nReturns the absolute value of <code>self</code>.\nReturns the squared absolute value of <code>self</code>.\nReturns <code>self + rhs</code>.\nReturns <code>conjugate(self)</code>.\nConverts <code>value</code> from <code>f64</code> to <code>Self</code>. The conversion may be …\nReturns a complex number whose real part is equal to <code>real</code>, …\nReturns the imaginary part.\nReturns <code>1.0/self</code>.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns <code>self * rhs</code>.\nReturns a NaN value.\nReturns <code>-self</code>.\nReturns <code>1.0</code>.\nReturns the real part.\nReturns the input, scaled by <code>rhs</code>.\nReturns the input, scaled by <code>rhs</code>.\nReturns either the norm or squared norm of the number.\nReturns the square root of <code>self</code>.\nReturns <code>self - rhs</code>.\nReturns <code>0.0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the global parallelism settings.\nBlock Householder transformations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTriangular matrix inversion.\nKronecker product of two matrices.\nCreates a <code>Mat</code> containing the arguments.\nMatrix multiplication.\nCreates a <code>row::Row</code> containing the arguments.\nReturns a factor for matrix-scalar multiplication.\nSets the global parallelism settings.\nCreates a temporary matrix of constant values, from the …\nReturns the stack requirements for creating a temporary …\nCreates a temporary matrix of untouched values, from the …\nCreates a temporary matrix of zero values, from the given …\nUsed to undo the zipping by the <code>zipped!</code> macro.\nImplementation of <code>zipped!</code> structures.\nZips together matrix of the same size, so that …\nComputes the size and alignment of required workspace for …\nComputes the product of the given block Householder …\nComputes the size and alignment of required workspace for …\nComputes the product of the matrix, multiplied by the …\nComputes the size and alignment of required workspace for …\nComputes the product of a sequence of block Householder …\nComputes the size and alignment of required workspace for …\nComputes the product of <code>matrix</code>, multiplied by a sequence …\nComputes the size and alignment of required workspace for …\nComputes the product of the transpose of a sequence block …\nComputes the size and alignment of required workspace for …\nComputes the product of <code>matrix</code>, multiplied by the …\nComputes the size and alignment of required workspace for …\nComputes the product of the transpose of the given block …\nComputes the size and alignment of required workspace for …\nComputes the product of the matrix, multiplied by the …\nComputes the Householder reflection $I - \\frac{v …\nComputes the inverse of the lower triangular matrix <code>src</code> …\nComputes the inverse of the lower triangular matrix <code>src</code> …\nComputes the inverse of the upper triangular matrix <code>src</code> …\nComputes the inverse of the upper triangular matrix <code>src</code> …\nComputes the matrix product …\nComputes the matrix product …\nTriangular matrix multiplication module, where some of the …\nDescribes the parts of the matrix that must be accessed.\nThe full matrix is accessed.\nThe lower triangular half (excluding the diagonal) is …\nThe upper triangular half (excluding the diagonal) is …\nThe lower triangular half (including the diagonal) is …\nThe upper triangular half (including the diagonal) is …\nThe lower triangular half (excluding the diagonal, which …\nThe upper triangular half (excluding the diagonal, which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if <code>self</code> is full.\nChecks if <code>self</code> is triangular lower (either inclusive or …\nChecks if <code>self</code> is triangular upper (either inclusive or …\nComputes the matrix product …\nComputes the matrix product …\nReturns the block structure corresponding to the …\nType of columns.\nSpecifies whether the main diagonal should be traversed, …\nInclude diagonal of matrix\nIndexing type.\nItem produced by the zipped views.\nSingle element.\nSingle matrix view.\nLayout transformation type.\nZipped matrix views.\nMatrix layout transformation. Used for zipping …\nType with a given matrix shape.\nZipped matrix views.\nMatrix is used as-is.\nVector is used as-is.\nRead only view over a single matrix element.\nRead-write view over a single matrix element.\nVector is reversed.\nMatrix rows are reversed.\nType of rows.\nDo not include diagonal of matrix\nContiguous slice type.\nView type.\nMatrix is transposed.\nMatrix is transposed, then rows are reversed.\nVector layout transformation. Used for zipping …\nType that can be converted to a view.\nZipped elements.\nZipped matrix views.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the item at the given slice position, skipping bound …\nReturns slice at index of length <code>n_elems</code>.\nGet the item at the given index, skipping bound checks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the zipped matrices are contiguous.\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nReturns the number of columns.\nCreates a zipped matrix, after asserting that the …\nCreates a zipped matrix, assuming that the dimensions …\nReturns the number of rows.\nComputes the preferred iteration layout of the matrices.\nRead the value of the element.\nRead the value of the element.\nReturns the view over self.\nApplies the layout transformation to the matrices.\nWrite to the location of the element.\nIndicates whether the eigenvectors are fully computed, …\nHermitian eigendecomposition tuning parameters.\nDo not compute the eigenvectors.\nDo compute the eigenvectors.\nThreshold to switch between blocked and unblocked code\nComputes the eigenvalue decomposition of a square complex …\nSee <code>compute_evd_complex</code>.\nComputes the eigenvalue decomposition of a square real …\nSee <code>compute_evd_real</code>.\nComputes the size and alignment of required workspace for …\nComputes the eigenvalue decomposition of a square …\nSee <code>compute_hermitian_evd</code>.\nComputes the size and alignment of required workspace for …\nComputes the pseudo inverse of a decomposed square …\nSee <code>compute_hermitian_pseudoinverse</code>.\nComputes the size and alignment of required workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThreshold of percent of aggressive-early-deflation window …\nFunction that returns the deflation window to use for a …\nFunction that returns the number of shifts to use for a …\nThe full pivoting LU decomposition is such that: …\nThe partial pivoting LU decomposition is such that: $$PA = …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the inverse of the original matrix from the …\nSolving a linear system using the decomposition.\nLU factorization tuning parameters.\nInformation about the resulting LU factorization.\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of the given matrix with …\nComputes the size and alignment of required workspace for …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its full pivoting …\nComputes the inverse of a matrix, given its full pivoting …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its full pivoting …\nComputes the reconstructed matrix, given its full pivoting …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nLUfactorization tuning parameters.\nInformation about the resulting LU factorization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of the given matrix with …\nComputes the size and alignment of required workspace for …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its partial …\nComputes the inverse of a matrix, given its partial …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its partial …")