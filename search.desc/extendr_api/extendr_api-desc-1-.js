searchState.loadedDescShard("extendr_api", 1, "Computes the reconstructed matrix, given its partial …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nThe QR decomposition decomposes a matrix $A$ into the …\nThe QR decomposition decomposes a matrix $A$ into the …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nQR factorization tuning parameters.\nInformation about the resulting QR factorization.\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the QR decomposition with pivoting of a …\nComputes the size and alignment of required workspace for …\nThe recommended block size to use for a QR decomposition …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its QR …\nComputes the inverse of a matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its QR …\nComputes the reconstructed matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors with column pivoting of a matrix $A$ …\nGiven the QR factors with column pivoting of a matrix $A$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors with column pivoting of a matrix $A$ …\nGiven the QR factors with column pivoting of a matrix $A$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nQR factorization tuning parameters.\nAt which size blocking algorithms should be disabled. <code>None</code> …\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the QR decomposition of a rectangular matrix $A$, …\nComputes the size and alignment of required workspace for …\nThe recommended block size to use for a QR decomposition …\nComputes the inverse of a matrix, given its QR …\nComputes the inverse of a matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its QR …\nComputes the reconstructed matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nIndicates whether the singular vectors are fully computed, …\nCompute all the singular vectors.\nDo not compute the singular vectors.\nSVD tuning parameters.\nOnly compute the first $\\min(\\text{nrows}(A), …\nComputes the singular value decomposition of <code>matrix</code>.\nSee <code>compute_svd</code>.\nComputes the size and alignment of required workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPermutation matrix.\nImmutable permutation matrix view.\nReturns the permutation as an array.\nConvert <code>self</code> to a permutation view.\nConvert <code>self</code> to a permutation view.\nCast the permutation to the fixed width index type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the permutation as an array.\nReturns the inverse permutation.\nReturns the inverse permutation.\nReturns the dimension of the permutation.\nReturns the dimension of the permutation.\nCreates a new permutation, by checking the validity of the …\nCreates a new permutation, by checking the validity of the …\nCreates a new permutation reference, without checking the …\nCreates a new permutation reference, without checking the …\nComputes a permutation of the columns of the source matrix …\nComputes a permutation of the columns of the matrix using …\nComputes the size and alignment of required workspace for …\nComputes a permutation of the rows of the source matrix …\nComputes a permutation of the rows of the matrix using the …\nComputes the size and alignment of required workspace for …\nSwaps the values in the columns <code>a</code> and <code>b</code>.\nSwaps the two columns at indices <code>a</code> and <code>b</code> in the given …\nSwaps the values in the rows <code>a</code> and <code>b</code>.\nSwaps the two rows at indices <code>a</code> and <code>b</code> in the given matrix.\nCast the permutation from the fixed width index type.\nThis trait is similar to [<code>std::convert::AsMut</code>], but works …\nThis trait is similar to [<code>std::convert::AsRef</code>], but works …\nConsume a mutable reference to produce an immutable one.\nImmutable reborrowing.\nMutable reborrowing.\nTrait for types that can be converted to a mutable row …\nTrait for types that can be converted to a row view.\nCorresponding owning type.\nHeap allocated resizable row vector.\nType that can be interpreted as a batch of row vectors. …\nType that can be interpreted as a mutable batch of row …\nRepresents a type that can be used to slice a row, such as …\nMutable view over a row vector, similar to a mutable …\nImmutable view over a row vector, similar to an immutable …\nResulting type of the indexing operation.\nConvert to a mutable row view.\nConvert to a row view.\nReturns a view over a column with 1 row containing value …\nReturns a view over a row with 1 column containing value …\nCreates a <code>RowRef</code> from pointers to the row vector data, …\nCreates a <code>RowMut</code> from pointers to the row vector data, …\nReturns a view over a row with 1 column containing value …\nReturns a view over a row with 1 column containing value …\nReturns a view over a row with <code>ncols</code> columns containing …\nReturns a view over a row with <code>ncols</code> columns containing …\nCreates a <code>RowRef</code> from slice views over the row vector …\nCreates a <code>RowRef</code> from slice views over the row vector …\nCreates a <code>RowMut</code> from slice views over the row vector …\nCreates a <code>RowMut</code> from slice views over the row vector …\nIndex the row at <code>col</code>.\nIndex the row at <code>col</code>, without bound checks.\nConstructor of the owned type that copies the values.\nConstructor of the owned type that initializes the values …\nResize an owned column or matrix.\nCholesky decomposition.\nThis error signifies that the LLT decomposition could not …\nQR decomposition with column pivoting.\nComplex eigendecomposition.\nLU decomposition with full pivoting.\nBunch-Kaufman decomposition.\nLU decomposition with partial pivoting.\nQR decomposition.\nSelf-adjoint eigendecomposition.\nSolver that can compute solution of a linear system.\nObject-safe base for <code>Solver</code>\nDense solver that can compute the least squares solution …\nObject-safe base for <code>SolverLstsq</code>\nSolver that can compute solution of a linear system.\nObject-safe base for <code>SpSolver</code>\nSolver that can compute the least squares solution of an …\nObject-safe base for <code>SpSolverLstsq</code>\nSingular value decomposition.\nThin singular value decomposition.\nReturns the column permutation due to pivoting.\nReturns the column permutation matrix $P$ of the QR …\nReturns the factor $L$ of the Cholesky decomposition.\nReturns the factor $L$ of the LU decomposition.\nReturns the factor $L$ of the LU decomposition.\nReturns the factor $Q$ of the QR decomposition.\nReturns the factor $Q$ of the QR decomposition.\nReturns the factor $R$ of the QR decomposition.\nReturns the factor $R$ of the QR decomposition.\nReturns the leftmost $r$ columns of the factor $Q$ of the …\nReturns the leftmost $r$ columns of the factor $R$ of the …\nReturns the top $r$ rows of the factor $R$ of the QR …\nReturns the top $r$ rows of the factor $R$ of the QR …\nReturns the factor $U$ of the LU decomposition.\nReturns the factor $U$ of the LU decomposition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of the original matrix using the …\nReturns the number of columns of the matrix used to …\nReturns the Bunch-Kaufman factorization of the input …\nReturns the LU decomposition of the input matrix with …\nReturns the LU decomposition of the input matrix with row …\nReturns the QR decomposition of the input matrix without …\nReturns the QR decomposition of the input matrix with …\nReturns the SVD of the input matrix.\nReturns the thin SVD of the input matrix.\nReturns the eigenvalue decomposition of the Hermitian …\nReturns the eigendecomposition of the complex-valued input …\nReturns the eigendecomposition of the real-valued input …\nThe dimension of the first square non positive-definite …\nReturns the number of rows of the matrix used to construct …\nComputes the pseudo inverse.\nComputes the pseudo inverse.\nReconstructs the original matrix using the decomposition.\nReturns the row permutation due to pivoting.\nReturns the row permutation due to pivoting.\nReturns the factor $S$ of the eigenvalue decomposition.\nReturns the factor $S$ of the eigenvalue decomposition.\nReturns the diagonal of the factor $S$ of the SVD as a …\nReturns the diagonal of the factor $S$ of the SVD as a …\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, and stores …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and returns …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and stores …\nSolves the equation <code>self * X = rhs</code>, and stores the result …\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, in the …\nSolves the equation <code>self * X = rhs</code>, in the sense of least …\nSolves the equation <code>transpose(self) * X = rhs</code>, and returns …\nSolves the equation <code>transpose(self) * X = rhs</code>, and stores …\nReturns the number of transpositions that constitute the …\nReturns the number of transpositions that constitute the …\nReturns the Cholesky factorization of the input matrix, or …\nReturns the factor $U$ of the SVD.\nReturns the factor $U$ of the SVD.\nReturns the factor $U$ of the eigenvalue decomposition.\nReturns the factor $U$ of the eigenvalue decomposition.\nReturns the factor $V$ of the SVD.\nReturns the factor $V$ of the SVD.\nNew filled values should be added to the old values.\nSparse Cholesky error.\nErrors that can occur in sparse algorithms.\nErrors that can occur in sparse algorithms.\nWhether the filled values should replace the current …\nEqually-sized index type with a fixed size (no <code>usize</code>).\nGeneric error (allocation or index overflow).\nGeneric sparse error.\nGeneric sparse error.\nTrait for unsigned integers that can be indexed with.\nAn index exceeding the maximum value (<code>I::Signed::MAX</code> for a …\nSparse LU error.\nMatrix is not positive definite.\nMatrix index out-of-bounds error.\nMemory allocation failed.\nNew filled values should replace the old values.\nEqually-sized signed index type.\nSparse matrix in column-major format, either compressed or …\nSparse matrix view in column-major format, either …\nSparse matrix view in column-major format, either …\nSparse matrix in column-major format, either compressed or …\nSparse matrix view in column-major format, either …\nSparse matrix view in column-major format, either …\nRank deficient symbolic structure.\nRank deficient symbolic structure.\nSymbolic structure of sparse matrix in column format, …\nSymbolic view structure of sparse matrix in column format, …\nSymbolic structure of sparse matrix in row format, either …\nSymbolic view structure of sparse matrix in row format, …\nThe order values should be read in, when …\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the symbolic structure of <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the symbolic structure of <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nConvert a reference to a slice of <code>Self</code> to fixed width …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nConvert a mutable reference to a slice of <code>Self</code> to fixed …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row <code>i</code>.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row <code>i</code>.\nReturns the column indices of row i.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a signed value to an unsigned one.\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a mutable reference to a slice containing the …\nReturns a mutable reference to a slice containing the …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns the conjugate of <code>self</code>.\nReturns the conjugate of <code>self</code>.\nReturns the components of the matrix in the order:\nDecomposes the matrix into the symbolic part and the …\nReturns the components of the matrix in the order:\nDecomposes the matrix into the symbolic part and the …\nConsumes the matrix, and returns its transpose in …\nReturns the transpose of <code>self</code> in row-major format.\nConsumes the matrix, and returns its transpose in …\nReturns the transpose of <code>self</code> in column-major format.\nSparse linear algebra module. Contains low level routines …\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreate a new matrix from a previously created symbolic …\nCreate a new matrix from a previously created symbolic …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per row of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nSparse matrix binary and ternary operation implementations.\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nSparse solvers.\nSorts the row indices in each column of the matrix …\nSorts the row indices in each column of the matrix …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nSum values while checking for overflow.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nConvert an unsigned value to a signed one.\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nTruncate <code>value</code> to type <code>Self</code>.\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new matrix from triplets <code>(row, col, value)</code>. …\nCreate a new matrix from triplets <code>(row, col, value)</code>. …\nCreate a new matrix from triplets <code>(row, col, value)</code>.\nCreate a new matrix from triplets <code>(row, col, value)</code>.\nUseful sparse matrix primitives.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns a slice over the numerical values of the matrix.\nReturns a slice over the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns a mutable slice over the numerical values of the …\nReturns a mutable slice over the numerical values of the …\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nZero extend <code>self</code>.\nColumn of the out-of-bounds index.\nRow of the out-of-bounds index.\nDetermine automatically which variant to select.\nSparse Cholesky error.\nSimplicial factorization is always selected.\nSupernodal factorization is always selected.\nErrors that can occur in sparse algorithms.\nEqually-sized index type with a fixed size (no <code>usize</code>).\nGeneric sparse error.\nGeneric sparse error.\nTrait for unsigned integers that can be indexed with.\nAn index exceeding the maximum value (<code>I::Signed::MAX</code> for a …\nSparse LU error.\nMaximum representable value.\nMatrix is not positive definite.\nMemory allocation failed.\nEqually-sized signed index type.\nTrait for signed integers corresponding to the ones …\nNonnegative threshold controlling when the supernodal …\nRank deficient symbolic structure.\nRank deficient symbolic structure.\nTuning parameters for the supernodal factorizations.\nApproximate minimum degree ordering.\nConvert a reference to a slice of <code>Self</code> to fixed width …\nConvert a mutable reference to a slice of <code>Self</code> to fixed …\nComputes the Cholesky decomposition (either LLT, LDLT, or …\nApproximate minimum degree column ordering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a signed value to an unsigned one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of a given sparse matrix. See\nSparse matrix multiplication.\nComputes the QR decomposition of a given sparse matrix. …\nSupernode relaxation thresholds.\nHigh level sparse solvers.\nSum values while checking for overflow.\nSum nonnegative values while checking for overflow.\nSign extend <code>self</code>.\nConvert an unsigned value to a signed one.\nSolving sparse triangular linear systems with a dense …\nTruncate <code>value</code> to type <code>Self</code>.\nTruncate <code>value</code> to type <code>Self</code>.\nZero extend <code>self</code>.\nZero extend <code>self</code>.\nTuning parameters for the AMD implementation.\nFlop count of the LDLT and LU factorizations if the …\nDo aggressive absorption.\n“dense” if degree &gt; dense * sqrt(n)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of division.\nNumber of multiplications and subtractions for the LDLT …\nNumber of multiplications and subtractions for the LU …\nComputes the approximate minimum degree ordering for …\nComputes the approximate minimum degree ordering for …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nApproximate minimum degree ordering. Default option.\nDynamic Bunch-Kaufman regularization. Values below <code>epsilon</code> …\nThis error signifies that the LLT decomposition could not …\nTuning parameters for the symbolic Cholesky factorization.\nCustom reordering.\nNo reordering.\nSparse intranodal Bunch-Kaufman factorization wrapper.\nSparse LDLT factorization wrapper.\nDynamic LDLT regularization. Values below <code>epsilon</code> in …\nSparse LLT factorization wrapper.\nDynamic LLT regularization. Values below <code>epsilon</code> in …\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse Cholesky decomposition.\nThe inner factorization used for the symbolic Cholesky, …\nFill reducing ordering to use for the Cholesky …\nParameters for computing the fill-reducing permutation.\nRegularized value.\nRegularized value.\nRegularized value.\nRegularization threshold.\nRegularization threshold.\nRegularization threshold.\nExpected signs for the diagonal at each step of the …\nExpected signs for the diagonal at each step of the …\nComputes a numerical intranodal Bunch-Kaufman …\nComputes the required workspace size and alignment for a …\nComputes a numerical LDLT factorization of A.\nComputes the required workspace size and alignment for a …\nComputes a numerical LLT factorization of A, or returns a …\nComputes the required workspace size and alignment for a …\nComputes the symbolic Cholesky factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice needed to store the …\nReturns the number of columns of the matrix.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates new Cholesky LDLT factors from the symbolic part …\nCreates a new Cholesky intranodal Bunch-Kaufman factor …\nThe dimension of the first square non positive-definite …\nReturns the number of rows of the matrix.\nReturns the permutation that was computed during symbolic …\nReturns the inner type of the factorization, either …\nSimplicial factorization module.\nComputes the required workspace size and alignment for a …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReference to a slice containing the Cholesky factor’s …\nCholesky LDLT factors containing both the symbolic and …\nCholesky LLT factor containing both its symbolic and …\nCholesky factor structure containing its symbolic …\nReturns the column pointers of the Cholesky factor.\nReturns the Cholesky factor’s symbolic structure.\nComputes the numeric values of the Cholesky LDLT factors …\nReturns the size and alignment of the workspace required …\nComputes the row indices and  numeric values of the …\nComputes the numeric values of the Cholesky LLT factor of …\nReturns the size and alignment of the workspace required …\nComputes the row indices and  numeric values of the …\nComputes the symbolic structure of the Cholesky factor of …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an elimination tree reference from the underlying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw elimination tree.\nReturns the length of the slice that can be used to …\nReturns the number of columns of the Cholesky factor.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates a new Cholesky LDLT factor from the symbolic part …\nReturns the number of rows of the Cholesky factor.\nComputes the elimination tree and column counts of the …\nComputes the size and alignment of the workspace required …\nReturns the row indices of the Cholesky factor.\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the numerical values of the Cholesky LLT factor.\nReturns the numerical values of the Cholesky LDLT factor.\nCholesky Bunch-Kaufman factors containing both the …\nCholesky LDLT factors containing both the symbolic and …\nCholesky LLT factor containing both its symbolic and …\nA single supernode from the Cholesky factor.\nCholesky factor structure containing its symbolic …\nSymbolic structure of a single supernode from the Cholesky …\nReturns the column pointers for row indices of each …\nReturns the column pointers for numerical values of each …\nComputes the numeric values of the Cholesky Bunch-Kaufman …\nReturns the size and alignment of the workspace required …\nComputes the numeric values of the Cholesky LDLT factors …\nReturns the size and alignment of the workspace required …\nComputes the numeric values of the Cholesky LLT factor of …\nReturns the size and alignment of the workspace required …\nComputes the supernodal symbolic structure of the Cholesky …\nReturns the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSolves the equation $\\text{Op}(L) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(L^\\top) x = \\text{rhs}$ and …\nReturns the length of the slice that can be used to …\nReturns a view over the numerical values of the supernode.\nReturns the number of supernodes in the Cholesky factor.\nReturns the number of columns of the Cholesky factor.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates new Cholesky LDLT factors from the symbolic part …\nCreates a new Cholesky intranodal Bunch-Kaufman factor …\nReturns the number of rows of the Cholesky factor.\nReturns the pattern of the row indices in the supernode, …\nReturns the pattern of the row indices in the supernode, …\nReturns the row indices of the Cholesky factor.\nSolves the system $\\text{Op}(L B L^H) x = \\text{rhs}$, …\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nReturns the starting index of the supernode.\nReturns the starting index of the supernode.\nReturns the <code>s</code>’th supernode.\nReturns the <code>s</code>’th supernode.\nReturns the <code>s</code>’th supernode.\nReturns the symbolic structure of the <code>s</code>’th supernode.\nReturns a slice of length <code>self.n_supernodes()</code> containing …\nReturns a slice of length <code>self.n_supernodes()</code> containing …\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the numerical values of the L factor.\nReturns the numerical values of the L factor.\nReturns the numerical values of the L factor.\nTuning parameters for the AMD implementation.\nDo aggressive absorption.\n“dense” if degree &gt; dense_col * sqrt(min(nrows, ncols))\n“dense” if degree &gt; dense_row * sqrt(ncols)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the approximate minimum degree ordering for …\nComputes the size and alignment of required workspace for …\nSparse LU factorization wrapper.\nTuning parameters for the LU symbolic factorization.\nStructure that contains the numerical values and row …\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse LU decomposition.\nThe inner factorization used for the symbolic LU, either …\nReturns the fill-reducing column permutation that was …\nReturns the fill reducing column permutation.\nParameters for the fill reducing column permutation\nComputes a numerical LU factorization of A.\nComputes the size and alignment of the workspace required …\nComputes the symbolic LU factorization of the matrix <code>A</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of columns of $A$.\nCreates a new LU of a $0\\times 0$ matrix.\nCreates LU factors from their components.\nReturns the number of rows of $A$.\nReturns the row pivoting permutation.\nSimplicial factorization module.\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic structure of the LU factorization.\nNumber of columns of $A$.\nNumber of rows of $A$.\nLU factor structure containing the symbolic and numerical …\nComputes the numeric values of the LU factors of the …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the $L$ factor of the LU factorization. The row …\nReturns the number of columns of $A$.\nCreates a new Simplicial LU of a $0\\times 0$ matrix.\nReturns the number of rows of $A$.\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nReturns the $U$ factor of the LU factorization. The row …\nLU factor structure containing the symbolic and numerical …\nLU factor structure containing the symbolic structure.\nComputes the numeric values of the LU factors of the …\nComputes the size and alignment of the workspace required …\nComputes the symbolic structure of the LU factors of the …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of supernodes.\nReturns the number of columns of $A$.\nCreates a new Supernodal LU of a $0\\times 0$ matrix.\nReturns the number of rows of $A$.\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nInfo about the matrix multiplication operation to help …\nMultiplies a dense matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiplies a sparse matrix <code>lhs</code> by a dense matrix <code>rhs</code>, and …\nMultiplies a sparse matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, …\nPerforms a numeric matrix multiplication of a sparse …\nComputes the size and alignment of the workspace required …\nPerforms a symbolic matrix multiplication of a sparse …\nSparse QR factorization wrapper.\nTuning parameters for the QR symbolic factorization.\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse QR decomposition.\nThe inner factorization used for the symbolic QR, either …\nComputes the column elimination tree of $A$, which is the …\nComputes the size and alignment of the workspace required …\nReturns the fill-reducing column permutation that was …\nParameters for the fill reducing column permutation\nComputes the size and alignment of the workspace required …\nComputes the column counts of the Cholesky factor of …\nComputes a numerical QR factorization of A.\nComputes the required workspace size and alignment for a …\nComputes the symbolic QR factorization of the matrix <code>A</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice needed to store the …\nReturns the length of the slice needed to store the …\nNumber of columns of $A$.\nCreates a QR decomposition reference from its symbolic and …\nNumber of rows of $A$.\nComputes a postordering of the elimination tree of size <code>n</code>.\nComputes the size and alignment of the workspace required …\nSimplicial factorization module.\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic structure of the QR factorization.\nQR factors containing both the symbolic and numeric …\nSymbolic structure of the QR decomposition,\nComputes the size and alignment of the workspace required …\nComputes the numerical QR factorization of $A$.\nComputes the symbolic QR factorization of a matrix $A$, …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numerical values of the Householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the number of columns of the matrix $A$.\nCreates QR factors from their components.\nReturns the number of rows of the matrix $A$.\nReturns the numerical values of the factor $R$ of the QR …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nReturns the symbolic structure of the QR factorization.\nReturns the numerical values of the $T$ factors of the QR …\nQR factors containing both the symbolic and numeric …\nSymbolic structure of the Householder reflections that …\nSymbolic structure of the QR decomposition,\nReturns the column pointers for the row indices of the …\nReturns the column pointers for the numerical values of …\nReturns the column pointers for the numerical values of …\nComputes the numerical QR factorization of $A$.\nComputes the size and alignment of the workspace required …\nComputes the symbolic QR factorization of a matrix $A$, …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the symbolic structure of the Householder and $T$ …\nReturns the numerical values of the Householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the number of supernodes in the symbolic QR.\nCreates QR factors from their components.\nReturns the number of rows of the Householder factors.\nReturns the symbolic structure of $R^H$.\nReturns the numerical values of the factor $R$ of the QR …\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nReturns the symbolic structure of the QR factorization.\nReturns the numerical values of the $T$ factors of the QR …\nSparse Cholesky factorization.\nSparse LU factorization.\nSparse QR factorization.\nSolver that can compute solution of a linear system.\nObject-safe base for <code>SpSolver</code>\nSolver that can compute the least squares solution of an …\nObject-safe base for <code>SpSolverLstsq</code>\nReference-counted sparse symbolic Cholesky factorization.\nReference-counted sparse symbolic LU factorization.\nReference-counted sparse symbolic QR factorization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of columns of the matrix used to …\nReturns the number of rows of the matrix used to construct …\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, and stores …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and returns …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and stores …\nSolves the equation <code>self * X = rhs</code>, and stores the result …\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, in the …\nSolves the equation <code>self * X = rhs</code>, in the sense of least …\nSolves the equation <code>transpose(self) * X = rhs</code>, and returns …\nSolves the equation <code>transpose(self) * X = rhs</code>, and stores …\nReturns the symbolic Cholesky factorization of the input …\nReturns the symbolic QR factorization of the input matrix.\nReturns the symbolic LU factorization of the input matrix.\nReturns the Cholesky factorization of the input matrix …\nReturns the QR factorization of the input matrix with the …\nReturns the LU factorization of the input matrix with the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nReturns the sum of <code>lhs</code> and <code>rhs</code>.\nComputes the sum of <code>dst</code> and <code>src</code> and stores the result in …\nComputes the sum of <code>lhs</code> and <code>rhs</code>, storing the result in <code>dst</code> …\nReturns the resulting matrix obtained by applying <code>f</code> to the …\nReturns the resulting matrix obtained by applying <code>f</code> to the …\nReturns the difference of <code>lhs</code> and <code>rhs</code>.\nComputes the difference of <code>dst</code> and <code>src</code> and stores the …\nComputes the difference of <code>lhs</code> and <code>rhs</code>, storing the result …\nReturns the resulting matrix obtained by applying <code>f</code> to the …\nReturns the sparsity pattern containing the union of those …\nCholesky decomposition.\nThis error signifies that the LLT decomposition could not …\nQR decomposition with column pivoting.\nComplex eigendecomposition.\nLU decomposition with full pivoting.\nBunch-Kaufman decomposition.\nLU decomposition with partial pivoting.\nQR decomposition.\nSelf-adjoint eigendecomposition.\nSolver that can compute solution of a linear system.\nObject-safe base for <code>Solver</code>\nDense solver that can compute the least squares solution …\nObject-safe base for <code>SolverLstsq</code>\nSolver that can compute solution of a linear system.\nObject-safe base for <code>SpSolver</code>\nSolver that can compute the least squares solution of an …\nObject-safe base for <code>SpSolverLstsq</code>\nSingular value decomposition.\nThin singular value decomposition.\nComputes the inverse of the original matrix using the …\nReturns the number of columns of the matrix used to …\nThe dimension of the first square non positive-definite …\nReturns the number of rows of the matrix used to construct …\nReconstructs the original matrix using the decomposition.\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, and stores …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and returns …\nSolves the equation <code>adjoint(self) * X = rhs</code>, and stores …\nSolves the equation <code>self * X = rhs</code>, and stores the result …\nSolves the equation <code>self * X = rhs</code>, and returns the result.\nSolves the equation <code>conjugate(self) * X = rhs</code>, and returns …\nSolves the equation <code>conjugate(self) * X = rhs</code>, in the …\nSolves the equation <code>self * X = rhs</code>, in the sense of least …\nSolves the equation <code>transpose(self) * X = rhs</code>, and returns …\nSolves the equation <code>transpose(self) * X = rhs</code>, and stores …\nComputes the adjoint of the matrix <code>A</code> and returns a view …\nComputes the adjoint of the symbolic matrix <code>A</code> and returns …\nComputes the self-adjoint permutation $P A P^\\top$ of the …\nComputes the size and alignment of the workspace required …\nSorts and deduplicates <code>row_indices</code> and <code>values</code> …\nSorts <code>row_indices</code> and <code>values</code> simultaneously so that …\nComputes the transpose of the matrix <code>A</code> and returns a view …\nNaNs are skipped, and they’re not included in the total …\nSpecifies how missing values should be handled in mean and …\nThe normal distribution, <code>N(mean, std_dev**2)</code>.\nThe normal distribution, <code>N(mean, std_dev**2)</code> for …\nThe normal distribution, <code>N(mean, std_dev**2)</code> for …\nThe normal distribution, <code>N(mean, std_dev**2)</code> for …\nNaNs are passed as-is to arithmetic operators.\nThe standard distribution. Samples uniformly distributed …\nThe standard distribution. Samples uniformly distributed …\nThe standard normal distribution, <code>N(0, 1)</code> for …\nThe standard normal distribution, <code>N(0, 1)</code> for …\nThe standard normal distribution, <code>N(0, 1)</code> for …\nThe standard distribution. Samples uniformly distributed …\nUniformly samples a unitary matrix from the unitary group, …\nComputes the mean of the columns of <code>mat</code> and stores the …\nComputes the variance of the columns of <code>mat</code> given their …\nDimension of the sampled matrix.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct, from dimensions, mean and coefficient of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of columns of the sampled matrix.\nNumber of columns of the sampled matrix.\nNumber of columns of the sampled matrix.\nNumber of columns of the sampled row.\nNumber of columns of the sampled row.\nNumber of columns of the sampled row.\nConstruct, from dimensions, mean and standard deviation.\nNormal distribution parameters for a single scalar.\nNormal distribution parameters for a single scalar.\nNormal distribution parameters for a single scalar.\nNumber of rows of the sampled matrix.\nNumber of rows of the sampled matrix.\nNumber of rows of the sampled matrix.\nNumber of rows of the sampled column.\nNumber of rows of the sampled column.\nNumber of rows of the sampled column.\nComputes the mean of the rows of <code>mat</code> and stores the result …\nComputes the variance of the rows of <code>mat</code> given their mean, …\nIndex and matrix types with compile time checks, whichh …\nSimd operations for a specific type satisfying <code>ComplexField</code>…\nSlice types for entities.\nUtilities relating to threading and parallelism.\nVector type for entities.\nArray of length equal to the value tied to <code>&#39;n</code>.\nImmutable array group of length equal to the value tied to …\nMutable array group of length equal to the value tied to <code>&#39;n</code>…\n<code>I</code> value smaller than the size corresponding to the …\n<code>I</code> value smaller or equal to the size corresponding to the …\n<code>I</code> value smaller than the size corresponding to the …\n<code>usize</code> value tied to the lifetime <code>&#39;n</code>.\nReturns the unconstrained slice.\nReturns the unconstrained slice.\nConvert a constrained slice to an unconstrained one.\nCheck that the index is bounded by <code>self</code>, or panic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an index value.\nReturns a constrained array after checking that its length …\nReturns a constrained array after checking that its length …\nAssert that the values of <code>slice</code> are all bounded by <code>size</code>.\nAssert that the values of <code>slice</code> are all bounded by <code>size</code>.\nAssume that the values of <code>slice</code> are all bounded by the …\nAssume that the values of <code>slice</code> are all bounded by the …\nAssert that the values of <code>slice</code> are all bounded by <code>size</code>.\nAssert that the values of <code>slice</code> are all bounded by <code>size</code>.\nAssume that the values of <code>slice</code> are all bounded by the …\nAssume that the values of <code>slice</code> are all bounded by the …\nReturns the index if available, or <code>None</code> otherwise.\nReturns an iterator of the indices smaller than <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unconstrained value.\nReturns the unconstrained value.\nReturns the unconstrained value.\nReturns the inner value.\nReturns the unconstrained slice.\nReturns the unconstrained slice.\nReturns the length of <code>self</code>.\nDense matrices with compile-time access checks.\nReturns an array group with length after checking that its …\nReturns an array group with length after checking that its …\nReturns a new index after asserting that it’s bounded by …\nReturns a constrained inclusive index after checking that …\nReturns a constrained index value if <code>idx</code> is nonnegative, …\nCreate a new <code>Size</code> tied to the lifetime <code>&#39;n</code>.\nReturns a new index without asserting that it’s bounded …\nReturns a constrained inclusive index, assuming that it’…\nReturns a constrained index value if <code>idx</code> is nonnegative, …\nReturns a new index without asserting that it’s bounded …\nReturns a constrained inclusive index, assuming that it’…\nReturns a constrained index value if <code>idx</code> is nonnegative, …\nReturns the next index, bounded inclusively by the value …\nReturns a <code>None</code> value.\nPermutations with compile-time checks.\nReturns an iterator over constrained indices from <code>0</code> to <code>self</code>…\nRead the element at position <code>j</code>.\nRead the element at position <code>j</code>.\nSparse matrices with compile-time access checks.\nReturns a subslice at from the range start to its end.\nReturns a subslice at from the range start to its end.\nUnimplemented: Sign extend the value.\nUnimplemented: Sign extend the value.\nSign extend the value.\nReturns the index, bounded inclusively by the value tied …\nTruncate <code>self</code> to a smaller type <code>I</code>.\nCheck that the index is bounded by <code>self</code>, or return <code>None</code> …\nCreate a new <code>Size</code> with a lifetime tied to <code>n</code>.\nCreate two new <code>Size</code> with lifetimes tied to <code>m</code> and <code>n</code>.\nWrite <code>value</code> to the location at position <code>j</code>.\nZero extend the value.\nUnimplemented: Zero extend the value.\nUnimplemented: Zero extend the value.\nMutable dense matrix view with dimensions equal to the …\nImmutable dense matrix view with dimensions equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unconstrained matrix.\nReturns the unconstrained matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns a new matrix view after checking that its …\nReturns a new matrix view after checking that its …\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the element at position <code>(i, j)</code>.\nReturns the element at position <code>(i, j)</code>.\nWrites <code>value</code> to the location at position <code>(i, j)</code>.\nPermutation of length equal to the value tied to <code>&#39;n</code>.\nReturns the forward and inverse permutation indices.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the unconstrained permutation.\nReturns the inverse permutation.\nReturns the length of the permutation.\nReturns a new permutation after checking that it matches …\nMutable sparse matrix view with dimensions equal to the …\nImmutable sparse matrix view with dimensions equal to the …\nSymbolic structure view with dimensions equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unconstrained symbolic structure.\nReturns the unconstrained matrix.\nReturns the unconstrained matrix.\nReturns the number of columns of the matrix.\nReturns a new symbolic structure after checking that its …\nReturns a new matrix view after checking that its …\nReturns a new matrix view after checking that its …\nReturns the number of rows of the matrix.\nReturns the row indices in column <code>j</code>.\nReturns the row indices in column <code>j</code>.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the values in column <code>j</code>.\nReturns the values in column <code>j</code>.\nThe corresponding <code>Conj</code> value.\nSimilar to <code>Conj</code>, but determined at compile time instead of …\nThe opposing conjugation type.\nDo not conjugate.\nSimd prefix, contains the elements before the body.\nSimd prefix (mutable), contains the elements before the …\nWrapper for simd operations for type <code>E</code>.\nSimd suffix, contains the elements after the body.\nSimd suffix (mutable), contains the elements after the …\nDo conjugate.\nReturns <code>abs(values)</code>.\nReturns <code>abs(values) * abs(values)</code>.\nReturns <code>abs(values) * abs(values) + acc</code>.\nReturns <code>lhs + rhs</code>.\nComputes the alignment offset for subsequent aligned loads.\nComputes the alignment offset for subsequent aligned loads …\nConvert a slice to a partial register prefix and suffix, …\nConvert a mutable slice to a partial register prefix and …\nConvert a slice to a slice over vector registers, and a …\nConvert a mutable slice to a slice over vector registers, …\nReturns <code>op(lhs) * rhs</code>, where <code>op</code> is either the conjugation …\nReturns <code>op(lhs) * rhs + acc</code>, where <code>op</code> is either the …\nReturns <code>conj(lhs) * rhs</code>.\nReturns <code>conj(lhs) * rhs + acc</code>.\nReturns an instance of the corresponding conjugation type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>a &gt; b</code>.\nReturns <code>a &gt;= b</code>.\nReturns <code>a + b</code>.\nReturns <code>if mask { if_true } else { if_false }</code>\nReturns <code>[0, 1, 2, 3, ..., REGISTER_SIZE - 1]</code>\nFill all the register lanes with the same value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>a &lt; b</code>.\nReturns <code>a &lt;= b</code>.\nReturns <code>lhs * rhs</code>.\nReturns <code>lhs * rhs + acc</code>.\nReturns <code>-a</code>.\nCreate a new wrapper from a simd token.\nSum the components of a vector register into a single …\nRotate <code>values</code> to the left, with overflowing entries …\nReturns an estimate of <code>op(lhs) * rhs</code>, where <code>op</code> is either …\nReturns an estimate of <code>op(lhs) * rhs + acc</code>, where <code>op</code> is …\nReturns <code>conj(lhs) * rhs</code>.\nReturns an estimate of <code>conj(lhs) * rhs + acc</code>.\nReturns <code>lhs * rhs</code>.\nReturns an estimate of <code>lhs * rhs + acc</code>.\nReturns <code>lhs * rhs</code>.\nReturns <code>abs(values)</code> or <code>abs(values) * abs(values)</code>, …\nReturns <code>if mask { if_true } else { if_false }</code>\nSimd token.\nFill all the register lanes with the same value.\nReturns <code>lhs - rhs</code>.\nWrapper around a group of references.\nWrapper around a group of mutable references.\nAnalogous to an immutable reference to a slice for groups.\nAnalogous to a mutable reference to a slice for groups.\nDecompose <code>self</code> into a slice of arrays of size <code>N</code>, and a …\nDecompose <code>self</code> into a mutable slice of arrays of size <code>N</code>, …\nFill the slice with zeros.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies and returns the value pointed to by the references.\nCopies and returns the value pointed to by the references.\nGet a <code>RefGroup</code> pointing to the element at position <code>idx</code>.\nGet a <code>RefGroup</code> pointing to the element at position <code>idx</code>.\nGet a <code>RefGroupMut</code> pointing to the element at position <code>idx</code>.\nGet a <code>RefGroup</code> pointing to the element at position <code>idx</code>, …\nGet a <code>RefGroup</code> pointing to the element at position <code>idx</code>, …\nGet a <code>RefGroupMut</code> pointing to the element at position <code>idx</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of slices over chunks of size …\nReturns an iterator of slices over chunks of size …\nConsume <code>self</code> to return the internally stored group of …\nConsume <code>self</code> to return the internally stored group of …\nConsume <code>self</code> to return the internally stored group of …\nConsume <code>self</code> to return the internally stored group of …\nReturns an iterator of <code>RefGroupMut</code> over the elements of …\nReturns an iterator of <code>RefGroup</code> over the elements of the …\nChecks whether the slice is empty.\nChecks whether the slice is empty.\nReturns the length of the slice.\nReturns the length of the slice.\nCreate a new <code>RefGroup</code> from a group of references.\nCreate a new <code>RefGroupMut</code> from a group of mutable …\nCreate a new <code>SliceGroup</code> from a group of slice references.\nCreate a new <code>SliceGroup</code> from a group of mutable slice …\nRead the element pointed to by the references.\nRead the element pointed to by the references.\nRead the element at position <code>idx</code>.\nRead the element at position <code>idx</code>.\nRead the element at position <code>idx</code>, without bound checks.\nRead the element at position <code>idx</code>, without bound checks.\nWrites <code>value</code> to the location pointed to by the references.\nWrites <code>value</code> to the location pointed to by the references.\nSplit <code>self</code> at the midpoint <code>idx</code>, and return the two parts.\nSplit <code>self</code> at the midpoint <code>idx</code>, and return the two parts.\nReturns the subslice of <code>self</code> from the start to the end of …\nReturns the subslice of <code>self</code> from the start to the end of …\nReturns the subslice of <code>self</code> from the start to the end of …\nReturns the subslice of <code>self</code> from the start to the end of …\nConvert a reference to an array to an array of references.\nConvert a mutable reference to an array to an array of …\nWrite <code>value</code> to the location pointed to by the references.\nWrite <code>value</code> to the location at position <code>idx</code>.\nWrite <code>value</code> to the location at position <code>idx</code>, without bound …\nUnsafe <code>Send</code> and <code>Sync</code> pointer type.\nExecutes the tasks by passing the values in <code>0..n_tasks</code> to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecutes the two operations, possibly in parallel, while …\nReturns the start and length of a subsegment of <code>0..n</code>, …\nThe amount of threads that should ideally execute an …\nAnalogous to <code>alloc::vec::Vec</code> for groups.\nReturn a mutable reference to the inner group of …\nReturn a reference to the inner group of <code>alloc::vec::Vec</code>.\nReturn a <code>SliceGroup</code> view over the elements of <code>self</code>.\nReturn a <code>SliceGroupMut</code> mutable view over the elements of …\nReturns the capacity of the vector group.\nClear the vector, making it empty.\nReturns the argument unchanged.\nCreate a new <code>VecGroup</code> from a group of <code>alloc::vec::Vec</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> to return a group of <code>alloc::vec::Vec</code>.\nReturns the length of the vector group.\nCreate an empty <code>VecGroup</code>.\nRemove a new element from the end of <code>self</code>, and return it.\nPush a new element to the end of <code>self</code>.\nRemove a new element from position <code>index</code>, and return it.\nReserve enough capacity for extra <code>additional</code> elements.\nReserve exactly enough capacity for extra <code>additional</code> …\nResize the vector to <code>new_len</code>, filling the new elements with\nResize the vector to <code>new_len</code>, filling the new elements with\nTruncate the length of the vector to <code>len</code>.\nTry to reserve enough capacity for extra <code>additional</code> …\nTry to reserve exactly enough capacity for extra <code>additional</code>…\nGeneric access to typed slices in an Robj.\nProvides access to the attributes of an R object.\nThis is an extension trait to provide a convenience method …\nThe following impls add operators to Robj.\nThe following impls wrap specific Rinternals.h functions.\nWrapper for an R S-expression pointer (SEXP).\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nAdd two R objects, consuming the left hand side. panics on …\nGet a scalar rust boolean.\nGet a scalar integer.\nGet a read-only reference to the content of an integer …\nGet a read-write reference to the content of an integer or …\nGet a <code>Vec&lt;i32&gt;</code> copied from the object.\nConvert an <code>Robj</code> into <code>Integers</code>.\nGet a scalar boolean as a tri-boolean Rbool value.\nGet an iterator over logical elements of this slice.\nGet a read-only reference to the content of a logical …\nGet a <code>Vec&lt;Rbool&gt;</code> copied from the object using the …\nGet a read-only reference to the content of an integer or …\nGet a read-write reference to the content of a raw vector.\nGet a scalar real.\nGet an iterator over real elements of this slice.\nGet a read-only reference to the content of a double …\nGet a read-write reference to the content of a double …\nGet a <code>Vec&lt;f64&gt;</code> copied from the object.\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nGet a read-only reference to a scalar string type.\nGet a vector of string references. String references …\nGet a vector of owned strings. Owned strings have long …\nGet an immutable slice to this object’s data.\nGet a mutable slice to this object’s data.\nGet the <code>class</code> attribute as a string iterator if one exists.\nGet the <code>dim</code> attribute as an integer iterator if one exists.\nGet the <code>dimnames</code> attribute as a list iterator if one …\nDivide two R objects, consuming the left hand side. panics …\nEvaluate the expression in R and return an error or an R …\nEvaluate the expression and return NULL or an R object.\nEvaluate the expression in R and return an error or an R …\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nYou can return a ListIter from a function.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nConvert a column, matrix or matrix3d to an Robj.\nConvert a rust object to NULL or another type.\nYou can return a PairlistIter from a function.\nConvert a vector of Robj into a list.\nConvert a vector of Rstr into strings.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nReturns the argument unchanged.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nMake an robj from a wrapper.\nA ref of an robj can be constructed from a ref to a SEXP …\nGet a copy of the underlying SEXP.\nGet a specific attribute as a borrowed <code>Robj</code> if it exists.\nReturn true if an attribute exists.\nReturn true if this object has an attribute called <code>names</code>.\nReturn true if this object has this class attribute. …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Robj</code> contains no elements.\nIs this object is an <code>NA</code> scalar? Works for character, …\nGet the extended length of the object.\nGet the <code>levels</code> attribute as a string iterator if one …\nMultiply two R objects, consuming the left hand side. …\nGet the <code>names</code> attribute as a string iterator if one exists.\nGet the type of an R object.\nSet a specific attribute in-place and return the object.\nSet the <code>class</code> attribute from a string iterator, and return …\nSet the <code>names</code> attribute from a string iterator.\nSubtract two R objects, consuming the left hand side. …\nConverts a reference to an ndarray Array into an …\nConverts an ndarray Array into an equivalent R array. The …\nThere are various ways an <code>Robj</code> may be converted into …\nThis is an extension trait to provide a convenience method …\nExtensions to iterators for R objects including …\n<code>ToVectorValue</code> is a trait that allows many different types …\nCollects an iterable into an <code>RArray</code>. The iterable must …\nCollects an iterable into an <code>RArray</code>. The iterable must …\nConvert a wide range of iterators to Robj.\nConvert a wide range of iterators to Robj.\nReturns an <code>CHARSXP</code> based on the provided <code>&amp;str</code>.\nGenerates a <code>ToVectorValue</code> for a type, by inheriting the …\nThe following impls add operators to Robj.\nDo the equivalent of x(a, b, c)\nDo the equivalent of x(a, b, c)\nDo the equivalent of x$y\nDo the equivalent of x$y\nDo the equivalent of x :: y\nDo the equivalent of x :: y\nDo the equivalent of <code>x[[y]]</code>\nDo the equivalent of <code>x[[y]]</code>\nDo the equivalent of <code>x[y]</code>\nDo the equivalent of <code>x[y]</code>\nDo the equivalent of x ~ y\nDo the equivalent of x ~ y\nThe following impls wrap specific Rinternals.h functions.\nAllocate a matrix object.\nAllocate a matrix object.\nAllocated an owned object of a certain type.\nAllocated an owned object of a certain type.\nConvert a factor to a string vector.\nConvert a factor to a string vector.\nConvert to a string vector.\nConvert to a string vector.\nConvert to vectors of many kinds.\nConvert to vectors of many kinds.\nReturn true if two arrays have identical dims.\nReturn true if two arrays have identical dims.\nGenerate a text representation of this object.\nGenerate a text representation of this object.\nDo a deep copy of this object. Note that clone() only adds …\nDo a deep copy of this object. Note that clone() only adds …\nFind a function in an environment ignoring other variables.\nFind a function in an environment ignoring other variables.\nFind a variable in an environment.\nFind a variable in an environment.\nGet the source ref.\nGet the source ref.\nGet the source filename.\nGet the source filename.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is an logical ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is a raw ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an real ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturns <code>true</code> if this is an integer ALTREP object.\nReturn true if this is an array.\nReturn true if this is an array.\nReturn true if this is CHARSXP.\nReturn true if this is CHARSXP.\nReturn true if this is a complex vector.\nReturn true if this is a complex vector.\nReturn true if this is an environment.\nReturn true if this is an environment.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is an expression.\nReturn true if this is factor.\nReturn true if this is factor.\nReturn true if this is a data frame.\nReturn true if this is a data frame.\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is a function or a primitive (CLOSXP, …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is an integer vector (INTSXP) but not …\nReturn true if this is a language object (LANGSXP).\nReturn true if this is a language object (LANGSXP).\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is NILSXP or VECSXP.\nReturn true if this is a boolean (logical) vector\nReturn true if this is a boolean (logical) vector\nReturn true if this is a matrix.\nReturn true if this is a matrix.\nReturn true if this is the null object.\nReturn true if this is the null object.\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is INTSXP, LGLSXP or REALSXP but not a …\nReturn true if this is an object (ie. has a class …\nReturn true if this is an object (ie. has a class …\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is NILSXP or LISTSXP.\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is a primitive function BUILTINSXP, …\nReturn true if this is an environment.\nReturn true if this is an environment.\nReturn true if this is RAWSXP.\nReturn true if this is RAWSXP.\nReturn true if this is a real (f64) vector.\nReturn true if this is a real (f64) vector.\nReturn true if this is a S4 object.\nReturn true if this is a S4 object.\nReturn true if this is a string.\nReturn true if this is a string.\nReturn true if this is a symbol.\nReturn true if this is a symbol.\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a time series vector (see tsp).\nReturn true if this is a user defined binop.\nReturn true if this is a user defined binop.\nReturn true if this is a vector.\nReturn true if this is a vector.\nReturn true if this is an atomic vector.\nReturn true if this is an atomic vector.\nReturn true if this is a vector list.\nReturn true if this is a vector list.\nReturn true if this is can be made into a vector.\nReturn true if this is can be made into a vector.\nNumber of columns of a matrix\nNumber of columns of a matrix\nNumber of rows of a matrix\nNumber of rows of a matrix\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nConvert a pairlist (LISTSXP) to a vector list (VECSXP).\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nConvert a vector list (VECSXP) to a pair list (LISTSXP)\nCopy a vector and resize it. See. …\nCopy a vector and resize it. See. …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nRcplx is a wrapper for f64 in the context of an R’s …\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nImaginary portion of the complex number\nReal portion of the complex number\nGenerates an implementation of a binary operator Trait for …\nGenerates an implementation of a binary operate-assign …\nGenerates an implementation of type conversion Traits from …\nGenerates an implementation of <code>std::iter::Sum</code> for a scalar …\nGenerates an implementation of a number of Traits for the …\nGenerates an implementation of a unary operator Trait for …\n<code>Rbool</code> is a wrapper for <code>i32</code> in the context of an R’s …\nNA always fails.\nReturn a <code>false</code> <code>Rbool</code>.\nReturns the argument unchanged.\nConvert this construct a <code>Rbool</code> from a rust boolean.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this triboolean is <code>false</code> but not <code>NA</code>.\nReturn true is the is a NA value.\nReturn <code>true</code> if this triboolean is <code>true</code> but not <code>NA</code>.\nConstruct a NA.\nReturn a <code>NA</code> <code>Rbool</code>.\nConvert this <code>Rbool</code> to a bool. Note <code>NA</code> will be true.\nReturn a <code>true</code> <code>Rbool</code>.\nConvert an <code>LGLSXP</code> object into a <code>Rbool</code> (tri-state boolean). …\nRcplx is a wrapper for f64 in the context of an R’s …\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64.\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nAdd two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64.\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nDivide two Rcplx values or an option of c64, modifying the …\nNA always fails.\nReturns the argument unchanged.\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64.\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nMultiply two Rcplx values or an option of c64, modifying …\nConstruct a NA.\nNegate a Rcplx value.\nNegate a Rcplx value.\nReal portion of the complex number\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64.\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nSubtract two Rcplx values or an option of c64, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\n<code>Rfloat</code> is a wrapper for <code>f64</code> in the context of an R’s …\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64.\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nAdd two Rfloat values or an option of f64, modifying the …\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64.\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nDivide two Rfloat values or an option of f64, modifying …\nNA always fails.\nDebug format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64.\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nMultiply two Rfloat values or an option of f64, modifying …\nConstruct a NA.\nNegate a Rfloat value.\nNegate a Rfloat value.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64.\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nSubtract two Rfloat values or an option of f64, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\n<code>Rint</code> is a wrapper for <code>i32</code> in the context of an R’s …\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, overflows to NA.\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nAdd two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, overflows to …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nDivide two Rint values or an option of i32, modifying the …\nNA always fails.\nDebug format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true is the is a NA value.\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, overflows to …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nMultiply two Rint values or an option of i32, modifying …\nConstruct a NA.\nNegate a Rint value, overflows to NA.\nNegate a Rint value, overflows to NA.\nLogical not a Rint value, overflows to NA.\nLogical not a Rint value, overflows to NA.\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, overflows to …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nSubtract two Rint values or an option of i32, modifying …\nYields NA on overflow if NAs present.\nYields NA on overflow if NAs present.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a bool to a Robj.\nRaw objects.\nMap a char to a Robj string.\nMap a f32 to a Robj.\nMap a f64 to a Robj.\nMap a i16 to a Robj.\nMap a i32 to a Robj.\nMap a i64 to a Robj.\nMap a i8 to a Robj.\nStart of a map. We require that keys must be strings.\nWrapper struct: Wrap(T)\nWrapper struct in enum: Enum::Wrap(T)\nNone of an option is NULL.\nStart of a vector or other sequence.\nSome of an option is that value.\nMap a string slice to a Robj string.\nStart of a struct. Collect just the values in a list.\neg. <code>Enum::Point { x: i32, y: i32 }</code>\nStart of a tuple.\nStart of a tuple struct eg. <code>Point(i32, i32)</code>.\nStart of a struct variant eg. <code>Enum::Point{ x: i32, y: i32}</code>.\nMap a u16 to a Robj.\nMap a u32 to a Robj.\nMap a u64 to a Robj.\nMap a u8 to a Robj.\nUnit variant: Enum::Name\nConvert a serializable object to a Robj.\nA global lock, that should represent the global lock on …\nWrap an R function such as <code>Rf_findFunction</code> and convert …\nRun <code>f</code> while ensuring that <code>f</code> runs in a single-threaded …\nThis provides an abstraction for R’s <code>data.frame</code>…\n<code>ExternalPtr</code> is a way to leak Rust allocated data to R, …\nWrappers for matrices with deferred arithmetic.\nA pairlist is a linked list of values with optional symbol …\nS4 class support.\nRust trait for implementing ALTREP. Implement one or more …\nSafely implement ALTREP_CLASS.\nCoerce this object into some other type, if possible.\nSafely implement R_altrep_data1, R_altrep_data2. When …\nGet the data pointer for this vector, possibly expanding …\nGet the data pointer for this vector, returning NULL if …\nDuplicate this object. Called by Rf_duplicate. Currently …\nDuplicate this object, possibly duplicating attributes. …\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector.\nGet a single element from this vector a single element of …\nImplement subsetting (eg. <code>x[10:19]</code>) for this Altrep vector.\nReturns the argument unchanged.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nGet a multiple elements from this vector.\nPrint the text for .Internal(inspect(obj))\nCalls <code>U::from(self)</code>.\nReturn true if the ALTREP object has been manifested …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nReturn TRUE if this vector is sorted, FALSE if not and …\nGet the virtual length of the vector. For example for a …\nMake a complex ALTREP class that can be used to make …\nMake an integer ALTREP class that can be used to make …\nMake a logical ALTREP class that can be used to make …\nMake a raw ALTREP class that can be used to make vectors.\nMake a real ALTREP class that can be used to make vectors.\nMake a string ALTREP class that can be used to make …\nReturn the maximum of the elements in this vector. If …\nReturn the maximum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn the minimum of the elements in this vector. If …\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nReturn true if this vector does not contain NAs.\nFetch the state of this object when writing to a file.\nSafely (relatively!) implement R_set_altrep_data1, …\nSet a single element in this vector.\nSet a single element in this list.\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nReturn the sum of the elements in this vector. If …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nSimplified constructor that is called when loading an …\nAn obscure <code>NA</code>-aware wrapper for R’s complex vectors. Can …\nTreat Complexes as if it is a slice, like <code>Vec&lt;Rcplx&gt;</code>\nTreat Complexes as if it is a mutable slice, like …\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP complex (CPLXSXP) vectors …\nWrapper for creating ALTREP complex (CPLXSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a complex object. Forces ALTREP …\nReturn a writable iterator for a complex object. Forces …\nCreate a new vector of complexes.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nA representation of a typed <code>data.frame</code>\nA trait to convert a collection of <code>IntoDataFrameRow</code> into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse <code>#[derive(IntoDataFrameRow)]</code> to use this.\nAn obscure <code>NA</code>-aware wrapper for R’s double vectors. Can …\nTreat Doubles as if it is a slice, like <code>Vec&lt;Rfloat&gt;</code>\nTreat Doubles as if it is a mutable slice, like <code>Vec&lt;Rfloat&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP double (REALSXP) vectors …\nWrapper for creating ALTREP double (REALSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a double object. Forces ALTREP …\nReturn a writable iterator for a double object. Forces …\nCreate a new vector of doubles.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nIterator over the names and values of an environment\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an R environment object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a variable from an environment, but not its ancestors.\nCreate a new, empty environment with a reserved size.\nCreate a new, empty environment.\nGet the enclosing (parent) environment.\nSet or define a variable in an environment.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nWrapper for creating Expressions (EXPRSXP) objects.\nCalls <code>U::from(self)</code>.\nWrapper for creating Expressions (EXPRSXP) objects.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturn an iterator over the values of this expression list.\nWrapper for creating R objects containing any Rust object.\nThis is a zero-length object that holds the type of the …\nGet the “address” field of an external pointer. …\nGet the “address” field of an external pointer as a …\nGet a reference to a Robj for this type.\nGet a mutable reference to a Robj for this type.\nThis allows us to treat the Robj as if it is the type T.\nThis allows us to treat the Robj as if it is the mutable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct an external pointer object from any type T. In …\nGet the “protected” field of an external pointer. This …\nThis is the contained Robj.\nGet the “tag” of an external pointer. This is the type …\nGet the “address” field of an external pointer. …\nGet the “address” field of an external pointer as a …\nWrapper for creating functions (CLOSSXP).\nGet the body of the function or None if it is a primitive.\nDo the equivalent of x(a, b, c)\nGet the environment of the function or None if it is a …\nGet the formal arguments of the function or None if it is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nAn obscure <code>NA</code>-aware wrapper for R’s integer vectors. Can …\nTreat Integers as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Integers as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP integer (INTSXP) vectors …\nWrapper for creating ALTREP integer (INTSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nReturn an iterator for a integer object. Forces ALTREP …\nReturn a writable iterator for a integer object. Forces …\nCreate a new vector of integers.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating language objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can use the FromList wrapper to coerce a Robj into a …\nIterator over the objects in a VECSXP, EXPRSXP or …\nGet the list a slice of <code>Robj</code>s.\nLists behave like slices of Robj.\nGet a reference to an element in the list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrapper for creating a list (VECSXP) object from an …\nConvert an iterator to a <code>List</code> object.\nBuild a list using separate names and values iterators. …\nWrapper for creating a list (VECSXP) object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a List into a HashMap, consuming the list.\nConvert a List into an interator, consuming the list.\nReturn an iterator over the names and values of this list.\nLength of a list iterator.\nCreate a new list.\nSet an element in the list.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nConvert a general R object into a List iterator if …\nConvert a general R object into a List iterator if …\nReturn an iterator over the values of this list.\nAn obscure <code>NA</code>-aware wrapper for R’s logical vectors. Can …\nTreat Logicals as if it is a slice, like <code>Vec&lt;Rint&gt;</code>\nTreat Logicals as if it is a mutable slice, like <code>Vec&lt;Rint&gt;</code>\nGet a single element from the vector. Note that this is …\nReturns the argument unchanged.\nA more generalised iterator collector for small vectors. …\nWrapper for creating non-ALTREP logical (LGLSXP) vectors …\nWrapper for creating ALTREP logical (LGLSXP) vectors from …\nGet a region of elements from the vector.\nCalls <code>U::from(self)</code>.\nReturn an iterator for a logical object. Forces ALTREP …\nReturn a writable iterator for a logical object. Forces …\nCreate a new vector of logicals.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nGenerates <code>impl</code> block and required traits for a vector type.\nWrapper for creating and using matrices and arrays.\nReturns a flat representation of the array in col-major.\nReturns a flat, mutable representation of the array in …\nGet the dimensions for this array.\nDimensions of the array.\nDimensions of the array.\nDimensions of the array.\nDimensions of the array.\nConvert a faer MatRef into Robj.\nReturns the argument unchanged.\nZero-based indexing in row, column order.\nZero-based mutable indexing in row, column order.\nCalls <code>U::from(self)</code>.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nGet the number of columns.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nMake a new column type.\nMake a new column type.\nCreate a new matrix wrapper.\nCreate a new matrix wrapper.\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nReturns an <code>RMatrix</code> with dimensions according to <code>nrow</code> and …\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of rows.\nGet the number of submatrices.\nGet the number of submatrices.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nGet the offset into the array for a given index.\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nOwning Robj (probably should be a Pin).\nSet the dimensions of an array.\nSet the dimension names of an array.\nSet the names of the elements of an array.\nWrapper for handling potentially NULL values.\nReturns the argument unchanged.\nConvert an Option into Nullable type\nCalls <code>U::from(self)</code>.\nConvert Nullable R object into <code>Option</code>\nMap <code>Nullable&lt;T&gt;</code> into <code>Nullable&lt;U&gt;</code>\nConvert an object that may be null to a rust type.\nConvert an object that may be null to a rust type.\nGenerate paits of names and values.\nReturns the argument unchanged.\nConstruct a NULL pairlist (which is a NULL).\nReturns the argument unchanged.\nConvert an iterator of names and values to a pairlist …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a PairList into an interator, consuming the …\nGenerate paits of names and values.\nMake an empty pairlist iterator.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nYou can pass a PairlistIter to a function.\nWrapper for creating primitive objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating promises (PROMSXP).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating raw (byte) objects.\nGet a slice of bytes from the Raw object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Raw object of length <code>len</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating CHARSXP objects. These are used only …\nTreat a Rstr as a string slice.\nGet the string from a character object. If the string is …\nReturns a rust string-slice based on the provided <code>SEXP</code>, …\nTreat <code>Rstr</code> like <code>&amp;str</code>.\nCompare a <code>Rstr</code> with a string slice.\nCompare a <code>Rstr</code> with a <code>Rstr</code>.\nConvert a string slice to a Rstr.\nConvert a String to a Rstr.\nReturns the argument unchanged.\nMake a character object from a string.\nCalls <code>U::from(self)</code>.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nReturns the argument unchanged.\nGet a named slot from a S4 object.\nCheck if a named slot exists.\nCalls <code>U::from(self)</code>.\nCreate a S4 object.\nCreate a S4 class.\nSet a named slot in a S4 object.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nThis is a relatively expensive operation, so use a …\nGet an element in a string vector.\nReturns the argument unchanged.\nconvert string-like objects into a Strings object.\nConvert an iterator to a Strings object.\nWrapper for creating string vector (STRSXP) objects.\nCalls <code>U::from(self)</code>.\nReturn <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …\nGet an iterator for this string vector.\nCreate a new, empty list.\nReturn <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …\nSet a single element of this string vector.\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\nWrapper for creating symbol objects.\nGet the string from a symbol object.\n“base”\n“{”\n“[[”\n“[”\n“class”\n“.Device”\n“dim”\n“dimnames”\n“$”\n“.defined”\n“.Method”\n“packageName”\n“.target”\n“…”\n“::”\nReturns the argument unchanged.\nConvert a string to a symbol.\nMake a symbol object from a string.\nCalls <code>U::from(self)</code>.\n“.Last.value”\n“levels”\nMissing argument marker\n“mode”\n“na.rm”\n“name”\n“names”\n<em>NAMESPACE</em>_.“\n“package”\n“previous”\n“quote”\n“row.names”\n“.Random.seed”\n“sort.list”\n“source”\n“spec”\n“:::”\nMake a wrapper from a robj if it matches.\nMake a wrapper from a robj if it matches.\n“tsp”\nUnbound marker\nConvert a <code>CHARSXP</code> object to a <code>Rstr</code> wrapper.\nConvert an environment object (ENVSXP) to a Env wrapper.\nConvert an expression object (EXPRSXP) to a Expr wrapper.\nConvert a function object (CLOSXP) to a Function wrapper.\nConvert a language object to a Language wrapper.\nConvert a list object (VECSXP) to a List wrapper.\nConvert a pair list object (LISTSXP) to a Pairlist wrapper.\nGet a wrapper for a promise.\nConvert a raw object to a Rstr wrapper.\nConvert a symbol object to a Symbol wrapper.")